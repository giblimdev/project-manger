
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Teams
 * 
 */
export type Teams = $Result.DefaultSelection<Prisma.$TeamsPayload>
/**
 * Model Projects
 * 
 */
export type Projects = $Result.DefaultSelection<Prisma.$ProjectsPayload>
/**
 * Model RoadMap
 * 
 */
export type RoadMap = $Result.DefaultSelection<Prisma.$RoadMapPayload>
/**
 * Model Features
 * 
 */
export type Features = $Result.DefaultSelection<Prisma.$FeaturesPayload>
/**
 * Model UserStory
 * 
 */
export type UserStory = $Result.DefaultSelection<Prisma.$UserStoryPayload>
/**
 * Model Sprints
 * 
 */
export type Sprints = $Result.DefaultSelection<Prisma.$SprintsPayload>
/**
 * Model Tasks
 * 
 */
export type Tasks = $Result.DefaultSelection<Prisma.$TasksPayload>
/**
 * Model SchemaFields
 * 
 */
export type SchemaFields = $Result.DefaultSelection<Prisma.$SchemaFieldsPayload>
/**
 * Model TimeLog
 * 
 */
export type TimeLog = $Result.DefaultSelection<Prisma.$TimeLogPayload>
/**
 * Model Comments
 * 
 */
export type Comments = $Result.DefaultSelection<Prisma.$CommentsPayload>
/**
 * Model Files
 * 
 */
export type Files = $Result.DefaultSelection<Prisma.$FilesPayload>
/**
 * Model ActivityLogs
 * 
 */
export type ActivityLogs = $Result.DefaultSelection<Prisma.$ActivityLogsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  READER: 'READER',
  AUTHOR: 'AUTHOR',
  DEV: 'DEV',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Status: {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  DONE: 'DONE',
  BLOCKED: 'BLOCKED',
  CANCELLED: 'CANCELLED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const FileType: {
  PAGE: 'PAGE',
  COMPONENT: 'COMPONENT',
  UTIL: 'UTIL',
  LIB: 'LIB',
  STORE: 'STORE',
  DOCUMENT: 'DOCUMENT',
  IMAGE: 'IMAGE',
  SPREADSHEET: 'SPREADSHEET',
  PRESENTATION: 'PRESENTATION',
  ARCHIVE: 'ARCHIVE',
  CODE: 'CODE',
  OTHER: 'OTHER'
};

export type FileType = (typeof FileType)[keyof typeof FileType]


export const ActionType: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE'
};

export type ActionType = (typeof ActionType)[keyof typeof ActionType]


export const SprintStatus: {
  PLANNED: 'PLANNED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type SprintStatus = (typeof SprintStatus)[keyof typeof SprintStatus]


export const FieldType: {
  STRING: 'STRING',
  INTEGER: 'INTEGER',
  BOOLEAN: 'BOOLEAN',
  DATE: 'DATE',
  DATETIME: 'DATETIME',
  FLOAT: 'FLOAT',
  JSON: 'JSON',
  ENUM: 'ENUM'
};

export type FieldType = (typeof FieldType)[keyof typeof FieldType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type FileType = $Enums.FileType

export const FileType: typeof $Enums.FileType

export type ActionType = $Enums.ActionType

export const ActionType: typeof $Enums.ActionType

export type SprintStatus = $Enums.SprintStatus

export const SprintStatus: typeof $Enums.SprintStatus

export type FieldType = $Enums.FieldType

export const FieldType: typeof $Enums.FieldType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teams`: Exposes CRUD operations for the **Teams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.teams.findMany()
    * ```
    */
  get teams(): Prisma.TeamsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **Projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.ProjectsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roadMap`: Exposes CRUD operations for the **RoadMap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoadMaps
    * const roadMaps = await prisma.roadMap.findMany()
    * ```
    */
  get roadMap(): Prisma.RoadMapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.features`: Exposes CRUD operations for the **Features** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Features
    * const features = await prisma.features.findMany()
    * ```
    */
  get features(): Prisma.FeaturesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStory`: Exposes CRUD operations for the **UserStory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStories
    * const userStories = await prisma.userStory.findMany()
    * ```
    */
  get userStory(): Prisma.UserStoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprints`: Exposes CRUD operations for the **Sprints** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sprints
    * const sprints = await prisma.sprints.findMany()
    * ```
    */
  get sprints(): Prisma.SprintsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **Tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.TasksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schemaFields`: Exposes CRUD operations for the **SchemaFields** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchemaFields
    * const schemaFields = await prisma.schemaFields.findMany()
    * ```
    */
  get schemaFields(): Prisma.SchemaFieldsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.timeLog`: Exposes CRUD operations for the **TimeLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimeLogs
    * const timeLogs = await prisma.timeLog.findMany()
    * ```
    */
  get timeLog(): Prisma.TimeLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.files`: Exposes CRUD operations for the **Files** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.files.findMany()
    * ```
    */
  get files(): Prisma.FilesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityLogs`: Exposes CRUD operations for the **ActivityLogs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLogs
    * const activityLogs = await prisma.activityLogs.findMany()
    * ```
    */
  get activityLogs(): Prisma.ActivityLogsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Teams: 'Teams',
    Projects: 'Projects',
    RoadMap: 'RoadMap',
    Features: 'Features',
    UserStory: 'UserStory',
    Sprints: 'Sprints',
    Tasks: 'Tasks',
    SchemaFields: 'SchemaFields',
    TimeLog: 'TimeLog',
    Comments: 'Comments',
    Files: 'Files',
    ActivityLogs: 'ActivityLogs'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "account" | "verification" | "teams" | "projects" | "roadMap" | "features" | "userStory" | "sprints" | "tasks" | "schemaFields" | "timeLog" | "comments" | "files" | "activityLogs"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Teams: {
        payload: Prisma.$TeamsPayload<ExtArgs>
        fields: Prisma.TeamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          findFirst: {
            args: Prisma.TeamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          findMany: {
            args: Prisma.TeamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>[]
          }
          create: {
            args: Prisma.TeamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          createMany: {
            args: Prisma.TeamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>[]
          }
          delete: {
            args: Prisma.TeamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          update: {
            args: Prisma.TeamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          deleteMany: {
            args: Prisma.TeamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>[]
          }
          upsert: {
            args: Prisma.TeamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          aggregate: {
            args: Prisma.TeamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeams>
          }
          groupBy: {
            args: Prisma.TeamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamsCountAggregateOutputType> | number
          }
        }
      }
      Projects: {
        payload: Prisma.$ProjectsPayload<ExtArgs>
        fields: Prisma.ProjectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          findFirst: {
            args: Prisma.ProjectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          findMany: {
            args: Prisma.ProjectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>[]
          }
          create: {
            args: Prisma.ProjectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          createMany: {
            args: Prisma.ProjectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>[]
          }
          delete: {
            args: Prisma.ProjectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          update: {
            args: Prisma.ProjectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          deleteMany: {
            args: Prisma.ProjectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>[]
          }
          upsert: {
            args: Prisma.ProjectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          aggregate: {
            args: Prisma.ProjectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjects>
          }
          groupBy: {
            args: Prisma.ProjectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectsCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectsCountAggregateOutputType> | number
          }
        }
      }
      RoadMap: {
        payload: Prisma.$RoadMapPayload<ExtArgs>
        fields: Prisma.RoadMapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoadMapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoadMapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>
          }
          findFirst: {
            args: Prisma.RoadMapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoadMapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>
          }
          findMany: {
            args: Prisma.RoadMapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>[]
          }
          create: {
            args: Prisma.RoadMapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>
          }
          createMany: {
            args: Prisma.RoadMapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoadMapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>[]
          }
          delete: {
            args: Prisma.RoadMapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>
          }
          update: {
            args: Prisma.RoadMapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>
          }
          deleteMany: {
            args: Prisma.RoadMapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoadMapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoadMapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>[]
          }
          upsert: {
            args: Prisma.RoadMapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadMapPayload>
          }
          aggregate: {
            args: Prisma.RoadMapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoadMap>
          }
          groupBy: {
            args: Prisma.RoadMapGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoadMapGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoadMapCountArgs<ExtArgs>
            result: $Utils.Optional<RoadMapCountAggregateOutputType> | number
          }
        }
      }
      Features: {
        payload: Prisma.$FeaturesPayload<ExtArgs>
        fields: Prisma.FeaturesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeaturesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeaturesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>
          }
          findFirst: {
            args: Prisma.FeaturesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeaturesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>
          }
          findMany: {
            args: Prisma.FeaturesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>[]
          }
          create: {
            args: Prisma.FeaturesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>
          }
          createMany: {
            args: Prisma.FeaturesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeaturesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>[]
          }
          delete: {
            args: Prisma.FeaturesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>
          }
          update: {
            args: Prisma.FeaturesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>
          }
          deleteMany: {
            args: Prisma.FeaturesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeaturesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeaturesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>[]
          }
          upsert: {
            args: Prisma.FeaturesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturesPayload>
          }
          aggregate: {
            args: Prisma.FeaturesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeatures>
          }
          groupBy: {
            args: Prisma.FeaturesGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeaturesGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeaturesCountArgs<ExtArgs>
            result: $Utils.Optional<FeaturesCountAggregateOutputType> | number
          }
        }
      }
      UserStory: {
        payload: Prisma.$UserStoryPayload<ExtArgs>
        fields: Prisma.UserStoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>
          }
          findFirst: {
            args: Prisma.UserStoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>
          }
          findMany: {
            args: Prisma.UserStoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>[]
          }
          create: {
            args: Prisma.UserStoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>
          }
          createMany: {
            args: Prisma.UserStoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>[]
          }
          delete: {
            args: Prisma.UserStoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>
          }
          update: {
            args: Prisma.UserStoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>
          }
          deleteMany: {
            args: Prisma.UserStoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>[]
          }
          upsert: {
            args: Prisma.UserStoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStoryPayload>
          }
          aggregate: {
            args: Prisma.UserStoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStory>
          }
          groupBy: {
            args: Prisma.UserStoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStoryCountArgs<ExtArgs>
            result: $Utils.Optional<UserStoryCountAggregateOutputType> | number
          }
        }
      }
      Sprints: {
        payload: Prisma.$SprintsPayload<ExtArgs>
        fields: Prisma.SprintsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SprintsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SprintsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>
          }
          findFirst: {
            args: Prisma.SprintsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SprintsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>
          }
          findMany: {
            args: Prisma.SprintsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>[]
          }
          create: {
            args: Prisma.SprintsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>
          }
          createMany: {
            args: Prisma.SprintsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SprintsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>[]
          }
          delete: {
            args: Prisma.SprintsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>
          }
          update: {
            args: Prisma.SprintsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>
          }
          deleteMany: {
            args: Prisma.SprintsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SprintsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SprintsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>[]
          }
          upsert: {
            args: Prisma.SprintsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintsPayload>
          }
          aggregate: {
            args: Prisma.SprintsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprints>
          }
          groupBy: {
            args: Prisma.SprintsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SprintsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SprintsCountArgs<ExtArgs>
            result: $Utils.Optional<SprintsCountAggregateOutputType> | number
          }
        }
      }
      Tasks: {
        payload: Prisma.$TasksPayload<ExtArgs>
        fields: Prisma.TasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TasksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TasksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          findFirst: {
            args: Prisma.TasksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TasksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          findMany: {
            args: Prisma.TasksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>[]
          }
          create: {
            args: Prisma.TasksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          createMany: {
            args: Prisma.TasksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TasksCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>[]
          }
          delete: {
            args: Prisma.TasksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          update: {
            args: Prisma.TasksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          deleteMany: {
            args: Prisma.TasksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TasksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TasksUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>[]
          }
          upsert: {
            args: Prisma.TasksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          aggregate: {
            args: Prisma.TasksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTasks>
          }
          groupBy: {
            args: Prisma.TasksGroupByArgs<ExtArgs>
            result: $Utils.Optional<TasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.TasksCountArgs<ExtArgs>
            result: $Utils.Optional<TasksCountAggregateOutputType> | number
          }
        }
      }
      SchemaFields: {
        payload: Prisma.$SchemaFieldsPayload<ExtArgs>
        fields: Prisma.SchemaFieldsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchemaFieldsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchemaFieldsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>
          }
          findFirst: {
            args: Prisma.SchemaFieldsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchemaFieldsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>
          }
          findMany: {
            args: Prisma.SchemaFieldsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>[]
          }
          create: {
            args: Prisma.SchemaFieldsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>
          }
          createMany: {
            args: Prisma.SchemaFieldsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchemaFieldsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>[]
          }
          delete: {
            args: Prisma.SchemaFieldsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>
          }
          update: {
            args: Prisma.SchemaFieldsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>
          }
          deleteMany: {
            args: Prisma.SchemaFieldsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchemaFieldsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SchemaFieldsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>[]
          }
          upsert: {
            args: Prisma.SchemaFieldsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemaFieldsPayload>
          }
          aggregate: {
            args: Prisma.SchemaFieldsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchemaFields>
          }
          groupBy: {
            args: Prisma.SchemaFieldsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchemaFieldsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchemaFieldsCountArgs<ExtArgs>
            result: $Utils.Optional<SchemaFieldsCountAggregateOutputType> | number
          }
        }
      }
      TimeLog: {
        payload: Prisma.$TimeLogPayload<ExtArgs>
        fields: Prisma.TimeLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>
          }
          findFirst: {
            args: Prisma.TimeLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>
          }
          findMany: {
            args: Prisma.TimeLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>[]
          }
          create: {
            args: Prisma.TimeLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>
          }
          createMany: {
            args: Prisma.TimeLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimeLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>[]
          }
          delete: {
            args: Prisma.TimeLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>
          }
          update: {
            args: Prisma.TimeLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>
          }
          deleteMany: {
            args: Prisma.TimeLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimeLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TimeLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>[]
          }
          upsert: {
            args: Prisma.TimeLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeLogPayload>
          }
          aggregate: {
            args: Prisma.TimeLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimeLog>
          }
          groupBy: {
            args: Prisma.TimeLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimeLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeLogCountArgs<ExtArgs>
            result: $Utils.Optional<TimeLogCountAggregateOutputType> | number
          }
        }
      }
      Comments: {
        payload: Prisma.$CommentsPayload<ExtArgs>
        fields: Prisma.CommentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findFirst: {
            args: Prisma.CommentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findMany: {
            args: Prisma.CommentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          create: {
            args: Prisma.CommentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          createMany: {
            args: Prisma.CommentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          delete: {
            args: Prisma.CommentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          update: {
            args: Prisma.CommentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          deleteMany: {
            args: Prisma.CommentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          upsert: {
            args: Prisma.CommentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.CommentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentsCountArgs<ExtArgs>
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
      Files: {
        payload: Prisma.$FilesPayload<ExtArgs>
        fields: Prisma.FilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FilesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FilesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          findFirst: {
            args: Prisma.FilesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FilesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          findMany: {
            args: Prisma.FilesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>[]
          }
          create: {
            args: Prisma.FilesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          createMany: {
            args: Prisma.FilesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FilesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>[]
          }
          delete: {
            args: Prisma.FilesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          update: {
            args: Prisma.FilesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          deleteMany: {
            args: Prisma.FilesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FilesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FilesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>[]
          }
          upsert: {
            args: Prisma.FilesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilesPayload>
          }
          aggregate: {
            args: Prisma.FilesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFiles>
          }
          groupBy: {
            args: Prisma.FilesGroupByArgs<ExtArgs>
            result: $Utils.Optional<FilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.FilesCountArgs<ExtArgs>
            result: $Utils.Optional<FilesCountAggregateOutputType> | number
          }
        }
      }
      ActivityLogs: {
        payload: Prisma.$ActivityLogsPayload<ExtArgs>
        fields: Prisma.ActivityLogsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLogsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLogsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>
          }
          findFirst: {
            args: Prisma.ActivityLogsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLogsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>
          }
          findMany: {
            args: Prisma.ActivityLogsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>[]
          }
          create: {
            args: Prisma.ActivityLogsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>
          }
          createMany: {
            args: Prisma.ActivityLogsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLogsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>[]
          }
          delete: {
            args: Prisma.ActivityLogsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>
          }
          update: {
            args: Prisma.ActivityLogsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLogsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLogsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityLogsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>[]
          }
          upsert: {
            args: Prisma.ActivityLogsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogsPayload>
          }
          aggregate: {
            args: Prisma.ActivityLogsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLogs>
          }
          groupBy: {
            args: Prisma.ActivityLogsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLogsCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    teams?: TeamsOmit
    projects?: ProjectsOmit
    roadMap?: RoadMapOmit
    features?: FeaturesOmit
    userStory?: UserStoryOmit
    sprints?: SprintsOmit
    tasks?: TasksOmit
    schemaFields?: SchemaFieldsOmit
    timeLog?: TimeLogOmit
    comments?: CommentsOmit
    files?: FilesOmit
    activityLogs?: ActivityLogsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
    verifications: number
    projects: number
    createdProjects: number
    createdFeatures: number
    createdUserStories: number
    assignedTasks: number
    authoredComments: number
    timeLogs: number
    activityLogs: number
    uploadedFiles: number
    createdTeams: number
    memberTeams: number
    createdRoadMaps: number
    createdSprints: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    verifications?: boolean | UserCountOutputTypeCountVerificationsArgs
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    createdProjects?: boolean | UserCountOutputTypeCountCreatedProjectsArgs
    createdFeatures?: boolean | UserCountOutputTypeCountCreatedFeaturesArgs
    createdUserStories?: boolean | UserCountOutputTypeCountCreatedUserStoriesArgs
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs
    authoredComments?: boolean | UserCountOutputTypeCountAuthoredCommentsArgs
    timeLogs?: boolean | UserCountOutputTypeCountTimeLogsArgs
    activityLogs?: boolean | UserCountOutputTypeCountActivityLogsArgs
    uploadedFiles?: boolean | UserCountOutputTypeCountUploadedFilesArgs
    createdTeams?: boolean | UserCountOutputTypeCountCreatedTeamsArgs
    memberTeams?: boolean | UserCountOutputTypeCountMemberTeamsArgs
    createdRoadMaps?: boolean | UserCountOutputTypeCountCreatedRoadMapsArgs
    createdSprints?: boolean | UserCountOutputTypeCountCreatedSprintsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthoredCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimeLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemberTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
  }


  /**
   * Count Type TeamsCountOutputType
   */

  export type TeamsCountOutputType = {
    members: number
    projects: number
  }

  export type TeamsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TeamsCountOutputTypeCountMembersArgs
    projects?: boolean | TeamsCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamsCountOutputType
     */
    select?: TeamsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
  }


  /**
   * Count Type ProjectsCountOutputType
   */

  export type ProjectsCountOutputType = {
    users: number
    teams: number
    features: number
    userStories: number
    sprints: number
    files: number
    schemaFields: number
    roadMaps: number
    tasks: number
    timeLogs: number
  }

  export type ProjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ProjectsCountOutputTypeCountUsersArgs
    teams?: boolean | ProjectsCountOutputTypeCountTeamsArgs
    features?: boolean | ProjectsCountOutputTypeCountFeaturesArgs
    userStories?: boolean | ProjectsCountOutputTypeCountUserStoriesArgs
    sprints?: boolean | ProjectsCountOutputTypeCountSprintsArgs
    files?: boolean | ProjectsCountOutputTypeCountFilesArgs
    schemaFields?: boolean | ProjectsCountOutputTypeCountSchemaFieldsArgs
    roadMaps?: boolean | ProjectsCountOutputTypeCountRoadMapsArgs
    tasks?: boolean | ProjectsCountOutputTypeCountTasksArgs
    timeLogs?: boolean | ProjectsCountOutputTypeCountTimeLogsArgs
  }

  // Custom InputTypes
  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsCountOutputType
     */
    select?: ProjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountSchemaFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchemaFieldsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountTimeLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeLogWhereInput
  }


  /**
   * Count Type RoadMapCountOutputType
   */

  export type RoadMapCountOutputType = {
    comments: number
    files: number
    features: number
    userStories: number
    sprints: number
    tasks: number
  }

  export type RoadMapCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | RoadMapCountOutputTypeCountCommentsArgs
    files?: boolean | RoadMapCountOutputTypeCountFilesArgs
    features?: boolean | RoadMapCountOutputTypeCountFeaturesArgs
    userStories?: boolean | RoadMapCountOutputTypeCountUserStoriesArgs
    sprints?: boolean | RoadMapCountOutputTypeCountSprintsArgs
    tasks?: boolean | RoadMapCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMapCountOutputType
     */
    select?: RoadMapCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
  }

  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeCountUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
  }

  /**
   * RoadMapCountOutputType without action
   */
  export type RoadMapCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }


  /**
   * Count Type FeaturesCountOutputType
   */

  export type FeaturesCountOutputType = {
    childFeatures: number
    comments: number
    roadMaps: number
    userStories: number
    sprints: number
    tasks: number
  }

  export type FeaturesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childFeatures?: boolean | FeaturesCountOutputTypeCountChildFeaturesArgs
    comments?: boolean | FeaturesCountOutputTypeCountCommentsArgs
    roadMaps?: boolean | FeaturesCountOutputTypeCountRoadMapsArgs
    userStories?: boolean | FeaturesCountOutputTypeCountUserStoriesArgs
    sprints?: boolean | FeaturesCountOutputTypeCountSprintsArgs
    tasks?: boolean | FeaturesCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeaturesCountOutputType
     */
    select?: FeaturesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeCountChildFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeCountRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }

  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeCountUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
  }

  /**
   * FeaturesCountOutputType without action
   */
  export type FeaturesCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }


  /**
   * Count Type UserStoryCountOutputType
   */

  export type UserStoryCountOutputType = {
    childUserStories: number
    comments: number
    roadMaps: number
    features: number
    sprints: number
    tasks: number
  }

  export type UserStoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childUserStories?: boolean | UserStoryCountOutputTypeCountChildUserStoriesArgs
    comments?: boolean | UserStoryCountOutputTypeCountCommentsArgs
    roadMaps?: boolean | UserStoryCountOutputTypeCountRoadMapsArgs
    features?: boolean | UserStoryCountOutputTypeCountFeaturesArgs
    sprints?: boolean | UserStoryCountOutputTypeCountSprintsArgs
    tasks?: boolean | UserStoryCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStoryCountOutputType
     */
    select?: UserStoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeCountChildUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeCountRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }

  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
  }

  /**
   * UserStoryCountOutputType without action
   */
  export type UserStoryCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }


  /**
   * Count Type SprintsCountOutputType
   */

  export type SprintsCountOutputType = {
    comments: number
    roadMaps: number
    features: number
    userStories: number
    tasks: number
  }

  export type SprintsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | SprintsCountOutputTypeCountCommentsArgs
    roadMaps?: boolean | SprintsCountOutputTypeCountRoadMapsArgs
    features?: boolean | SprintsCountOutputTypeCountFeaturesArgs
    userStories?: boolean | SprintsCountOutputTypeCountUserStoriesArgs
    tasks?: boolean | SprintsCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintsCountOutputType
     */
    select?: SprintsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeCountRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }

  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeCountUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * SprintsCountOutputType without action
   */
  export type SprintsCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }


  /**
   * Count Type TasksCountOutputType
   */

  export type TasksCountOutputType = {
    childTasks: number
    timeLogs: number
    comments: number
    roadMaps: number
    features: number
    userStories: number
    sprints: number
  }

  export type TasksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childTasks?: boolean | TasksCountOutputTypeCountChildTasksArgs
    timeLogs?: boolean | TasksCountOutputTypeCountTimeLogsArgs
    comments?: boolean | TasksCountOutputTypeCountCommentsArgs
    roadMaps?: boolean | TasksCountOutputTypeCountRoadMapsArgs
    features?: boolean | TasksCountOutputTypeCountFeaturesArgs
    userStories?: boolean | TasksCountOutputTypeCountUserStoriesArgs
    sprints?: boolean | TasksCountOutputTypeCountSprintsArgs
  }

  // Custom InputTypes
  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TasksCountOutputType
     */
    select?: TasksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountChildTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountTimeLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeLogWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
  }


  /**
   * Count Type SchemaFieldsCountOutputType
   */

  export type SchemaFieldsCountOutputType = {
    childFields: number
  }

  export type SchemaFieldsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childFields?: boolean | SchemaFieldsCountOutputTypeCountChildFieldsArgs
  }

  // Custom InputTypes
  /**
   * SchemaFieldsCountOutputType without action
   */
  export type SchemaFieldsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFieldsCountOutputType
     */
    select?: SchemaFieldsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchemaFieldsCountOutputType without action
   */
  export type SchemaFieldsCountOutputTypeCountChildFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchemaFieldsWhereInput
  }


  /**
   * Count Type CommentsCountOutputType
   */

  export type CommentsCountOutputType = {
    childComments: number
  }

  export type CommentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childComments?: boolean | CommentsCountOutputTypeCountChildCommentsArgs
  }

  // Custom InputTypes
  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentsCountOutputType
     */
    select?: CommentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeCountChildCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }


  /**
   * Count Type FilesCountOutputType
   */

  export type FilesCountOutputType = {
    childFiles: number
    roadMaps: number
  }

  export type FilesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childFiles?: boolean | FilesCountOutputTypeCountChildFilesArgs
    roadMaps?: boolean | FilesCountOutputTypeCountRoadMapsArgs
  }

  // Custom InputTypes
  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FilesCountOutputType
     */
    select?: FilesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeCountChildFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
  }

  /**
   * FilesCountOutputType without action
   */
  export type FilesCountOutputTypeCountRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    role: $Enums.Role | null
    lang: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    role: $Enums.Role | null
    lang: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    role: number
    lang: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    lang?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    lang?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    lang?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: boolean
    image: string | null
    role: $Enums.Role
    lang: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    lang?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    verifications?: boolean | User$verificationsArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    createdProjects?: boolean | User$createdProjectsArgs<ExtArgs>
    createdFeatures?: boolean | User$createdFeaturesArgs<ExtArgs>
    createdUserStories?: boolean | User$createdUserStoriesArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    authoredComments?: boolean | User$authoredCommentsArgs<ExtArgs>
    timeLogs?: boolean | User$timeLogsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    createdTeams?: boolean | User$createdTeamsArgs<ExtArgs>
    memberTeams?: boolean | User$memberTeamsArgs<ExtArgs>
    createdRoadMaps?: boolean | User$createdRoadMapsArgs<ExtArgs>
    createdSprints?: boolean | User$createdSprintsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    lang?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    lang?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    lang?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "role" | "lang" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    verifications?: boolean | User$verificationsArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    createdProjects?: boolean | User$createdProjectsArgs<ExtArgs>
    createdFeatures?: boolean | User$createdFeaturesArgs<ExtArgs>
    createdUserStories?: boolean | User$createdUserStoriesArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    authoredComments?: boolean | User$authoredCommentsArgs<ExtArgs>
    timeLogs?: boolean | User$timeLogsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    createdTeams?: boolean | User$createdTeamsArgs<ExtArgs>
    memberTeams?: boolean | User$memberTeamsArgs<ExtArgs>
    createdRoadMaps?: boolean | User$createdRoadMapsArgs<ExtArgs>
    createdSprints?: boolean | User$createdSprintsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      verifications: Prisma.$VerificationPayload<ExtArgs>[]
      projects: Prisma.$ProjectsPayload<ExtArgs>[]
      createdProjects: Prisma.$ProjectsPayload<ExtArgs>[]
      createdFeatures: Prisma.$FeaturesPayload<ExtArgs>[]
      createdUserStories: Prisma.$UserStoryPayload<ExtArgs>[]
      assignedTasks: Prisma.$TasksPayload<ExtArgs>[]
      authoredComments: Prisma.$CommentsPayload<ExtArgs>[]
      timeLogs: Prisma.$TimeLogPayload<ExtArgs>[]
      activityLogs: Prisma.$ActivityLogsPayload<ExtArgs>[]
      uploadedFiles: Prisma.$FilesPayload<ExtArgs>[]
      createdTeams: Prisma.$TeamsPayload<ExtArgs>[]
      memberTeams: Prisma.$TeamsPayload<ExtArgs>[]
      createdRoadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
      createdSprints: Prisma.$SprintsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: boolean
      image: string | null
      role: $Enums.Role
      lang: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    verifications<T extends User$verificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$verificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdProjects<T extends User$createdProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdFeatures<T extends User$createdFeaturesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdFeaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdUserStories<T extends User$createdUserStoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdUserStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    authoredComments<T extends User$authoredCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$authoredCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timeLogs<T extends User$timeLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$timeLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityLogs<T extends User$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedFiles<T extends User$uploadedFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdTeams<T extends User$createdTeamsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTeamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    memberTeams<T extends User$memberTeamsArgs<ExtArgs> = {}>(args?: Subset<T, User$memberTeamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdRoadMaps<T extends User$createdRoadMapsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRoadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdSprints<T extends User$createdSprintsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly lang: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.verifications
   */
  export type User$verificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    cursor?: VerificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * User.createdProjects
   */
  export type User$createdProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * User.createdFeatures
   */
  export type User$createdFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * User.createdUserStories
   */
  export type User$createdUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * User.authoredComments
   */
  export type User$authoredCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * User.timeLogs
   */
  export type User$timeLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    where?: TimeLogWhereInput
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    cursor?: TimeLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeLogScalarFieldEnum | TimeLogScalarFieldEnum[]
  }

  /**
   * User.activityLogs
   */
  export type User$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    where?: ActivityLogsWhereInput
    orderBy?: ActivityLogsOrderByWithRelationInput | ActivityLogsOrderByWithRelationInput[]
    cursor?: ActivityLogsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogsScalarFieldEnum | ActivityLogsScalarFieldEnum[]
  }

  /**
   * User.uploadedFiles
   */
  export type User$uploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    cursor?: FilesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * User.createdTeams
   */
  export type User$createdTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    cursor?: TeamsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * User.memberTeams
   */
  export type User$memberTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    cursor?: TeamsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * User.createdRoadMaps
   */
  export type User$createdRoadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * User.createdSprints
   */
  export type User$createdSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    cursor?: SprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    ipAddress: number
    userAgent: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "ipAddress" | "userAgent" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    accountId: string | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    idToken: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    accountId: string | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    idToken: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    accountId: number
    providerId: number
    accessToken: number
    refreshToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    idToken: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    accountId?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    idToken?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    accountId?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    idToken?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    accountId?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    idToken?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    accountId: string
    providerId: string
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    idToken: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    idToken?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    idToken?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    idToken?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    idToken?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "accountId" | "providerId" | "accessToken" | "refreshToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "idToken" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      accountId: string
      providerId: string
      accessToken: string | null
      refreshToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      idToken: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["verification"]>
  export type VerificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VerificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VerificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
    readonly userId: FieldRef<"Verification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
  }


  /**
   * Model Teams
   */

  export type AggregateTeams = {
    _count: TeamsCountAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  export type TeamsMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    privileges: string | null
    teamType: string | null
    creatorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    privileges: string | null
    teamType: string | null
    creatorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image: number
    privileges: number
    teamType: number
    creatorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    privileges?: true
    teamType?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    privileges?: true
    teamType?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    privileges?: true
    teamType?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to aggregate.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamsMaxAggregateInputType
  }

  export type GetTeamsAggregateType<T extends TeamsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeams[P]>
      : GetScalarType<T[P], AggregateTeams[P]>
  }




  export type TeamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithAggregationInput | TeamsOrderByWithAggregationInput[]
    by: TeamsScalarFieldEnum[] | TeamsScalarFieldEnum
    having?: TeamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamsCountAggregateInputType | true
    _min?: TeamsMinAggregateInputType
    _max?: TeamsMaxAggregateInputType
  }

  export type TeamsGroupByOutputType = {
    id: string
    name: string
    description: string | null
    image: string | null
    privileges: string | null
    teamType: string
    creatorId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TeamsCountAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  type GetTeamsGroupByPayload<T extends TeamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamsGroupByOutputType[P]>
        }
      >
    >


  export type TeamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    privileges?: boolean
    teamType?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | Teams$creatorArgs<ExtArgs>
    members?: boolean | Teams$membersArgs<ExtArgs>
    projects?: boolean | Teams$projectsArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type TeamsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    privileges?: boolean
    teamType?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | Teams$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type TeamsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    privileges?: boolean
    teamType?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | Teams$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type TeamsSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    privileges?: boolean
    teamType?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "image" | "privileges" | "teamType" | "creatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["teams"]>
  export type TeamsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Teams$creatorArgs<ExtArgs>
    members?: boolean | Teams$membersArgs<ExtArgs>
    projects?: boolean | Teams$projectsArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Teams$creatorArgs<ExtArgs>
  }
  export type TeamsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Teams$creatorArgs<ExtArgs>
  }

  export type $TeamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teams"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs> | null
      members: Prisma.$UserPayload<ExtArgs>[]
      projects: Prisma.$ProjectsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      image: string | null
      privileges: string | null
      teamType: string
      creatorId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teams"]>
    composites: {}
  }

  type TeamsGetPayload<S extends boolean | null | undefined | TeamsDefaultArgs> = $Result.GetResult<Prisma.$TeamsPayload, S>

  type TeamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamsCountAggregateInputType | true
    }

  export interface TeamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teams'], meta: { name: 'Teams' } }
    /**
     * Find zero or one Teams that matches the filter.
     * @param {TeamsFindUniqueArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamsFindUniqueArgs>(args: SelectSubset<T, TeamsFindUniqueArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamsFindUniqueOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamsFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindFirstArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamsFindFirstArgs>(args?: SelectSubset<T, TeamsFindFirstArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindFirstOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamsFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.teams.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.teams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamsWithIdOnly = await prisma.teams.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamsFindManyArgs>(args?: SelectSubset<T, TeamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teams.
     * @param {TeamsCreateArgs} args - Arguments to create a Teams.
     * @example
     * // Create one Teams
     * const Teams = await prisma.teams.create({
     *   data: {
     *     // ... data to create a Teams
     *   }
     * })
     * 
     */
    create<T extends TeamsCreateArgs>(args: SelectSubset<T, TeamsCreateArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamsCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamsCreateManyArgs>(args?: SelectSubset<T, TeamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamsCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamsWithIdOnly = await prisma.teams.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamsCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teams.
     * @param {TeamsDeleteArgs} args - Arguments to delete one Teams.
     * @example
     * // Delete one Teams
     * const Teams = await prisma.teams.delete({
     *   where: {
     *     // ... filter to delete one Teams
     *   }
     * })
     * 
     */
    delete<T extends TeamsDeleteArgs>(args: SelectSubset<T, TeamsDeleteArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teams.
     * @param {TeamsUpdateArgs} args - Arguments to update one Teams.
     * @example
     * // Update one Teams
     * const teams = await prisma.teams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamsUpdateArgs>(args: SelectSubset<T, TeamsUpdateArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamsDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.teams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamsDeleteManyArgs>(args?: SelectSubset<T, TeamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamsUpdateManyArgs>(args: SelectSubset<T, TeamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamsUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamsWithIdOnly = await prisma.teams.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamsUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teams.
     * @param {TeamsUpsertArgs} args - Arguments to update or create a Teams.
     * @example
     * // Update or create a Teams
     * const teams = await prisma.teams.upsert({
     *   create: {
     *     // ... data to create a Teams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teams we want to update
     *   }
     * })
     */
    upsert<T extends TeamsUpsertArgs>(args: SelectSubset<T, TeamsUpsertArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.teams.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamsCountArgs>(
      args?: Subset<T, TeamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamsAggregateArgs>(args: Subset<T, TeamsAggregateArgs>): Prisma.PrismaPromise<GetTeamsAggregateType<T>>

    /**
     * Group by Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamsGroupByArgs['orderBy'] }
        : { orderBy?: TeamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teams model
   */
  readonly fields: TeamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends Teams$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Teams$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    members<T extends Teams$membersArgs<ExtArgs> = {}>(args?: Subset<T, Teams$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends Teams$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Teams$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teams model
   */
  interface TeamsFieldRefs {
    readonly id: FieldRef<"Teams", 'String'>
    readonly name: FieldRef<"Teams", 'String'>
    readonly description: FieldRef<"Teams", 'String'>
    readonly image: FieldRef<"Teams", 'String'>
    readonly privileges: FieldRef<"Teams", 'String'>
    readonly teamType: FieldRef<"Teams", 'String'>
    readonly creatorId: FieldRef<"Teams", 'String'>
    readonly createdAt: FieldRef<"Teams", 'DateTime'>
    readonly updatedAt: FieldRef<"Teams", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Teams findUnique
   */
  export type TeamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams findUniqueOrThrow
   */
  export type TeamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams findFirst
   */
  export type TeamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams findFirstOrThrow
   */
  export type TeamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams findMany
   */
  export type TeamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams create
   */
  export type TeamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The data needed to create a Teams.
     */
    data: XOR<TeamsCreateInput, TeamsUncheckedCreateInput>
  }

  /**
   * Teams createMany
   */
  export type TeamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamsCreateManyInput | TeamsCreateManyInput[]
  }

  /**
   * Teams createManyAndReturn
   */
  export type TeamsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamsCreateManyInput | TeamsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teams update
   */
  export type TeamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The data needed to update a Teams.
     */
    data: XOR<TeamsUpdateInput, TeamsUncheckedUpdateInput>
    /**
     * Choose, which Teams to update.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams updateMany
   */
  export type TeamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamsWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Teams updateManyAndReturn
   */
  export type TeamsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamsWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teams upsert
   */
  export type TeamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The filter to search for the Teams to update in case it exists.
     */
    where: TeamsWhereUniqueInput
    /**
     * In case the Teams found by the `where` argument doesn't exist, create a new Teams with this data.
     */
    create: XOR<TeamsCreateInput, TeamsUncheckedCreateInput>
    /**
     * In case the Teams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamsUpdateInput, TeamsUncheckedUpdateInput>
  }

  /**
   * Teams delete
   */
  export type TeamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter which Teams to delete.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams deleteMany
   */
  export type TeamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamsWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Teams.creator
   */
  export type Teams$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Teams.members
   */
  export type Teams$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Teams.projects
   */
  export type Teams$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Teams without action
   */
  export type TeamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
  }


  /**
   * Model Projects
   */

  export type AggregateProjects = {
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    ordre: number | null
    priority: number | null
  }

  export type ProjectsSumAggregateOutputType = {
    ordre: number | null
    priority: number | null
  }

  export type ProjectsMinAggregateOutputType = {
    id: string | null
    name: string | null
    ordre: number | null
    description: string | null
    image: string | null
    status: $Enums.Status | null
    priority: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    creatorId: string | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    ordre: number | null
    description: string | null
    image: string | null
    status: $Enums.Status | null
    priority: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    creatorId: string | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    name: number
    ordre: number
    description: number
    image: number
    status: number
    priority: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    creatorId: number
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    ordre?: true
    priority?: true
  }

  export type ProjectsSumAggregateInputType = {
    ordre?: true
    priority?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    name?: true
    ordre?: true
    description?: true
    image?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    creatorId?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    name?: true
    ordre?: true
    description?: true
    image?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    creatorId?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    name?: true
    ordre?: true
    description?: true
    image?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    creatorId?: true
    _all?: true
  }

  export type ProjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to aggregate.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends ProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects[P]>
      : GetScalarType<T[P], AggregateProjects[P]>
  }




  export type ProjectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithAggregationInput | ProjectsOrderByWithAggregationInput[]
    by: ProjectsScalarFieldEnum[] | ProjectsScalarFieldEnum
    having?: ProjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsCountAggregateInputType | true
    _avg?: ProjectsAvgAggregateInputType
    _sum?: ProjectsSumAggregateInputType
    _min?: ProjectsMinAggregateInputType
    _max?: ProjectsMaxAggregateInputType
  }

  export type ProjectsGroupByOutputType = {
    id: string
    name: string
    ordre: number
    description: string | null
    image: string | null
    status: $Enums.Status
    priority: number
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    creatorId: string | null
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  type GetProjectsGroupByPayload<T extends ProjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
        }
      >
    >


  export type ProjectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ordre?: boolean
    description?: boolean
    image?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    creator?: boolean | Projects$creatorArgs<ExtArgs>
    users?: boolean | Projects$usersArgs<ExtArgs>
    teams?: boolean | Projects$teamsArgs<ExtArgs>
    features?: boolean | Projects$featuresArgs<ExtArgs>
    userStories?: boolean | Projects$userStoriesArgs<ExtArgs>
    sprints?: boolean | Projects$sprintsArgs<ExtArgs>
    files?: boolean | Projects$filesArgs<ExtArgs>
    schemaFields?: boolean | Projects$schemaFieldsArgs<ExtArgs>
    roadMaps?: boolean | Projects$roadMapsArgs<ExtArgs>
    tasks?: boolean | Projects$tasksArgs<ExtArgs>
    timeLogs?: boolean | Projects$timeLogsArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projects"]>

  export type ProjectsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ordre?: boolean
    description?: boolean
    image?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    creator?: boolean | Projects$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["projects"]>

  export type ProjectsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ordre?: boolean
    description?: boolean
    image?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
    creator?: boolean | Projects$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["projects"]>

  export type ProjectsSelectScalar = {
    id?: boolean
    name?: boolean
    ordre?: boolean
    description?: boolean
    image?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creatorId?: boolean
  }

  export type ProjectsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "ordre" | "description" | "image" | "status" | "priority" | "startDate" | "endDate" | "createdAt" | "updatedAt" | "creatorId", ExtArgs["result"]["projects"]>
  export type ProjectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Projects$creatorArgs<ExtArgs>
    users?: boolean | Projects$usersArgs<ExtArgs>
    teams?: boolean | Projects$teamsArgs<ExtArgs>
    features?: boolean | Projects$featuresArgs<ExtArgs>
    userStories?: boolean | Projects$userStoriesArgs<ExtArgs>
    sprints?: boolean | Projects$sprintsArgs<ExtArgs>
    files?: boolean | Projects$filesArgs<ExtArgs>
    schemaFields?: boolean | Projects$schemaFieldsArgs<ExtArgs>
    roadMaps?: boolean | Projects$roadMapsArgs<ExtArgs>
    tasks?: boolean | Projects$tasksArgs<ExtArgs>
    timeLogs?: boolean | Projects$timeLogsArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Projects$creatorArgs<ExtArgs>
  }
  export type ProjectsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Projects$creatorArgs<ExtArgs>
  }

  export type $ProjectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Projects"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
      teams: Prisma.$TeamsPayload<ExtArgs>[]
      features: Prisma.$FeaturesPayload<ExtArgs>[]
      userStories: Prisma.$UserStoryPayload<ExtArgs>[]
      sprints: Prisma.$SprintsPayload<ExtArgs>[]
      files: Prisma.$FilesPayload<ExtArgs>[]
      schemaFields: Prisma.$SchemaFieldsPayload<ExtArgs>[]
      roadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
      tasks: Prisma.$TasksPayload<ExtArgs>[]
      timeLogs: Prisma.$TimeLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      ordre: number
      description: string | null
      image: string | null
      status: $Enums.Status
      priority: number
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
      creatorId: string | null
    }, ExtArgs["result"]["projects"]>
    composites: {}
  }

  type ProjectsGetPayload<S extends boolean | null | undefined | ProjectsDefaultArgs> = $Result.GetResult<Prisma.$ProjectsPayload, S>

  type ProjectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectsCountAggregateInputType | true
    }

  export interface ProjectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Projects'], meta: { name: 'Projects' } }
    /**
     * Find zero or one Projects that matches the filter.
     * @param {ProjectsFindUniqueArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectsFindUniqueArgs>(args: SelectSubset<T, ProjectsFindUniqueArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Projects that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectsFindUniqueOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectsFindFirstArgs>(args?: SelectSubset<T, ProjectsFindFirstArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectsFindManyArgs>(args?: SelectSubset<T, ProjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Projects.
     * @param {ProjectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
     */
    create<T extends ProjectsCreateArgs>(args: SelectSubset<T, ProjectsCreateArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectsCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const projects = await prisma.projects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectsCreateManyArgs>(args?: SelectSubset<T, ProjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectsCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const projects = await prisma.projects.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectsWithIdOnly = await prisma.projects.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectsCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Projects.
     * @param {ProjectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
     */
    delete<T extends ProjectsDeleteArgs>(args: SelectSubset<T, ProjectsDeleteArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Projects.
     * @param {ProjectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectsUpdateArgs>(args: SelectSubset<T, ProjectsUpdateArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectsDeleteManyArgs>(args?: SelectSubset<T, ProjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectsUpdateManyArgs>(args: SelectSubset<T, ProjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectsUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectsWithIdOnly = await prisma.projects.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectsUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Projects.
     * @param {ProjectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
     */
    upsert<T extends ProjectsUpsertArgs>(args: SelectSubset<T, ProjectsUpsertArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectsCountArgs>(
      args?: Subset<T, ProjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsAggregateArgs>(args: Subset<T, ProjectsAggregateArgs>): Prisma.PrismaPromise<GetProjectsAggregateType<T>>

    /**
     * Group by Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectsGroupByArgs['orderBy'] }
        : { orderBy?: ProjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Projects model
   */
  readonly fields: ProjectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends Projects$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Projects$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Projects$usersArgs<ExtArgs> = {}>(args?: Subset<T, Projects$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends Projects$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    features<T extends Projects$featuresArgs<ExtArgs> = {}>(args?: Subset<T, Projects$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userStories<T extends Projects$userStoriesArgs<ExtArgs> = {}>(args?: Subset<T, Projects$userStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprints<T extends Projects$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Projects$filesArgs<ExtArgs> = {}>(args?: Subset<T, Projects$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schemaFields<T extends Projects$schemaFieldsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$schemaFieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roadMaps<T extends Projects$roadMapsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$roadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Projects$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Projects$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timeLogs<T extends Projects$timeLogsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$timeLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Projects model
   */
  interface ProjectsFieldRefs {
    readonly id: FieldRef<"Projects", 'String'>
    readonly name: FieldRef<"Projects", 'String'>
    readonly ordre: FieldRef<"Projects", 'Int'>
    readonly description: FieldRef<"Projects", 'String'>
    readonly image: FieldRef<"Projects", 'String'>
    readonly status: FieldRef<"Projects", 'Status'>
    readonly priority: FieldRef<"Projects", 'Int'>
    readonly startDate: FieldRef<"Projects", 'DateTime'>
    readonly endDate: FieldRef<"Projects", 'DateTime'>
    readonly createdAt: FieldRef<"Projects", 'DateTime'>
    readonly updatedAt: FieldRef<"Projects", 'DateTime'>
    readonly creatorId: FieldRef<"Projects", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Projects findUnique
   */
  export type ProjectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findUniqueOrThrow
   */
  export type ProjectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findFirst
   */
  export type ProjectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects findFirstOrThrow
   */
  export type ProjectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects findMany
   */
  export type ProjectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects create
   */
  export type ProjectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * The data needed to create a Projects.
     */
    data: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
  }

  /**
   * Projects createMany
   */
  export type ProjectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectsCreateManyInput | ProjectsCreateManyInput[]
  }

  /**
   * Projects createManyAndReturn
   */
  export type ProjectsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectsCreateManyInput | ProjectsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Projects update
   */
  export type ProjectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * The data needed to update a Projects.
     */
    data: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
    /**
     * Choose, which Projects to update.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects updateMany
   */
  export type ProjectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Projects updateManyAndReturn
   */
  export type ProjectsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Projects upsert
   */
  export type ProjectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * The filter to search for the Projects to update in case it exists.
     */
    where: ProjectsWhereUniqueInput
    /**
     * In case the Projects found by the `where` argument doesn't exist, create a new Projects with this data.
     */
    create: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
    /**
     * In case the Projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
  }

  /**
   * Projects delete
   */
  export type ProjectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter which Projects to delete.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects deleteMany
   */
  export type ProjectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Projects.creator
   */
  export type Projects$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Projects.users
   */
  export type Projects$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Projects.teams
   */
  export type Projects$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teams
     */
    omit?: TeamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    cursor?: TeamsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Projects.features
   */
  export type Projects$featuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Projects.userStories
   */
  export type Projects$userStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * Projects.sprints
   */
  export type Projects$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    cursor?: SprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * Projects.files
   */
  export type Projects$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    cursor?: FilesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Projects.schemaFields
   */
  export type Projects$schemaFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    where?: SchemaFieldsWhereInput
    orderBy?: SchemaFieldsOrderByWithRelationInput | SchemaFieldsOrderByWithRelationInput[]
    cursor?: SchemaFieldsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchemaFieldsScalarFieldEnum | SchemaFieldsScalarFieldEnum[]
  }

  /**
   * Projects.roadMaps
   */
  export type Projects$roadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * Projects.tasks
   */
  export type Projects$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Projects.timeLogs
   */
  export type Projects$timeLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    where?: TimeLogWhereInput
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    cursor?: TimeLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeLogScalarFieldEnum | TimeLogScalarFieldEnum[]
  }

  /**
   * Projects without action
   */
  export type ProjectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
  }


  /**
   * Model RoadMap
   */

  export type AggregateRoadMap = {
    _count: RoadMapCountAggregateOutputType | null
    _avg: RoadMapAvgAggregateOutputType | null
    _sum: RoadMapSumAggregateOutputType | null
    _min: RoadMapMinAggregateOutputType | null
    _max: RoadMapMaxAggregateOutputType | null
  }

  export type RoadMapAvgAggregateOutputType = {
    ordre: number | null
    estimatedDays: number | null
    progress: number | null
  }

  export type RoadMapSumAggregateOutputType = {
    ordre: number | null
    estimatedDays: number | null
    progress: number | null
  }

  export type RoadMapMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    ordre: number | null
    phase: string | null
    estimatedDays: number | null
    progress: number | null
    deliverables: string | null
    technologies: string | null
    dependencies: string | null
    priority: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    creatorId: string | null
  }

  export type RoadMapMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    ordre: number | null
    phase: string | null
    estimatedDays: number | null
    progress: number | null
    deliverables: string | null
    technologies: string | null
    dependencies: string | null
    priority: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    creatorId: string | null
  }

  export type RoadMapCountAggregateOutputType = {
    id: number
    title: number
    description: number
    ordre: number
    phase: number
    estimatedDays: number
    progress: number
    deliverables: number
    technologies: number
    dependencies: number
    priority: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    projectId: number
    creatorId: number
    _all: number
  }


  export type RoadMapAvgAggregateInputType = {
    ordre?: true
    estimatedDays?: true
    progress?: true
  }

  export type RoadMapSumAggregateInputType = {
    ordre?: true
    estimatedDays?: true
    progress?: true
  }

  export type RoadMapMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ordre?: true
    phase?: true
    estimatedDays?: true
    progress?: true
    deliverables?: true
    technologies?: true
    dependencies?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
  }

  export type RoadMapMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ordre?: true
    phase?: true
    estimatedDays?: true
    progress?: true
    deliverables?: true
    technologies?: true
    dependencies?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
  }

  export type RoadMapCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ordre?: true
    phase?: true
    estimatedDays?: true
    progress?: true
    deliverables?: true
    technologies?: true
    dependencies?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    _all?: true
  }

  export type RoadMapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadMap to aggregate.
     */
    where?: RoadMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadMaps to fetch.
     */
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoadMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoadMaps
    **/
    _count?: true | RoadMapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoadMapAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoadMapSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoadMapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoadMapMaxAggregateInputType
  }

  export type GetRoadMapAggregateType<T extends RoadMapAggregateArgs> = {
        [P in keyof T & keyof AggregateRoadMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoadMap[P]>
      : GetScalarType<T[P], AggregateRoadMap[P]>
  }




  export type RoadMapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithAggregationInput | RoadMapOrderByWithAggregationInput[]
    by: RoadMapScalarFieldEnum[] | RoadMapScalarFieldEnum
    having?: RoadMapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoadMapCountAggregateInputType | true
    _avg?: RoadMapAvgAggregateInputType
    _sum?: RoadMapSumAggregateInputType
    _min?: RoadMapMinAggregateInputType
    _max?: RoadMapMaxAggregateInputType
  }

  export type RoadMapGroupByOutputType = {
    id: string
    title: string
    description: string
    ordre: number
    phase: string
    estimatedDays: number
    progress: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    creatorId: string | null
    _count: RoadMapCountAggregateOutputType | null
    _avg: RoadMapAvgAggregateOutputType | null
    _sum: RoadMapSumAggregateOutputType | null
    _min: RoadMapMinAggregateOutputType | null
    _max: RoadMapMaxAggregateOutputType | null
  }

  type GetRoadMapGroupByPayload<T extends RoadMapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoadMapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoadMapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoadMapGroupByOutputType[P]>
            : GetScalarType<T[P], RoadMapGroupByOutputType[P]>
        }
      >
    >


  export type RoadMapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ordre?: boolean
    phase?: boolean
    estimatedDays?: boolean
    progress?: boolean
    deliverables?: boolean
    technologies?: boolean
    dependencies?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | RoadMap$creatorArgs<ExtArgs>
    comments?: boolean | RoadMap$commentsArgs<ExtArgs>
    files?: boolean | RoadMap$filesArgs<ExtArgs>
    features?: boolean | RoadMap$featuresArgs<ExtArgs>
    userStories?: boolean | RoadMap$userStoriesArgs<ExtArgs>
    sprints?: boolean | RoadMap$sprintsArgs<ExtArgs>
    tasks?: boolean | RoadMap$tasksArgs<ExtArgs>
    _count?: boolean | RoadMapCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadMap"]>

  export type RoadMapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ordre?: boolean
    phase?: boolean
    estimatedDays?: boolean
    progress?: boolean
    deliverables?: boolean
    technologies?: boolean
    dependencies?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | RoadMap$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["roadMap"]>

  export type RoadMapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ordre?: boolean
    phase?: boolean
    estimatedDays?: boolean
    progress?: boolean
    deliverables?: boolean
    technologies?: boolean
    dependencies?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | RoadMap$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["roadMap"]>

  export type RoadMapSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    ordre?: boolean
    phase?: boolean
    estimatedDays?: boolean
    progress?: boolean
    deliverables?: boolean
    technologies?: boolean
    dependencies?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
  }

  export type RoadMapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "ordre" | "phase" | "estimatedDays" | "progress" | "deliverables" | "technologies" | "dependencies" | "priority" | "startDate" | "endDate" | "createdAt" | "updatedAt" | "projectId" | "creatorId", ExtArgs["result"]["roadMap"]>
  export type RoadMapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | RoadMap$creatorArgs<ExtArgs>
    comments?: boolean | RoadMap$commentsArgs<ExtArgs>
    files?: boolean | RoadMap$filesArgs<ExtArgs>
    features?: boolean | RoadMap$featuresArgs<ExtArgs>
    userStories?: boolean | RoadMap$userStoriesArgs<ExtArgs>
    sprints?: boolean | RoadMap$sprintsArgs<ExtArgs>
    tasks?: boolean | RoadMap$tasksArgs<ExtArgs>
    _count?: boolean | RoadMapCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoadMapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | RoadMap$creatorArgs<ExtArgs>
  }
  export type RoadMapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | RoadMap$creatorArgs<ExtArgs>
  }

  export type $RoadMapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoadMap"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
      comments: Prisma.$CommentsPayload<ExtArgs>[]
      files: Prisma.$FilesPayload<ExtArgs>[]
      features: Prisma.$FeaturesPayload<ExtArgs>[]
      userStories: Prisma.$UserStoryPayload<ExtArgs>[]
      sprints: Prisma.$SprintsPayload<ExtArgs>[]
      tasks: Prisma.$TasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      ordre: number
      phase: string
      estimatedDays: number
      progress: number
      deliverables: string
      technologies: string
      dependencies: string
      priority: string
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      creatorId: string | null
    }, ExtArgs["result"]["roadMap"]>
    composites: {}
  }

  type RoadMapGetPayload<S extends boolean | null | undefined | RoadMapDefaultArgs> = $Result.GetResult<Prisma.$RoadMapPayload, S>

  type RoadMapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoadMapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoadMapCountAggregateInputType | true
    }

  export interface RoadMapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoadMap'], meta: { name: 'RoadMap' } }
    /**
     * Find zero or one RoadMap that matches the filter.
     * @param {RoadMapFindUniqueArgs} args - Arguments to find a RoadMap
     * @example
     * // Get one RoadMap
     * const roadMap = await prisma.roadMap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoadMapFindUniqueArgs>(args: SelectSubset<T, RoadMapFindUniqueArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoadMap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoadMapFindUniqueOrThrowArgs} args - Arguments to find a RoadMap
     * @example
     * // Get one RoadMap
     * const roadMap = await prisma.roadMap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoadMapFindUniqueOrThrowArgs>(args: SelectSubset<T, RoadMapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoadMap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapFindFirstArgs} args - Arguments to find a RoadMap
     * @example
     * // Get one RoadMap
     * const roadMap = await prisma.roadMap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoadMapFindFirstArgs>(args?: SelectSubset<T, RoadMapFindFirstArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoadMap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapFindFirstOrThrowArgs} args - Arguments to find a RoadMap
     * @example
     * // Get one RoadMap
     * const roadMap = await prisma.roadMap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoadMapFindFirstOrThrowArgs>(args?: SelectSubset<T, RoadMapFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoadMaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoadMaps
     * const roadMaps = await prisma.roadMap.findMany()
     * 
     * // Get first 10 RoadMaps
     * const roadMaps = await prisma.roadMap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roadMapWithIdOnly = await prisma.roadMap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoadMapFindManyArgs>(args?: SelectSubset<T, RoadMapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoadMap.
     * @param {RoadMapCreateArgs} args - Arguments to create a RoadMap.
     * @example
     * // Create one RoadMap
     * const RoadMap = await prisma.roadMap.create({
     *   data: {
     *     // ... data to create a RoadMap
     *   }
     * })
     * 
     */
    create<T extends RoadMapCreateArgs>(args: SelectSubset<T, RoadMapCreateArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoadMaps.
     * @param {RoadMapCreateManyArgs} args - Arguments to create many RoadMaps.
     * @example
     * // Create many RoadMaps
     * const roadMap = await prisma.roadMap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoadMapCreateManyArgs>(args?: SelectSubset<T, RoadMapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoadMaps and returns the data saved in the database.
     * @param {RoadMapCreateManyAndReturnArgs} args - Arguments to create many RoadMaps.
     * @example
     * // Create many RoadMaps
     * const roadMap = await prisma.roadMap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoadMaps and only return the `id`
     * const roadMapWithIdOnly = await prisma.roadMap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoadMapCreateManyAndReturnArgs>(args?: SelectSubset<T, RoadMapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoadMap.
     * @param {RoadMapDeleteArgs} args - Arguments to delete one RoadMap.
     * @example
     * // Delete one RoadMap
     * const RoadMap = await prisma.roadMap.delete({
     *   where: {
     *     // ... filter to delete one RoadMap
     *   }
     * })
     * 
     */
    delete<T extends RoadMapDeleteArgs>(args: SelectSubset<T, RoadMapDeleteArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoadMap.
     * @param {RoadMapUpdateArgs} args - Arguments to update one RoadMap.
     * @example
     * // Update one RoadMap
     * const roadMap = await prisma.roadMap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoadMapUpdateArgs>(args: SelectSubset<T, RoadMapUpdateArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoadMaps.
     * @param {RoadMapDeleteManyArgs} args - Arguments to filter RoadMaps to delete.
     * @example
     * // Delete a few RoadMaps
     * const { count } = await prisma.roadMap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoadMapDeleteManyArgs>(args?: SelectSubset<T, RoadMapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoadMaps
     * const roadMap = await prisma.roadMap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoadMapUpdateManyArgs>(args: SelectSubset<T, RoadMapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadMaps and returns the data updated in the database.
     * @param {RoadMapUpdateManyAndReturnArgs} args - Arguments to update many RoadMaps.
     * @example
     * // Update many RoadMaps
     * const roadMap = await prisma.roadMap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoadMaps and only return the `id`
     * const roadMapWithIdOnly = await prisma.roadMap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoadMapUpdateManyAndReturnArgs>(args: SelectSubset<T, RoadMapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoadMap.
     * @param {RoadMapUpsertArgs} args - Arguments to update or create a RoadMap.
     * @example
     * // Update or create a RoadMap
     * const roadMap = await prisma.roadMap.upsert({
     *   create: {
     *     // ... data to create a RoadMap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoadMap we want to update
     *   }
     * })
     */
    upsert<T extends RoadMapUpsertArgs>(args: SelectSubset<T, RoadMapUpsertArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoadMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapCountArgs} args - Arguments to filter RoadMaps to count.
     * @example
     * // Count the number of RoadMaps
     * const count = await prisma.roadMap.count({
     *   where: {
     *     // ... the filter for the RoadMaps we want to count
     *   }
     * })
    **/
    count<T extends RoadMapCountArgs>(
      args?: Subset<T, RoadMapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoadMapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoadMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoadMapAggregateArgs>(args: Subset<T, RoadMapAggregateArgs>): Prisma.PrismaPromise<GetRoadMapAggregateType<T>>

    /**
     * Group by RoadMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadMapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoadMapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoadMapGroupByArgs['orderBy'] }
        : { orderBy?: RoadMapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoadMapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoadMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoadMap model
   */
  readonly fields: RoadMapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoadMap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoadMapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends RoadMap$creatorArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    comments<T extends RoadMap$commentsArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends RoadMap$filesArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    features<T extends RoadMap$featuresArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userStories<T extends RoadMap$userStoriesArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$userStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprints<T extends RoadMap$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends RoadMap$tasksArgs<ExtArgs> = {}>(args?: Subset<T, RoadMap$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoadMap model
   */
  interface RoadMapFieldRefs {
    readonly id: FieldRef<"RoadMap", 'String'>
    readonly title: FieldRef<"RoadMap", 'String'>
    readonly description: FieldRef<"RoadMap", 'String'>
    readonly ordre: FieldRef<"RoadMap", 'Int'>
    readonly phase: FieldRef<"RoadMap", 'String'>
    readonly estimatedDays: FieldRef<"RoadMap", 'Int'>
    readonly progress: FieldRef<"RoadMap", 'Int'>
    readonly deliverables: FieldRef<"RoadMap", 'String'>
    readonly technologies: FieldRef<"RoadMap", 'String'>
    readonly dependencies: FieldRef<"RoadMap", 'String'>
    readonly priority: FieldRef<"RoadMap", 'String'>
    readonly startDate: FieldRef<"RoadMap", 'DateTime'>
    readonly endDate: FieldRef<"RoadMap", 'DateTime'>
    readonly createdAt: FieldRef<"RoadMap", 'DateTime'>
    readonly updatedAt: FieldRef<"RoadMap", 'DateTime'>
    readonly projectId: FieldRef<"RoadMap", 'String'>
    readonly creatorId: FieldRef<"RoadMap", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RoadMap findUnique
   */
  export type RoadMapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * Filter, which RoadMap to fetch.
     */
    where: RoadMapWhereUniqueInput
  }

  /**
   * RoadMap findUniqueOrThrow
   */
  export type RoadMapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * Filter, which RoadMap to fetch.
     */
    where: RoadMapWhereUniqueInput
  }

  /**
   * RoadMap findFirst
   */
  export type RoadMapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * Filter, which RoadMap to fetch.
     */
    where?: RoadMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadMaps to fetch.
     */
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadMaps.
     */
    cursor?: RoadMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadMaps.
     */
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * RoadMap findFirstOrThrow
   */
  export type RoadMapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * Filter, which RoadMap to fetch.
     */
    where?: RoadMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadMaps to fetch.
     */
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadMaps.
     */
    cursor?: RoadMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadMaps.
     */
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * RoadMap findMany
   */
  export type RoadMapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * Filter, which RoadMaps to fetch.
     */
    where?: RoadMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadMaps to fetch.
     */
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoadMaps.
     */
    cursor?: RoadMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadMaps.
     */
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * RoadMap create
   */
  export type RoadMapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * The data needed to create a RoadMap.
     */
    data: XOR<RoadMapCreateInput, RoadMapUncheckedCreateInput>
  }

  /**
   * RoadMap createMany
   */
  export type RoadMapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoadMaps.
     */
    data: RoadMapCreateManyInput | RoadMapCreateManyInput[]
  }

  /**
   * RoadMap createManyAndReturn
   */
  export type RoadMapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * The data used to create many RoadMaps.
     */
    data: RoadMapCreateManyInput | RoadMapCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoadMap update
   */
  export type RoadMapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * The data needed to update a RoadMap.
     */
    data: XOR<RoadMapUpdateInput, RoadMapUncheckedUpdateInput>
    /**
     * Choose, which RoadMap to update.
     */
    where: RoadMapWhereUniqueInput
  }

  /**
   * RoadMap updateMany
   */
  export type RoadMapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoadMaps.
     */
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyInput>
    /**
     * Filter which RoadMaps to update
     */
    where?: RoadMapWhereInput
    /**
     * Limit how many RoadMaps to update.
     */
    limit?: number
  }

  /**
   * RoadMap updateManyAndReturn
   */
  export type RoadMapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * The data used to update RoadMaps.
     */
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyInput>
    /**
     * Filter which RoadMaps to update
     */
    where?: RoadMapWhereInput
    /**
     * Limit how many RoadMaps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoadMap upsert
   */
  export type RoadMapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * The filter to search for the RoadMap to update in case it exists.
     */
    where: RoadMapWhereUniqueInput
    /**
     * In case the RoadMap found by the `where` argument doesn't exist, create a new RoadMap with this data.
     */
    create: XOR<RoadMapCreateInput, RoadMapUncheckedCreateInput>
    /**
     * In case the RoadMap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoadMapUpdateInput, RoadMapUncheckedUpdateInput>
  }

  /**
   * RoadMap delete
   */
  export type RoadMapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    /**
     * Filter which RoadMap to delete.
     */
    where: RoadMapWhereUniqueInput
  }

  /**
   * RoadMap deleteMany
   */
  export type RoadMapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadMaps to delete
     */
    where?: RoadMapWhereInput
    /**
     * Limit how many RoadMaps to delete.
     */
    limit?: number
  }

  /**
   * RoadMap.creator
   */
  export type RoadMap$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RoadMap.comments
   */
  export type RoadMap$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * RoadMap.files
   */
  export type RoadMap$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    cursor?: FilesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * RoadMap.features
   */
  export type RoadMap$featuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * RoadMap.userStories
   */
  export type RoadMap$userStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * RoadMap.sprints
   */
  export type RoadMap$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    cursor?: SprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * RoadMap.tasks
   */
  export type RoadMap$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * RoadMap without action
   */
  export type RoadMapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
  }


  /**
   * Model Features
   */

  export type AggregateFeatures = {
    _count: FeaturesCountAggregateOutputType | null
    _avg: FeaturesAvgAggregateOutputType | null
    _sum: FeaturesSumAggregateOutputType | null
    _min: FeaturesMinAggregateOutputType | null
    _max: FeaturesMaxAggregateOutputType | null
  }

  export type FeaturesAvgAggregateOutputType = {
    order: number | null
    priority: number | null
  }

  export type FeaturesSumAggregateOutputType = {
    order: number | null
    priority: number | null
  }

  export type FeaturesMinAggregateOutputType = {
    id: string | null
    name: string | null
    order: number | null
    description: string | null
    status: $Enums.Status | null
    priority: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    creatorId: string | null
    parentFeatureId: string | null
  }

  export type FeaturesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    order: number | null
    description: string | null
    status: $Enums.Status | null
    priority: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    creatorId: string | null
    parentFeatureId: string | null
  }

  export type FeaturesCountAggregateOutputType = {
    id: number
    name: number
    order: number
    description: number
    status: number
    priority: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    projectId: number
    creatorId: number
    parentFeatureId: number
    _all: number
  }


  export type FeaturesAvgAggregateInputType = {
    order?: true
    priority?: true
  }

  export type FeaturesSumAggregateInputType = {
    order?: true
    priority?: true
  }

  export type FeaturesMinAggregateInputType = {
    id?: true
    name?: true
    order?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    parentFeatureId?: true
  }

  export type FeaturesMaxAggregateInputType = {
    id?: true
    name?: true
    order?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    parentFeatureId?: true
  }

  export type FeaturesCountAggregateInputType = {
    id?: true
    name?: true
    order?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    parentFeatureId?: true
    _all?: true
  }

  export type FeaturesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Features to aggregate.
     */
    where?: FeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Features
    **/
    _count?: true | FeaturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeaturesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeaturesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeaturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeaturesMaxAggregateInputType
  }

  export type GetFeaturesAggregateType<T extends FeaturesAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatures[P]>
      : GetScalarType<T[P], AggregateFeatures[P]>
  }




  export type FeaturesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithAggregationInput | FeaturesOrderByWithAggregationInput[]
    by: FeaturesScalarFieldEnum[] | FeaturesScalarFieldEnum
    having?: FeaturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeaturesCountAggregateInputType | true
    _avg?: FeaturesAvgAggregateInputType
    _sum?: FeaturesSumAggregateInputType
    _min?: FeaturesMinAggregateInputType
    _max?: FeaturesMaxAggregateInputType
  }

  export type FeaturesGroupByOutputType = {
    id: string
    name: string
    order: number
    description: string | null
    status: $Enums.Status
    priority: number
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    creatorId: string | null
    parentFeatureId: string | null
    _count: FeaturesCountAggregateOutputType | null
    _avg: FeaturesAvgAggregateOutputType | null
    _sum: FeaturesSumAggregateOutputType | null
    _min: FeaturesMinAggregateOutputType | null
    _max: FeaturesMaxAggregateOutputType | null
  }

  type GetFeaturesGroupByPayload<T extends FeaturesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeaturesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeaturesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeaturesGroupByOutputType[P]>
            : GetScalarType<T[P], FeaturesGroupByOutputType[P]>
        }
      >
    >


  export type FeaturesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    order?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentFeatureId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Features$creatorArgs<ExtArgs>
    parentFeature?: boolean | Features$parentFeatureArgs<ExtArgs>
    childFeatures?: boolean | Features$childFeaturesArgs<ExtArgs>
    comments?: boolean | Features$commentsArgs<ExtArgs>
    roadMaps?: boolean | Features$roadMapsArgs<ExtArgs>
    userStories?: boolean | Features$userStoriesArgs<ExtArgs>
    sprints?: boolean | Features$sprintsArgs<ExtArgs>
    tasks?: boolean | Features$tasksArgs<ExtArgs>
    _count?: boolean | FeaturesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["features"]>

  export type FeaturesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    order?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentFeatureId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Features$creatorArgs<ExtArgs>
    parentFeature?: boolean | Features$parentFeatureArgs<ExtArgs>
  }, ExtArgs["result"]["features"]>

  export type FeaturesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    order?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentFeatureId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Features$creatorArgs<ExtArgs>
    parentFeature?: boolean | Features$parentFeatureArgs<ExtArgs>
  }, ExtArgs["result"]["features"]>

  export type FeaturesSelectScalar = {
    id?: boolean
    name?: boolean
    order?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentFeatureId?: boolean
  }

  export type FeaturesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "order" | "description" | "status" | "priority" | "startDate" | "endDate" | "createdAt" | "updatedAt" | "projectId" | "creatorId" | "parentFeatureId", ExtArgs["result"]["features"]>
  export type FeaturesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Features$creatorArgs<ExtArgs>
    parentFeature?: boolean | Features$parentFeatureArgs<ExtArgs>
    childFeatures?: boolean | Features$childFeaturesArgs<ExtArgs>
    comments?: boolean | Features$commentsArgs<ExtArgs>
    roadMaps?: boolean | Features$roadMapsArgs<ExtArgs>
    userStories?: boolean | Features$userStoriesArgs<ExtArgs>
    sprints?: boolean | Features$sprintsArgs<ExtArgs>
    tasks?: boolean | Features$tasksArgs<ExtArgs>
    _count?: boolean | FeaturesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FeaturesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Features$creatorArgs<ExtArgs>
    parentFeature?: boolean | Features$parentFeatureArgs<ExtArgs>
  }
  export type FeaturesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Features$creatorArgs<ExtArgs>
    parentFeature?: boolean | Features$parentFeatureArgs<ExtArgs>
  }

  export type $FeaturesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Features"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
      parentFeature: Prisma.$FeaturesPayload<ExtArgs> | null
      childFeatures: Prisma.$FeaturesPayload<ExtArgs>[]
      comments: Prisma.$CommentsPayload<ExtArgs>[]
      roadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
      userStories: Prisma.$UserStoryPayload<ExtArgs>[]
      sprints: Prisma.$SprintsPayload<ExtArgs>[]
      tasks: Prisma.$TasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      order: number
      description: string | null
      status: $Enums.Status
      priority: number
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      creatorId: string | null
      parentFeatureId: string | null
    }, ExtArgs["result"]["features"]>
    composites: {}
  }

  type FeaturesGetPayload<S extends boolean | null | undefined | FeaturesDefaultArgs> = $Result.GetResult<Prisma.$FeaturesPayload, S>

  type FeaturesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeaturesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeaturesCountAggregateInputType | true
    }

  export interface FeaturesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Features'], meta: { name: 'Features' } }
    /**
     * Find zero or one Features that matches the filter.
     * @param {FeaturesFindUniqueArgs} args - Arguments to find a Features
     * @example
     * // Get one Features
     * const features = await prisma.features.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeaturesFindUniqueArgs>(args: SelectSubset<T, FeaturesFindUniqueArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Features that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeaturesFindUniqueOrThrowArgs} args - Arguments to find a Features
     * @example
     * // Get one Features
     * const features = await prisma.features.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeaturesFindUniqueOrThrowArgs>(args: SelectSubset<T, FeaturesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Features that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesFindFirstArgs} args - Arguments to find a Features
     * @example
     * // Get one Features
     * const features = await prisma.features.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeaturesFindFirstArgs>(args?: SelectSubset<T, FeaturesFindFirstArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Features that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesFindFirstOrThrowArgs} args - Arguments to find a Features
     * @example
     * // Get one Features
     * const features = await prisma.features.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeaturesFindFirstOrThrowArgs>(args?: SelectSubset<T, FeaturesFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Features that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Features
     * const features = await prisma.features.findMany()
     * 
     * // Get first 10 Features
     * const features = await prisma.features.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featuresWithIdOnly = await prisma.features.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeaturesFindManyArgs>(args?: SelectSubset<T, FeaturesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Features.
     * @param {FeaturesCreateArgs} args - Arguments to create a Features.
     * @example
     * // Create one Features
     * const Features = await prisma.features.create({
     *   data: {
     *     // ... data to create a Features
     *   }
     * })
     * 
     */
    create<T extends FeaturesCreateArgs>(args: SelectSubset<T, FeaturesCreateArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Features.
     * @param {FeaturesCreateManyArgs} args - Arguments to create many Features.
     * @example
     * // Create many Features
     * const features = await prisma.features.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeaturesCreateManyArgs>(args?: SelectSubset<T, FeaturesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Features and returns the data saved in the database.
     * @param {FeaturesCreateManyAndReturnArgs} args - Arguments to create many Features.
     * @example
     * // Create many Features
     * const features = await prisma.features.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Features and only return the `id`
     * const featuresWithIdOnly = await prisma.features.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeaturesCreateManyAndReturnArgs>(args?: SelectSubset<T, FeaturesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Features.
     * @param {FeaturesDeleteArgs} args - Arguments to delete one Features.
     * @example
     * // Delete one Features
     * const Features = await prisma.features.delete({
     *   where: {
     *     // ... filter to delete one Features
     *   }
     * })
     * 
     */
    delete<T extends FeaturesDeleteArgs>(args: SelectSubset<T, FeaturesDeleteArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Features.
     * @param {FeaturesUpdateArgs} args - Arguments to update one Features.
     * @example
     * // Update one Features
     * const features = await prisma.features.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeaturesUpdateArgs>(args: SelectSubset<T, FeaturesUpdateArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Features.
     * @param {FeaturesDeleteManyArgs} args - Arguments to filter Features to delete.
     * @example
     * // Delete a few Features
     * const { count } = await prisma.features.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeaturesDeleteManyArgs>(args?: SelectSubset<T, FeaturesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Features
     * const features = await prisma.features.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeaturesUpdateManyArgs>(args: SelectSubset<T, FeaturesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features and returns the data updated in the database.
     * @param {FeaturesUpdateManyAndReturnArgs} args - Arguments to update many Features.
     * @example
     * // Update many Features
     * const features = await prisma.features.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Features and only return the `id`
     * const featuresWithIdOnly = await prisma.features.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeaturesUpdateManyAndReturnArgs>(args: SelectSubset<T, FeaturesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Features.
     * @param {FeaturesUpsertArgs} args - Arguments to update or create a Features.
     * @example
     * // Update or create a Features
     * const features = await prisma.features.upsert({
     *   create: {
     *     // ... data to create a Features
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Features we want to update
     *   }
     * })
     */
    upsert<T extends FeaturesUpsertArgs>(args: SelectSubset<T, FeaturesUpsertArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesCountArgs} args - Arguments to filter Features to count.
     * @example
     * // Count the number of Features
     * const count = await prisma.features.count({
     *   where: {
     *     // ... the filter for the Features we want to count
     *   }
     * })
    **/
    count<T extends FeaturesCountArgs>(
      args?: Subset<T, FeaturesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeaturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeaturesAggregateArgs>(args: Subset<T, FeaturesAggregateArgs>): Prisma.PrismaPromise<GetFeaturesAggregateType<T>>

    /**
     * Group by Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeaturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeaturesGroupByArgs['orderBy'] }
        : { orderBy?: FeaturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeaturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeaturesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Features model
   */
  readonly fields: FeaturesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Features.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeaturesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends Features$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Features$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parentFeature<T extends Features$parentFeatureArgs<ExtArgs> = {}>(args?: Subset<T, Features$parentFeatureArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childFeatures<T extends Features$childFeaturesArgs<ExtArgs> = {}>(args?: Subset<T, Features$childFeaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Features$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Features$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roadMaps<T extends Features$roadMapsArgs<ExtArgs> = {}>(args?: Subset<T, Features$roadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userStories<T extends Features$userStoriesArgs<ExtArgs> = {}>(args?: Subset<T, Features$userStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprints<T extends Features$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, Features$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Features$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Features$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Features model
   */
  interface FeaturesFieldRefs {
    readonly id: FieldRef<"Features", 'String'>
    readonly name: FieldRef<"Features", 'String'>
    readonly order: FieldRef<"Features", 'Int'>
    readonly description: FieldRef<"Features", 'String'>
    readonly status: FieldRef<"Features", 'Status'>
    readonly priority: FieldRef<"Features", 'Int'>
    readonly startDate: FieldRef<"Features", 'DateTime'>
    readonly endDate: FieldRef<"Features", 'DateTime'>
    readonly createdAt: FieldRef<"Features", 'DateTime'>
    readonly updatedAt: FieldRef<"Features", 'DateTime'>
    readonly projectId: FieldRef<"Features", 'String'>
    readonly creatorId: FieldRef<"Features", 'String'>
    readonly parentFeatureId: FieldRef<"Features", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Features findUnique
   */
  export type FeaturesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where: FeaturesWhereUniqueInput
  }

  /**
   * Features findUniqueOrThrow
   */
  export type FeaturesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where: FeaturesWhereUniqueInput
  }

  /**
   * Features findFirst
   */
  export type FeaturesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where?: FeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Features.
     */
    cursor?: FeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Features.
     */
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Features findFirstOrThrow
   */
  export type FeaturesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where?: FeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Features.
     */
    cursor?: FeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Features.
     */
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Features findMany
   */
  export type FeaturesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where?: FeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Features.
     */
    cursor?: FeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Features create
   */
  export type FeaturesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * The data needed to create a Features.
     */
    data: XOR<FeaturesCreateInput, FeaturesUncheckedCreateInput>
  }

  /**
   * Features createMany
   */
  export type FeaturesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Features.
     */
    data: FeaturesCreateManyInput | FeaturesCreateManyInput[]
  }

  /**
   * Features createManyAndReturn
   */
  export type FeaturesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * The data used to create many Features.
     */
    data: FeaturesCreateManyInput | FeaturesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Features update
   */
  export type FeaturesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * The data needed to update a Features.
     */
    data: XOR<FeaturesUpdateInput, FeaturesUncheckedUpdateInput>
    /**
     * Choose, which Features to update.
     */
    where: FeaturesWhereUniqueInput
  }

  /**
   * Features updateMany
   */
  export type FeaturesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Features.
     */
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyInput>
    /**
     * Filter which Features to update
     */
    where?: FeaturesWhereInput
    /**
     * Limit how many Features to update.
     */
    limit?: number
  }

  /**
   * Features updateManyAndReturn
   */
  export type FeaturesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * The data used to update Features.
     */
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyInput>
    /**
     * Filter which Features to update
     */
    where?: FeaturesWhereInput
    /**
     * Limit how many Features to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Features upsert
   */
  export type FeaturesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * The filter to search for the Features to update in case it exists.
     */
    where: FeaturesWhereUniqueInput
    /**
     * In case the Features found by the `where` argument doesn't exist, create a new Features with this data.
     */
    create: XOR<FeaturesCreateInput, FeaturesUncheckedCreateInput>
    /**
     * In case the Features was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeaturesUpdateInput, FeaturesUncheckedUpdateInput>
  }

  /**
   * Features delete
   */
  export type FeaturesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    /**
     * Filter which Features to delete.
     */
    where: FeaturesWhereUniqueInput
  }

  /**
   * Features deleteMany
   */
  export type FeaturesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Features to delete
     */
    where?: FeaturesWhereInput
    /**
     * Limit how many Features to delete.
     */
    limit?: number
  }

  /**
   * Features.creator
   */
  export type Features$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Features.parentFeature
   */
  export type Features$parentFeatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
  }

  /**
   * Features.childFeatures
   */
  export type Features$childFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Features.comments
   */
  export type Features$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Features.roadMaps
   */
  export type Features$roadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * Features.userStories
   */
  export type Features$userStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * Features.sprints
   */
  export type Features$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    cursor?: SprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * Features.tasks
   */
  export type Features$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Features without action
   */
  export type FeaturesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
  }


  /**
   * Model UserStory
   */

  export type AggregateUserStory = {
    _count: UserStoryCountAggregateOutputType | null
    _avg: UserStoryAvgAggregateOutputType | null
    _sum: UserStorySumAggregateOutputType | null
    _min: UserStoryMinAggregateOutputType | null
    _max: UserStoryMaxAggregateOutputType | null
  }

  export type UserStoryAvgAggregateOutputType = {
    priority: number | null
  }

  export type UserStorySumAggregateOutputType = {
    priority: number | null
  }

  export type UserStoryMinAggregateOutputType = {
    id: string | null
    title: string | null
    goal: string | null
    name: string | null
    description: string | null
    status: $Enums.Status | null
    priority: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    creatorId: string | null
    parentUserStoryId: string | null
  }

  export type UserStoryMaxAggregateOutputType = {
    id: string | null
    title: string | null
    goal: string | null
    name: string | null
    description: string | null
    status: $Enums.Status | null
    priority: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    creatorId: string | null
    parentUserStoryId: string | null
  }

  export type UserStoryCountAggregateOutputType = {
    id: number
    title: number
    goal: number
    name: number
    description: number
    status: number
    priority: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    projectId: number
    creatorId: number
    parentUserStoryId: number
    _all: number
  }


  export type UserStoryAvgAggregateInputType = {
    priority?: true
  }

  export type UserStorySumAggregateInputType = {
    priority?: true
  }

  export type UserStoryMinAggregateInputType = {
    id?: true
    title?: true
    goal?: true
    name?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    parentUserStoryId?: true
  }

  export type UserStoryMaxAggregateInputType = {
    id?: true
    title?: true
    goal?: true
    name?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    parentUserStoryId?: true
  }

  export type UserStoryCountAggregateInputType = {
    id?: true
    title?: true
    goal?: true
    name?: true
    description?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    creatorId?: true
    parentUserStoryId?: true
    _all?: true
  }

  export type UserStoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStory to aggregate.
     */
    where?: UserStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStories to fetch.
     */
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStories
    **/
    _count?: true | UserStoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStoryMaxAggregateInputType
  }

  export type GetUserStoryAggregateType<T extends UserStoryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStory[P]>
      : GetScalarType<T[P], AggregateUserStory[P]>
  }




  export type UserStoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithAggregationInput | UserStoryOrderByWithAggregationInput[]
    by: UserStoryScalarFieldEnum[] | UserStoryScalarFieldEnum
    having?: UserStoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStoryCountAggregateInputType | true
    _avg?: UserStoryAvgAggregateInputType
    _sum?: UserStorySumAggregateInputType
    _min?: UserStoryMinAggregateInputType
    _max?: UserStoryMaxAggregateInputType
  }

  export type UserStoryGroupByOutputType = {
    id: string
    title: string
    goal: string | null
    name: string
    description: string | null
    status: $Enums.Status
    priority: number
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    creatorId: string | null
    parentUserStoryId: string | null
    _count: UserStoryCountAggregateOutputType | null
    _avg: UserStoryAvgAggregateOutputType | null
    _sum: UserStorySumAggregateOutputType | null
    _min: UserStoryMinAggregateOutputType | null
    _max: UserStoryMaxAggregateOutputType | null
  }

  type GetUserStoryGroupByPayload<T extends UserStoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStoryGroupByOutputType[P]>
            : GetScalarType<T[P], UserStoryGroupByOutputType[P]>
        }
      >
    >


  export type UserStorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    goal?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentUserStoryId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | UserStory$creatorArgs<ExtArgs>
    parentUserStory?: boolean | UserStory$parentUserStoryArgs<ExtArgs>
    childUserStories?: boolean | UserStory$childUserStoriesArgs<ExtArgs>
    comments?: boolean | UserStory$commentsArgs<ExtArgs>
    roadMaps?: boolean | UserStory$roadMapsArgs<ExtArgs>
    features?: boolean | UserStory$featuresArgs<ExtArgs>
    sprints?: boolean | UserStory$sprintsArgs<ExtArgs>
    tasks?: boolean | UserStory$tasksArgs<ExtArgs>
    _count?: boolean | UserStoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStory"]>

  export type UserStorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    goal?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentUserStoryId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | UserStory$creatorArgs<ExtArgs>
    parentUserStory?: boolean | UserStory$parentUserStoryArgs<ExtArgs>
  }, ExtArgs["result"]["userStory"]>

  export type UserStorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    goal?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentUserStoryId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | UserStory$creatorArgs<ExtArgs>
    parentUserStory?: boolean | UserStory$parentUserStoryArgs<ExtArgs>
  }, ExtArgs["result"]["userStory"]>

  export type UserStorySelectScalar = {
    id?: boolean
    title?: boolean
    goal?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    creatorId?: boolean
    parentUserStoryId?: boolean
  }

  export type UserStoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "goal" | "name" | "description" | "status" | "priority" | "startDate" | "endDate" | "createdAt" | "updatedAt" | "projectId" | "creatorId" | "parentUserStoryId", ExtArgs["result"]["userStory"]>
  export type UserStoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | UserStory$creatorArgs<ExtArgs>
    parentUserStory?: boolean | UserStory$parentUserStoryArgs<ExtArgs>
    childUserStories?: boolean | UserStory$childUserStoriesArgs<ExtArgs>
    comments?: boolean | UserStory$commentsArgs<ExtArgs>
    roadMaps?: boolean | UserStory$roadMapsArgs<ExtArgs>
    features?: boolean | UserStory$featuresArgs<ExtArgs>
    sprints?: boolean | UserStory$sprintsArgs<ExtArgs>
    tasks?: boolean | UserStory$tasksArgs<ExtArgs>
    _count?: boolean | UserStoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserStoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | UserStory$creatorArgs<ExtArgs>
    parentUserStory?: boolean | UserStory$parentUserStoryArgs<ExtArgs>
  }
  export type UserStoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | UserStory$creatorArgs<ExtArgs>
    parentUserStory?: boolean | UserStory$parentUserStoryArgs<ExtArgs>
  }

  export type $UserStoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStory"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
      parentUserStory: Prisma.$UserStoryPayload<ExtArgs> | null
      childUserStories: Prisma.$UserStoryPayload<ExtArgs>[]
      comments: Prisma.$CommentsPayload<ExtArgs>[]
      roadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
      features: Prisma.$FeaturesPayload<ExtArgs>[]
      sprints: Prisma.$SprintsPayload<ExtArgs>[]
      tasks: Prisma.$TasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      goal: string | null
      name: string
      description: string | null
      status: $Enums.Status
      priority: number
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      creatorId: string | null
      parentUserStoryId: string | null
    }, ExtArgs["result"]["userStory"]>
    composites: {}
  }

  type UserStoryGetPayload<S extends boolean | null | undefined | UserStoryDefaultArgs> = $Result.GetResult<Prisma.$UserStoryPayload, S>

  type UserStoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserStoryCountAggregateInputType | true
    }

  export interface UserStoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStory'], meta: { name: 'UserStory' } }
    /**
     * Find zero or one UserStory that matches the filter.
     * @param {UserStoryFindUniqueArgs} args - Arguments to find a UserStory
     * @example
     * // Get one UserStory
     * const userStory = await prisma.userStory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStoryFindUniqueArgs>(args: SelectSubset<T, UserStoryFindUniqueArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserStory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStoryFindUniqueOrThrowArgs} args - Arguments to find a UserStory
     * @example
     * // Get one UserStory
     * const userStory = await prisma.userStory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStoryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryFindFirstArgs} args - Arguments to find a UserStory
     * @example
     * // Get one UserStory
     * const userStory = await prisma.userStory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStoryFindFirstArgs>(args?: SelectSubset<T, UserStoryFindFirstArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryFindFirstOrThrowArgs} args - Arguments to find a UserStory
     * @example
     * // Get one UserStory
     * const userStory = await prisma.userStory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStoryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserStories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStories
     * const userStories = await prisma.userStory.findMany()
     * 
     * // Get first 10 UserStories
     * const userStories = await prisma.userStory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStoryWithIdOnly = await prisma.userStory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStoryFindManyArgs>(args?: SelectSubset<T, UserStoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserStory.
     * @param {UserStoryCreateArgs} args - Arguments to create a UserStory.
     * @example
     * // Create one UserStory
     * const UserStory = await prisma.userStory.create({
     *   data: {
     *     // ... data to create a UserStory
     *   }
     * })
     * 
     */
    create<T extends UserStoryCreateArgs>(args: SelectSubset<T, UserStoryCreateArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserStories.
     * @param {UserStoryCreateManyArgs} args - Arguments to create many UserStories.
     * @example
     * // Create many UserStories
     * const userStory = await prisma.userStory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStoryCreateManyArgs>(args?: SelectSubset<T, UserStoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStories and returns the data saved in the database.
     * @param {UserStoryCreateManyAndReturnArgs} args - Arguments to create many UserStories.
     * @example
     * // Create many UserStories
     * const userStory = await prisma.userStory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStories and only return the `id`
     * const userStoryWithIdOnly = await prisma.userStory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStoryCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserStory.
     * @param {UserStoryDeleteArgs} args - Arguments to delete one UserStory.
     * @example
     * // Delete one UserStory
     * const UserStory = await prisma.userStory.delete({
     *   where: {
     *     // ... filter to delete one UserStory
     *   }
     * })
     * 
     */
    delete<T extends UserStoryDeleteArgs>(args: SelectSubset<T, UserStoryDeleteArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserStory.
     * @param {UserStoryUpdateArgs} args - Arguments to update one UserStory.
     * @example
     * // Update one UserStory
     * const userStory = await prisma.userStory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStoryUpdateArgs>(args: SelectSubset<T, UserStoryUpdateArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserStories.
     * @param {UserStoryDeleteManyArgs} args - Arguments to filter UserStories to delete.
     * @example
     * // Delete a few UserStories
     * const { count } = await prisma.userStory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStoryDeleteManyArgs>(args?: SelectSubset<T, UserStoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStories
     * const userStory = await prisma.userStory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStoryUpdateManyArgs>(args: SelectSubset<T, UserStoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStories and returns the data updated in the database.
     * @param {UserStoryUpdateManyAndReturnArgs} args - Arguments to update many UserStories.
     * @example
     * // Update many UserStories
     * const userStory = await prisma.userStory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStories and only return the `id`
     * const userStoryWithIdOnly = await prisma.userStory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStoryUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserStory.
     * @param {UserStoryUpsertArgs} args - Arguments to update or create a UserStory.
     * @example
     * // Update or create a UserStory
     * const userStory = await prisma.userStory.upsert({
     *   create: {
     *     // ... data to create a UserStory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStory we want to update
     *   }
     * })
     */
    upsert<T extends UserStoryUpsertArgs>(args: SelectSubset<T, UserStoryUpsertArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryCountArgs} args - Arguments to filter UserStories to count.
     * @example
     * // Count the number of UserStories
     * const count = await prisma.userStory.count({
     *   where: {
     *     // ... the filter for the UserStories we want to count
     *   }
     * })
    **/
    count<T extends UserStoryCountArgs>(
      args?: Subset<T, UserStoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStoryAggregateArgs>(args: Subset<T, UserStoryAggregateArgs>): Prisma.PrismaPromise<GetUserStoryAggregateType<T>>

    /**
     * Group by UserStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStoryGroupByArgs['orderBy'] }
        : { orderBy?: UserStoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStory model
   */
  readonly fields: UserStoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserStory$creatorArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parentUserStory<T extends UserStory$parentUserStoryArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$parentUserStoryArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childUserStories<T extends UserStory$childUserStoriesArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$childUserStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends UserStory$commentsArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roadMaps<T extends UserStory$roadMapsArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$roadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    features<T extends UserStory$featuresArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprints<T extends UserStory$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends UserStory$tasksArgs<ExtArgs> = {}>(args?: Subset<T, UserStory$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStory model
   */
  interface UserStoryFieldRefs {
    readonly id: FieldRef<"UserStory", 'String'>
    readonly title: FieldRef<"UserStory", 'String'>
    readonly goal: FieldRef<"UserStory", 'String'>
    readonly name: FieldRef<"UserStory", 'String'>
    readonly description: FieldRef<"UserStory", 'String'>
    readonly status: FieldRef<"UserStory", 'Status'>
    readonly priority: FieldRef<"UserStory", 'Int'>
    readonly startDate: FieldRef<"UserStory", 'DateTime'>
    readonly endDate: FieldRef<"UserStory", 'DateTime'>
    readonly createdAt: FieldRef<"UserStory", 'DateTime'>
    readonly updatedAt: FieldRef<"UserStory", 'DateTime'>
    readonly projectId: FieldRef<"UserStory", 'String'>
    readonly creatorId: FieldRef<"UserStory", 'String'>
    readonly parentUserStoryId: FieldRef<"UserStory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserStory findUnique
   */
  export type UserStoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * Filter, which UserStory to fetch.
     */
    where: UserStoryWhereUniqueInput
  }

  /**
   * UserStory findUniqueOrThrow
   */
  export type UserStoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * Filter, which UserStory to fetch.
     */
    where: UserStoryWhereUniqueInput
  }

  /**
   * UserStory findFirst
   */
  export type UserStoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * Filter, which UserStory to fetch.
     */
    where?: UserStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStories to fetch.
     */
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStories.
     */
    cursor?: UserStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStories.
     */
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * UserStory findFirstOrThrow
   */
  export type UserStoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * Filter, which UserStory to fetch.
     */
    where?: UserStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStories to fetch.
     */
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStories.
     */
    cursor?: UserStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStories.
     */
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * UserStory findMany
   */
  export type UserStoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * Filter, which UserStories to fetch.
     */
    where?: UserStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStories to fetch.
     */
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStories.
     */
    cursor?: UserStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStories.
     */
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * UserStory create
   */
  export type UserStoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStory.
     */
    data: XOR<UserStoryCreateInput, UserStoryUncheckedCreateInput>
  }

  /**
   * UserStory createMany
   */
  export type UserStoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStories.
     */
    data: UserStoryCreateManyInput | UserStoryCreateManyInput[]
  }

  /**
   * UserStory createManyAndReturn
   */
  export type UserStoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * The data used to create many UserStories.
     */
    data: UserStoryCreateManyInput | UserStoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStory update
   */
  export type UserStoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStory.
     */
    data: XOR<UserStoryUpdateInput, UserStoryUncheckedUpdateInput>
    /**
     * Choose, which UserStory to update.
     */
    where: UserStoryWhereUniqueInput
  }

  /**
   * UserStory updateMany
   */
  export type UserStoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStories.
     */
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyInput>
    /**
     * Filter which UserStories to update
     */
    where?: UserStoryWhereInput
    /**
     * Limit how many UserStories to update.
     */
    limit?: number
  }

  /**
   * UserStory updateManyAndReturn
   */
  export type UserStoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * The data used to update UserStories.
     */
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyInput>
    /**
     * Filter which UserStories to update
     */
    where?: UserStoryWhereInput
    /**
     * Limit how many UserStories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStory upsert
   */
  export type UserStoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStory to update in case it exists.
     */
    where: UserStoryWhereUniqueInput
    /**
     * In case the UserStory found by the `where` argument doesn't exist, create a new UserStory with this data.
     */
    create: XOR<UserStoryCreateInput, UserStoryUncheckedCreateInput>
    /**
     * In case the UserStory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStoryUpdateInput, UserStoryUncheckedUpdateInput>
  }

  /**
   * UserStory delete
   */
  export type UserStoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    /**
     * Filter which UserStory to delete.
     */
    where: UserStoryWhereUniqueInput
  }

  /**
   * UserStory deleteMany
   */
  export type UserStoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStories to delete
     */
    where?: UserStoryWhereInput
    /**
     * Limit how many UserStories to delete.
     */
    limit?: number
  }

  /**
   * UserStory.creator
   */
  export type UserStory$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserStory.parentUserStory
   */
  export type UserStory$parentUserStoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
  }

  /**
   * UserStory.childUserStories
   */
  export type UserStory$childUserStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * UserStory.comments
   */
  export type UserStory$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * UserStory.roadMaps
   */
  export type UserStory$roadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * UserStory.features
   */
  export type UserStory$featuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * UserStory.sprints
   */
  export type UserStory$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    cursor?: SprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * UserStory.tasks
   */
  export type UserStory$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * UserStory without action
   */
  export type UserStoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
  }


  /**
   * Model Sprints
   */

  export type AggregateSprints = {
    _count: SprintsCountAggregateOutputType | null
    _min: SprintsMinAggregateOutputType | null
    _max: SprintsMaxAggregateOutputType | null
  }

  export type SprintsMinAggregateOutputType = {
    id: string | null
    name: string | null
    goal: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.SprintStatus | null
    projectId: string | null
    creatorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SprintsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    goal: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.SprintStatus | null
    projectId: string | null
    creatorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SprintsCountAggregateOutputType = {
    id: number
    name: number
    goal: number
    startDate: number
    endDate: number
    status: number
    projectId: number
    creatorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SprintsMinAggregateInputType = {
    id?: true
    name?: true
    goal?: true
    startDate?: true
    endDate?: true
    status?: true
    projectId?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SprintsMaxAggregateInputType = {
    id?: true
    name?: true
    goal?: true
    startDate?: true
    endDate?: true
    status?: true
    projectId?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SprintsCountAggregateInputType = {
    id?: true
    name?: true
    goal?: true
    startDate?: true
    endDate?: true
    status?: true
    projectId?: true
    creatorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SprintsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sprints to aggregate.
     */
    where?: SprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sprints
    **/
    _count?: true | SprintsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SprintsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SprintsMaxAggregateInputType
  }

  export type GetSprintsAggregateType<T extends SprintsAggregateArgs> = {
        [P in keyof T & keyof AggregateSprints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprints[P]>
      : GetScalarType<T[P], AggregateSprints[P]>
  }




  export type SprintsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithAggregationInput | SprintsOrderByWithAggregationInput[]
    by: SprintsScalarFieldEnum[] | SprintsScalarFieldEnum
    having?: SprintsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SprintsCountAggregateInputType | true
    _min?: SprintsMinAggregateInputType
    _max?: SprintsMaxAggregateInputType
  }

  export type SprintsGroupByOutputType = {
    id: string
    name: string
    goal: string | null
    startDate: Date
    endDate: Date
    status: $Enums.SprintStatus
    projectId: string
    creatorId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SprintsCountAggregateOutputType | null
    _min: SprintsMinAggregateOutputType | null
    _max: SprintsMaxAggregateOutputType | null
  }

  type GetSprintsGroupByPayload<T extends SprintsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SprintsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SprintsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintsGroupByOutputType[P]>
            : GetScalarType<T[P], SprintsGroupByOutputType[P]>
        }
      >
    >


  export type SprintsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goal?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Sprints$creatorArgs<ExtArgs>
    comments?: boolean | Sprints$commentsArgs<ExtArgs>
    roadMaps?: boolean | Sprints$roadMapsArgs<ExtArgs>
    features?: boolean | Sprints$featuresArgs<ExtArgs>
    userStories?: boolean | Sprints$userStoriesArgs<ExtArgs>
    tasks?: boolean | Sprints$tasksArgs<ExtArgs>
    _count?: boolean | SprintsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprints"]>

  export type SprintsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goal?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Sprints$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["sprints"]>

  export type SprintsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goal?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Sprints$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["sprints"]>

  export type SprintsSelectScalar = {
    id?: boolean
    name?: boolean
    goal?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    projectId?: boolean
    creatorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SprintsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "goal" | "startDate" | "endDate" | "status" | "projectId" | "creatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["sprints"]>
  export type SprintsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Sprints$creatorArgs<ExtArgs>
    comments?: boolean | Sprints$commentsArgs<ExtArgs>
    roadMaps?: boolean | Sprints$roadMapsArgs<ExtArgs>
    features?: boolean | Sprints$featuresArgs<ExtArgs>
    userStories?: boolean | Sprints$userStoriesArgs<ExtArgs>
    tasks?: boolean | Sprints$tasksArgs<ExtArgs>
    _count?: boolean | SprintsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SprintsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Sprints$creatorArgs<ExtArgs>
  }
  export type SprintsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    creator?: boolean | Sprints$creatorArgs<ExtArgs>
  }

  export type $SprintsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sprints"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
      comments: Prisma.$CommentsPayload<ExtArgs>[]
      roadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
      features: Prisma.$FeaturesPayload<ExtArgs>[]
      userStories: Prisma.$UserStoryPayload<ExtArgs>[]
      tasks: Prisma.$TasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      goal: string | null
      startDate: Date
      endDate: Date
      status: $Enums.SprintStatus
      projectId: string
      creatorId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sprints"]>
    composites: {}
  }

  type SprintsGetPayload<S extends boolean | null | undefined | SprintsDefaultArgs> = $Result.GetResult<Prisma.$SprintsPayload, S>

  type SprintsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SprintsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SprintsCountAggregateInputType | true
    }

  export interface SprintsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sprints'], meta: { name: 'Sprints' } }
    /**
     * Find zero or one Sprints that matches the filter.
     * @param {SprintsFindUniqueArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SprintsFindUniqueArgs>(args: SelectSubset<T, SprintsFindUniqueArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sprints that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SprintsFindUniqueOrThrowArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SprintsFindUniqueOrThrowArgs>(args: SelectSubset<T, SprintsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsFindFirstArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SprintsFindFirstArgs>(args?: SelectSubset<T, SprintsFindFirstArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprints that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsFindFirstOrThrowArgs} args - Arguments to find a Sprints
     * @example
     * // Get one Sprints
     * const sprints = await prisma.sprints.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SprintsFindFirstOrThrowArgs>(args?: SelectSubset<T, SprintsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sprints
     * const sprints = await prisma.sprints.findMany()
     * 
     * // Get first 10 Sprints
     * const sprints = await prisma.sprints.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sprintsWithIdOnly = await prisma.sprints.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SprintsFindManyArgs>(args?: SelectSubset<T, SprintsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sprints.
     * @param {SprintsCreateArgs} args - Arguments to create a Sprints.
     * @example
     * // Create one Sprints
     * const Sprints = await prisma.sprints.create({
     *   data: {
     *     // ... data to create a Sprints
     *   }
     * })
     * 
     */
    create<T extends SprintsCreateArgs>(args: SelectSubset<T, SprintsCreateArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sprints.
     * @param {SprintsCreateManyArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprints = await prisma.sprints.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SprintsCreateManyArgs>(args?: SelectSubset<T, SprintsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sprints and returns the data saved in the database.
     * @param {SprintsCreateManyAndReturnArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprints = await prisma.sprints.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sprints and only return the `id`
     * const sprintsWithIdOnly = await prisma.sprints.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SprintsCreateManyAndReturnArgs>(args?: SelectSubset<T, SprintsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sprints.
     * @param {SprintsDeleteArgs} args - Arguments to delete one Sprints.
     * @example
     * // Delete one Sprints
     * const Sprints = await prisma.sprints.delete({
     *   where: {
     *     // ... filter to delete one Sprints
     *   }
     * })
     * 
     */
    delete<T extends SprintsDeleteArgs>(args: SelectSubset<T, SprintsDeleteArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sprints.
     * @param {SprintsUpdateArgs} args - Arguments to update one Sprints.
     * @example
     * // Update one Sprints
     * const sprints = await prisma.sprints.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SprintsUpdateArgs>(args: SelectSubset<T, SprintsUpdateArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sprints.
     * @param {SprintsDeleteManyArgs} args - Arguments to filter Sprints to delete.
     * @example
     * // Delete a few Sprints
     * const { count } = await prisma.sprints.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SprintsDeleteManyArgs>(args?: SelectSubset<T, SprintsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sprints
     * const sprints = await prisma.sprints.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SprintsUpdateManyArgs>(args: SelectSubset<T, SprintsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints and returns the data updated in the database.
     * @param {SprintsUpdateManyAndReturnArgs} args - Arguments to update many Sprints.
     * @example
     * // Update many Sprints
     * const sprints = await prisma.sprints.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sprints and only return the `id`
     * const sprintsWithIdOnly = await prisma.sprints.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SprintsUpdateManyAndReturnArgs>(args: SelectSubset<T, SprintsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sprints.
     * @param {SprintsUpsertArgs} args - Arguments to update or create a Sprints.
     * @example
     * // Update or create a Sprints
     * const sprints = await prisma.sprints.upsert({
     *   create: {
     *     // ... data to create a Sprints
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sprints we want to update
     *   }
     * })
     */
    upsert<T extends SprintsUpsertArgs>(args: SelectSubset<T, SprintsUpsertArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsCountArgs} args - Arguments to filter Sprints to count.
     * @example
     * // Count the number of Sprints
     * const count = await prisma.sprints.count({
     *   where: {
     *     // ... the filter for the Sprints we want to count
     *   }
     * })
    **/
    count<T extends SprintsCountArgs>(
      args?: Subset<T, SprintsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SprintsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SprintsAggregateArgs>(args: Subset<T, SprintsAggregateArgs>): Prisma.PrismaPromise<GetSprintsAggregateType<T>>

    /**
     * Group by Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SprintsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SprintsGroupByArgs['orderBy'] }
        : { orderBy?: SprintsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SprintsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprintsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sprints model
   */
  readonly fields: SprintsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sprints.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SprintsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends Sprints$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Sprints$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    comments<T extends Sprints$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Sprints$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roadMaps<T extends Sprints$roadMapsArgs<ExtArgs> = {}>(args?: Subset<T, Sprints$roadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    features<T extends Sprints$featuresArgs<ExtArgs> = {}>(args?: Subset<T, Sprints$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userStories<T extends Sprints$userStoriesArgs<ExtArgs> = {}>(args?: Subset<T, Sprints$userStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Sprints$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Sprints$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sprints model
   */
  interface SprintsFieldRefs {
    readonly id: FieldRef<"Sprints", 'String'>
    readonly name: FieldRef<"Sprints", 'String'>
    readonly goal: FieldRef<"Sprints", 'String'>
    readonly startDate: FieldRef<"Sprints", 'DateTime'>
    readonly endDate: FieldRef<"Sprints", 'DateTime'>
    readonly status: FieldRef<"Sprints", 'SprintStatus'>
    readonly projectId: FieldRef<"Sprints", 'String'>
    readonly creatorId: FieldRef<"Sprints", 'String'>
    readonly createdAt: FieldRef<"Sprints", 'DateTime'>
    readonly updatedAt: FieldRef<"Sprints", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sprints findUnique
   */
  export type SprintsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where: SprintsWhereUniqueInput
  }

  /**
   * Sprints findUniqueOrThrow
   */
  export type SprintsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where: SprintsWhereUniqueInput
  }

  /**
   * Sprints findFirst
   */
  export type SprintsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where?: SprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * Sprints findFirstOrThrow
   */
  export type SprintsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where?: SprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * Sprints findMany
   */
  export type SprintsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where?: SprintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sprints.
     */
    cursor?: SprintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * Sprints create
   */
  export type SprintsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * The data needed to create a Sprints.
     */
    data: XOR<SprintsCreateInput, SprintsUncheckedCreateInput>
  }

  /**
   * Sprints createMany
   */
  export type SprintsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sprints.
     */
    data: SprintsCreateManyInput | SprintsCreateManyInput[]
  }

  /**
   * Sprints createManyAndReturn
   */
  export type SprintsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * The data used to create many Sprints.
     */
    data: SprintsCreateManyInput | SprintsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sprints update
   */
  export type SprintsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * The data needed to update a Sprints.
     */
    data: XOR<SprintsUpdateInput, SprintsUncheckedUpdateInput>
    /**
     * Choose, which Sprints to update.
     */
    where: SprintsWhereUniqueInput
  }

  /**
   * Sprints updateMany
   */
  export type SprintsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyInput>
    /**
     * Filter which Sprints to update
     */
    where?: SprintsWhereInput
    /**
     * Limit how many Sprints to update.
     */
    limit?: number
  }

  /**
   * Sprints updateManyAndReturn
   */
  export type SprintsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyInput>
    /**
     * Filter which Sprints to update
     */
    where?: SprintsWhereInput
    /**
     * Limit how many Sprints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sprints upsert
   */
  export type SprintsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * The filter to search for the Sprints to update in case it exists.
     */
    where: SprintsWhereUniqueInput
    /**
     * In case the Sprints found by the `where` argument doesn't exist, create a new Sprints with this data.
     */
    create: XOR<SprintsCreateInput, SprintsUncheckedCreateInput>
    /**
     * In case the Sprints was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SprintsUpdateInput, SprintsUncheckedUpdateInput>
  }

  /**
   * Sprints delete
   */
  export type SprintsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    /**
     * Filter which Sprints to delete.
     */
    where: SprintsWhereUniqueInput
  }

  /**
   * Sprints deleteMany
   */
  export type SprintsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sprints to delete
     */
    where?: SprintsWhereInput
    /**
     * Limit how many Sprints to delete.
     */
    limit?: number
  }

  /**
   * Sprints.creator
   */
  export type Sprints$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Sprints.comments
   */
  export type Sprints$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Sprints.roadMaps
   */
  export type Sprints$roadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * Sprints.features
   */
  export type Sprints$featuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Sprints.userStories
   */
  export type Sprints$userStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * Sprints.tasks
   */
  export type Sprints$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Sprints without action
   */
  export type SprintsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
  }


  /**
   * Model Tasks
   */

  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksAvgAggregateOutputType = {
    priority: number | null
  }

  export type TasksSumAggregateOutputType = {
    priority: number | null
  }

  export type TasksMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.Status | null
    priority: number | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    assigneeId: string | null
    parentTaskId: string | null
  }

  export type TasksMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.Status | null
    priority: number | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    assigneeId: string | null
    parentTaskId: string | null
  }

  export type TasksCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    dueDate: number
    createdAt: number
    updatedAt: number
    projectId: number
    assigneeId: number
    parentTaskId: number
    _all: number
  }


  export type TasksAvgAggregateInputType = {
    priority?: true
  }

  export type TasksSumAggregateInputType = {
    priority?: true
  }

  export type TasksMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    assigneeId?: true
    parentTaskId?: true
  }

  export type TasksMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    assigneeId?: true
    parentTaskId?: true
  }

  export type TasksCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    assigneeId?: true
    parentTaskId?: true
    _all?: true
  }

  export type TasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to aggregate.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type TasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithAggregationInput | TasksOrderByWithAggregationInput[]
    by: TasksScalarFieldEnum[] | TasksScalarFieldEnum
    having?: TasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _avg?: TasksAvgAggregateInputType
    _sum?: TasksSumAggregateInputType
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }

  export type TasksGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.Status
    priority: number
    dueDate: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    assigneeId: string | null
    parentTaskId: string | null
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends TasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type TasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assigneeId?: boolean
    parentTaskId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    assignee?: boolean | Tasks$assigneeArgs<ExtArgs>
    parentTask?: boolean | Tasks$parentTaskArgs<ExtArgs>
    childTasks?: boolean | Tasks$childTasksArgs<ExtArgs>
    timeLogs?: boolean | Tasks$timeLogsArgs<ExtArgs>
    comments?: boolean | Tasks$commentsArgs<ExtArgs>
    roadMaps?: boolean | Tasks$roadMapsArgs<ExtArgs>
    features?: boolean | Tasks$featuresArgs<ExtArgs>
    userStories?: boolean | Tasks$userStoriesArgs<ExtArgs>
    sprints?: boolean | Tasks$sprintsArgs<ExtArgs>
    _count?: boolean | TasksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type TasksSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assigneeId?: boolean
    parentTaskId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    assignee?: boolean | Tasks$assigneeArgs<ExtArgs>
    parentTask?: boolean | Tasks$parentTaskArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type TasksSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assigneeId?: boolean
    parentTaskId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    assignee?: boolean | Tasks$assigneeArgs<ExtArgs>
    parentTask?: boolean | Tasks$parentTaskArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type TasksSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assigneeId?: boolean
    parentTaskId?: boolean
  }

  export type TasksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "dueDate" | "createdAt" | "updatedAt" | "projectId" | "assigneeId" | "parentTaskId", ExtArgs["result"]["tasks"]>
  export type TasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    assignee?: boolean | Tasks$assigneeArgs<ExtArgs>
    parentTask?: boolean | Tasks$parentTaskArgs<ExtArgs>
    childTasks?: boolean | Tasks$childTasksArgs<ExtArgs>
    timeLogs?: boolean | Tasks$timeLogsArgs<ExtArgs>
    comments?: boolean | Tasks$commentsArgs<ExtArgs>
    roadMaps?: boolean | Tasks$roadMapsArgs<ExtArgs>
    features?: boolean | Tasks$featuresArgs<ExtArgs>
    userStories?: boolean | Tasks$userStoriesArgs<ExtArgs>
    sprints?: boolean | Tasks$sprintsArgs<ExtArgs>
    _count?: boolean | TasksCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TasksIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    assignee?: boolean | Tasks$assigneeArgs<ExtArgs>
    parentTask?: boolean | Tasks$parentTaskArgs<ExtArgs>
  }
  export type TasksIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    assignee?: boolean | Tasks$assigneeArgs<ExtArgs>
    parentTask?: boolean | Tasks$parentTaskArgs<ExtArgs>
  }

  export type $TasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tasks"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      assignee: Prisma.$UserPayload<ExtArgs> | null
      parentTask: Prisma.$TasksPayload<ExtArgs> | null
      childTasks: Prisma.$TasksPayload<ExtArgs>[]
      timeLogs: Prisma.$TimeLogPayload<ExtArgs>[]
      comments: Prisma.$CommentsPayload<ExtArgs>[]
      roadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
      features: Prisma.$FeaturesPayload<ExtArgs>[]
      userStories: Prisma.$UserStoryPayload<ExtArgs>[]
      sprints: Prisma.$SprintsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.Status
      priority: number
      dueDate: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      assigneeId: string | null
      parentTaskId: string | null
    }, ExtArgs["result"]["tasks"]>
    composites: {}
  }

  type TasksGetPayload<S extends boolean | null | undefined | TasksDefaultArgs> = $Result.GetResult<Prisma.$TasksPayload, S>

  type TasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TasksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface TasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tasks'], meta: { name: 'Tasks' } }
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {TasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TasksFindUniqueArgs>(args: SelectSubset<T, TasksFindUniqueArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tasks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TasksFindUniqueOrThrowArgs>(args: SelectSubset<T, TasksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TasksFindFirstArgs>(args?: SelectSubset<T, TasksFindFirstArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TasksFindFirstOrThrowArgs>(args?: SelectSubset<T, TasksFindFirstOrThrowArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TasksFindManyArgs>(args?: SelectSubset<T, TasksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tasks.
     * @param {TasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
     */
    create<T extends TasksCreateArgs>(args: SelectSubset<T, TasksCreateArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TasksCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TasksCreateManyArgs>(args?: SelectSubset<T, TasksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TasksCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const tasksWithIdOnly = await prisma.tasks.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TasksCreateManyAndReturnArgs>(args?: SelectSubset<T, TasksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tasks.
     * @param {TasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
     */
    delete<T extends TasksDeleteArgs>(args: SelectSubset<T, TasksDeleteArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tasks.
     * @param {TasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TasksUpdateArgs>(args: SelectSubset<T, TasksUpdateArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TasksDeleteManyArgs>(args?: SelectSubset<T, TasksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TasksUpdateManyArgs>(args: SelectSubset<T, TasksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TasksUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const tasksWithIdOnly = await prisma.tasks.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TasksUpdateManyAndReturnArgs>(args: SelectSubset<T, TasksUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tasks.
     * @param {TasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
     */
    upsert<T extends TasksUpsertArgs>(args: SelectSubset<T, TasksUpsertArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TasksCountArgs>(
      args?: Subset<T, TasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TasksGroupByArgs['orderBy'] }
        : { orderBy?: TasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tasks model
   */
  readonly fields: TasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignee<T extends Tasks$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parentTask<T extends Tasks$parentTaskArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$parentTaskArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childTasks<T extends Tasks$childTasksArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$childTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timeLogs<T extends Tasks$timeLogsArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$timeLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Tasks$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roadMaps<T extends Tasks$roadMapsArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$roadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    features<T extends Tasks$featuresArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userStories<T extends Tasks$userStoriesArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$userStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprints<T extends Tasks$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, Tasks$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tasks model
   */
  interface TasksFieldRefs {
    readonly id: FieldRef<"Tasks", 'String'>
    readonly title: FieldRef<"Tasks", 'String'>
    readonly description: FieldRef<"Tasks", 'String'>
    readonly status: FieldRef<"Tasks", 'Status'>
    readonly priority: FieldRef<"Tasks", 'Int'>
    readonly dueDate: FieldRef<"Tasks", 'DateTime'>
    readonly createdAt: FieldRef<"Tasks", 'DateTime'>
    readonly updatedAt: FieldRef<"Tasks", 'DateTime'>
    readonly projectId: FieldRef<"Tasks", 'String'>
    readonly assigneeId: FieldRef<"Tasks", 'String'>
    readonly parentTaskId: FieldRef<"Tasks", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tasks findUnique
   */
  export type TasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks findUniqueOrThrow
   */
  export type TasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks findFirst
   */
  export type TasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks findFirstOrThrow
   */
  export type TasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks findMany
   */
  export type TasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks create
   */
  export type TasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * The data needed to create a Tasks.
     */
    data: XOR<TasksCreateInput, TasksUncheckedCreateInput>
  }

  /**
   * Tasks createMany
   */
  export type TasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TasksCreateManyInput | TasksCreateManyInput[]
  }

  /**
   * Tasks createManyAndReturn
   */
  export type TasksCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TasksCreateManyInput | TasksCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tasks update
   */
  export type TasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * The data needed to update a Tasks.
     */
    data: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
    /**
     * Choose, which Tasks to update.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks updateMany
   */
  export type TasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TasksWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Tasks updateManyAndReturn
   */
  export type TasksUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TasksWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tasks upsert
   */
  export type TasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * The filter to search for the Tasks to update in case it exists.
     */
    where: TasksWhereUniqueInput
    /**
     * In case the Tasks found by the `where` argument doesn't exist, create a new Tasks with this data.
     */
    create: XOR<TasksCreateInput, TasksUncheckedCreateInput>
    /**
     * In case the Tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
  }

  /**
   * Tasks delete
   */
  export type TasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter which Tasks to delete.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks deleteMany
   */
  export type TasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TasksWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Tasks.assignee
   */
  export type Tasks$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Tasks.parentTask
   */
  export type Tasks$parentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
  }

  /**
   * Tasks.childTasks
   */
  export type Tasks$childTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks.timeLogs
   */
  export type Tasks$timeLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    where?: TimeLogWhereInput
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    cursor?: TimeLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeLogScalarFieldEnum | TimeLogScalarFieldEnum[]
  }

  /**
   * Tasks.comments
   */
  export type Tasks$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Tasks.roadMaps
   */
  export type Tasks$roadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * Tasks.features
   */
  export type Tasks$featuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
    orderBy?: FeaturesOrderByWithRelationInput | FeaturesOrderByWithRelationInput[]
    cursor?: FeaturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeaturesScalarFieldEnum | FeaturesScalarFieldEnum[]
  }

  /**
   * Tasks.userStories
   */
  export type Tasks$userStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
    orderBy?: UserStoryOrderByWithRelationInput | UserStoryOrderByWithRelationInput[]
    cursor?: UserStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStoryScalarFieldEnum | UserStoryScalarFieldEnum[]
  }

  /**
   * Tasks.sprints
   */
  export type Tasks$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
    orderBy?: SprintsOrderByWithRelationInput | SprintsOrderByWithRelationInput[]
    cursor?: SprintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintsScalarFieldEnum | SprintsScalarFieldEnum[]
  }

  /**
   * Tasks without action
   */
  export type TasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
  }


  /**
   * Model SchemaFields
   */

  export type AggregateSchemaFields = {
    _count: SchemaFieldsCountAggregateOutputType | null
    _avg: SchemaFieldsAvgAggregateOutputType | null
    _sum: SchemaFieldsSumAggregateOutputType | null
    _min: SchemaFieldsMinAggregateOutputType | null
    _max: SchemaFieldsMaxAggregateOutputType | null
  }

  export type SchemaFieldsAvgAggregateOutputType = {
    order: number | null
  }

  export type SchemaFieldsSumAggregateOutputType = {
    order: number | null
  }

  export type SchemaFieldsMinAggregateOutputType = {
    id: string | null
    name: string | null
    fieldType: $Enums.FieldType | null
    isRequired: boolean | null
    isUnique: boolean | null
    defaultValue: string | null
    description: string | null
    comment: string | null
    order: number | null
    projectId: string | null
    parentFieldId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchemaFieldsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    fieldType: $Enums.FieldType | null
    isRequired: boolean | null
    isUnique: boolean | null
    defaultValue: string | null
    description: string | null
    comment: string | null
    order: number | null
    projectId: string | null
    parentFieldId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchemaFieldsCountAggregateOutputType = {
    id: number
    name: number
    fieldType: number
    isRequired: number
    isUnique: number
    defaultValue: number
    description: number
    comment: number
    order: number
    projectId: number
    parentFieldId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SchemaFieldsAvgAggregateInputType = {
    order?: true
  }

  export type SchemaFieldsSumAggregateInputType = {
    order?: true
  }

  export type SchemaFieldsMinAggregateInputType = {
    id?: true
    name?: true
    fieldType?: true
    isRequired?: true
    isUnique?: true
    defaultValue?: true
    description?: true
    comment?: true
    order?: true
    projectId?: true
    parentFieldId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchemaFieldsMaxAggregateInputType = {
    id?: true
    name?: true
    fieldType?: true
    isRequired?: true
    isUnique?: true
    defaultValue?: true
    description?: true
    comment?: true
    order?: true
    projectId?: true
    parentFieldId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchemaFieldsCountAggregateInputType = {
    id?: true
    name?: true
    fieldType?: true
    isRequired?: true
    isUnique?: true
    defaultValue?: true
    description?: true
    comment?: true
    order?: true
    projectId?: true
    parentFieldId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SchemaFieldsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchemaFields to aggregate.
     */
    where?: SchemaFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaFields to fetch.
     */
    orderBy?: SchemaFieldsOrderByWithRelationInput | SchemaFieldsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchemaFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchemaFields
    **/
    _count?: true | SchemaFieldsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchemaFieldsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchemaFieldsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchemaFieldsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchemaFieldsMaxAggregateInputType
  }

  export type GetSchemaFieldsAggregateType<T extends SchemaFieldsAggregateArgs> = {
        [P in keyof T & keyof AggregateSchemaFields]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchemaFields[P]>
      : GetScalarType<T[P], AggregateSchemaFields[P]>
  }




  export type SchemaFieldsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchemaFieldsWhereInput
    orderBy?: SchemaFieldsOrderByWithAggregationInput | SchemaFieldsOrderByWithAggregationInput[]
    by: SchemaFieldsScalarFieldEnum[] | SchemaFieldsScalarFieldEnum
    having?: SchemaFieldsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchemaFieldsCountAggregateInputType | true
    _avg?: SchemaFieldsAvgAggregateInputType
    _sum?: SchemaFieldsSumAggregateInputType
    _min?: SchemaFieldsMinAggregateInputType
    _max?: SchemaFieldsMaxAggregateInputType
  }

  export type SchemaFieldsGroupByOutputType = {
    id: string
    name: string
    fieldType: $Enums.FieldType | null
    isRequired: boolean
    isUnique: boolean
    defaultValue: string | null
    description: string | null
    comment: string | null
    order: number
    projectId: string
    parentFieldId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SchemaFieldsCountAggregateOutputType | null
    _avg: SchemaFieldsAvgAggregateOutputType | null
    _sum: SchemaFieldsSumAggregateOutputType | null
    _min: SchemaFieldsMinAggregateOutputType | null
    _max: SchemaFieldsMaxAggregateOutputType | null
  }

  type GetSchemaFieldsGroupByPayload<T extends SchemaFieldsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchemaFieldsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchemaFieldsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchemaFieldsGroupByOutputType[P]>
            : GetScalarType<T[P], SchemaFieldsGroupByOutputType[P]>
        }
      >
    >


  export type SchemaFieldsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: boolean
    description?: boolean
    comment?: boolean
    order?: boolean
    projectId?: boolean
    parentFieldId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    parentField?: boolean | SchemaFields$parentFieldArgs<ExtArgs>
    childFields?: boolean | SchemaFields$childFieldsArgs<ExtArgs>
    _count?: boolean | SchemaFieldsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schemaFields"]>

  export type SchemaFieldsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: boolean
    description?: boolean
    comment?: boolean
    order?: boolean
    projectId?: boolean
    parentFieldId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    parentField?: boolean | SchemaFields$parentFieldArgs<ExtArgs>
  }, ExtArgs["result"]["schemaFields"]>

  export type SchemaFieldsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: boolean
    description?: boolean
    comment?: boolean
    order?: boolean
    projectId?: boolean
    parentFieldId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    parentField?: boolean | SchemaFields$parentFieldArgs<ExtArgs>
  }, ExtArgs["result"]["schemaFields"]>

  export type SchemaFieldsSelectScalar = {
    id?: boolean
    name?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: boolean
    description?: boolean
    comment?: boolean
    order?: boolean
    projectId?: boolean
    parentFieldId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SchemaFieldsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "fieldType" | "isRequired" | "isUnique" | "defaultValue" | "description" | "comment" | "order" | "projectId" | "parentFieldId" | "createdAt" | "updatedAt", ExtArgs["result"]["schemaFields"]>
  export type SchemaFieldsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    parentField?: boolean | SchemaFields$parentFieldArgs<ExtArgs>
    childFields?: boolean | SchemaFields$childFieldsArgs<ExtArgs>
    _count?: boolean | SchemaFieldsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchemaFieldsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    parentField?: boolean | SchemaFields$parentFieldArgs<ExtArgs>
  }
  export type SchemaFieldsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    parentField?: boolean | SchemaFields$parentFieldArgs<ExtArgs>
  }

  export type $SchemaFieldsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchemaFields"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      parentField: Prisma.$SchemaFieldsPayload<ExtArgs> | null
      childFields: Prisma.$SchemaFieldsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      fieldType: $Enums.FieldType | null
      isRequired: boolean
      isUnique: boolean
      defaultValue: string | null
      description: string | null
      comment: string | null
      order: number
      projectId: string
      parentFieldId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schemaFields"]>
    composites: {}
  }

  type SchemaFieldsGetPayload<S extends boolean | null | undefined | SchemaFieldsDefaultArgs> = $Result.GetResult<Prisma.$SchemaFieldsPayload, S>

  type SchemaFieldsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SchemaFieldsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SchemaFieldsCountAggregateInputType | true
    }

  export interface SchemaFieldsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchemaFields'], meta: { name: 'SchemaFields' } }
    /**
     * Find zero or one SchemaFields that matches the filter.
     * @param {SchemaFieldsFindUniqueArgs} args - Arguments to find a SchemaFields
     * @example
     * // Get one SchemaFields
     * const schemaFields = await prisma.schemaFields.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchemaFieldsFindUniqueArgs>(args: SelectSubset<T, SchemaFieldsFindUniqueArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SchemaFields that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SchemaFieldsFindUniqueOrThrowArgs} args - Arguments to find a SchemaFields
     * @example
     * // Get one SchemaFields
     * const schemaFields = await prisma.schemaFields.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchemaFieldsFindUniqueOrThrowArgs>(args: SelectSubset<T, SchemaFieldsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchemaFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsFindFirstArgs} args - Arguments to find a SchemaFields
     * @example
     * // Get one SchemaFields
     * const schemaFields = await prisma.schemaFields.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchemaFieldsFindFirstArgs>(args?: SelectSubset<T, SchemaFieldsFindFirstArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchemaFields that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsFindFirstOrThrowArgs} args - Arguments to find a SchemaFields
     * @example
     * // Get one SchemaFields
     * const schemaFields = await prisma.schemaFields.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchemaFieldsFindFirstOrThrowArgs>(args?: SelectSubset<T, SchemaFieldsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SchemaFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchemaFields
     * const schemaFields = await prisma.schemaFields.findMany()
     * 
     * // Get first 10 SchemaFields
     * const schemaFields = await prisma.schemaFields.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schemaFieldsWithIdOnly = await prisma.schemaFields.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchemaFieldsFindManyArgs>(args?: SelectSubset<T, SchemaFieldsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SchemaFields.
     * @param {SchemaFieldsCreateArgs} args - Arguments to create a SchemaFields.
     * @example
     * // Create one SchemaFields
     * const SchemaFields = await prisma.schemaFields.create({
     *   data: {
     *     // ... data to create a SchemaFields
     *   }
     * })
     * 
     */
    create<T extends SchemaFieldsCreateArgs>(args: SelectSubset<T, SchemaFieldsCreateArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SchemaFields.
     * @param {SchemaFieldsCreateManyArgs} args - Arguments to create many SchemaFields.
     * @example
     * // Create many SchemaFields
     * const schemaFields = await prisma.schemaFields.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchemaFieldsCreateManyArgs>(args?: SelectSubset<T, SchemaFieldsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SchemaFields and returns the data saved in the database.
     * @param {SchemaFieldsCreateManyAndReturnArgs} args - Arguments to create many SchemaFields.
     * @example
     * // Create many SchemaFields
     * const schemaFields = await prisma.schemaFields.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SchemaFields and only return the `id`
     * const schemaFieldsWithIdOnly = await prisma.schemaFields.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchemaFieldsCreateManyAndReturnArgs>(args?: SelectSubset<T, SchemaFieldsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SchemaFields.
     * @param {SchemaFieldsDeleteArgs} args - Arguments to delete one SchemaFields.
     * @example
     * // Delete one SchemaFields
     * const SchemaFields = await prisma.schemaFields.delete({
     *   where: {
     *     // ... filter to delete one SchemaFields
     *   }
     * })
     * 
     */
    delete<T extends SchemaFieldsDeleteArgs>(args: SelectSubset<T, SchemaFieldsDeleteArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SchemaFields.
     * @param {SchemaFieldsUpdateArgs} args - Arguments to update one SchemaFields.
     * @example
     * // Update one SchemaFields
     * const schemaFields = await prisma.schemaFields.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchemaFieldsUpdateArgs>(args: SelectSubset<T, SchemaFieldsUpdateArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SchemaFields.
     * @param {SchemaFieldsDeleteManyArgs} args - Arguments to filter SchemaFields to delete.
     * @example
     * // Delete a few SchemaFields
     * const { count } = await prisma.schemaFields.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchemaFieldsDeleteManyArgs>(args?: SelectSubset<T, SchemaFieldsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchemaFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchemaFields
     * const schemaFields = await prisma.schemaFields.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchemaFieldsUpdateManyArgs>(args: SelectSubset<T, SchemaFieldsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchemaFields and returns the data updated in the database.
     * @param {SchemaFieldsUpdateManyAndReturnArgs} args - Arguments to update many SchemaFields.
     * @example
     * // Update many SchemaFields
     * const schemaFields = await prisma.schemaFields.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SchemaFields and only return the `id`
     * const schemaFieldsWithIdOnly = await prisma.schemaFields.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SchemaFieldsUpdateManyAndReturnArgs>(args: SelectSubset<T, SchemaFieldsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SchemaFields.
     * @param {SchemaFieldsUpsertArgs} args - Arguments to update or create a SchemaFields.
     * @example
     * // Update or create a SchemaFields
     * const schemaFields = await prisma.schemaFields.upsert({
     *   create: {
     *     // ... data to create a SchemaFields
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchemaFields we want to update
     *   }
     * })
     */
    upsert<T extends SchemaFieldsUpsertArgs>(args: SelectSubset<T, SchemaFieldsUpsertArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SchemaFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsCountArgs} args - Arguments to filter SchemaFields to count.
     * @example
     * // Count the number of SchemaFields
     * const count = await prisma.schemaFields.count({
     *   where: {
     *     // ... the filter for the SchemaFields we want to count
     *   }
     * })
    **/
    count<T extends SchemaFieldsCountArgs>(
      args?: Subset<T, SchemaFieldsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchemaFieldsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchemaFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchemaFieldsAggregateArgs>(args: Subset<T, SchemaFieldsAggregateArgs>): Prisma.PrismaPromise<GetSchemaFieldsAggregateType<T>>

    /**
     * Group by SchemaFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFieldsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchemaFieldsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchemaFieldsGroupByArgs['orderBy'] }
        : { orderBy?: SchemaFieldsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchemaFieldsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchemaFieldsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchemaFields model
   */
  readonly fields: SchemaFieldsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchemaFields.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchemaFieldsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parentField<T extends SchemaFields$parentFieldArgs<ExtArgs> = {}>(args?: Subset<T, SchemaFields$parentFieldArgs<ExtArgs>>): Prisma__SchemaFieldsClient<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childFields<T extends SchemaFields$childFieldsArgs<ExtArgs> = {}>(args?: Subset<T, SchemaFields$childFieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemaFieldsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SchemaFields model
   */
  interface SchemaFieldsFieldRefs {
    readonly id: FieldRef<"SchemaFields", 'String'>
    readonly name: FieldRef<"SchemaFields", 'String'>
    readonly fieldType: FieldRef<"SchemaFields", 'FieldType'>
    readonly isRequired: FieldRef<"SchemaFields", 'Boolean'>
    readonly isUnique: FieldRef<"SchemaFields", 'Boolean'>
    readonly defaultValue: FieldRef<"SchemaFields", 'String'>
    readonly description: FieldRef<"SchemaFields", 'String'>
    readonly comment: FieldRef<"SchemaFields", 'String'>
    readonly order: FieldRef<"SchemaFields", 'Int'>
    readonly projectId: FieldRef<"SchemaFields", 'String'>
    readonly parentFieldId: FieldRef<"SchemaFields", 'String'>
    readonly createdAt: FieldRef<"SchemaFields", 'DateTime'>
    readonly updatedAt: FieldRef<"SchemaFields", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SchemaFields findUnique
   */
  export type SchemaFieldsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * Filter, which SchemaFields to fetch.
     */
    where: SchemaFieldsWhereUniqueInput
  }

  /**
   * SchemaFields findUniqueOrThrow
   */
  export type SchemaFieldsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * Filter, which SchemaFields to fetch.
     */
    where: SchemaFieldsWhereUniqueInput
  }

  /**
   * SchemaFields findFirst
   */
  export type SchemaFieldsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * Filter, which SchemaFields to fetch.
     */
    where?: SchemaFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaFields to fetch.
     */
    orderBy?: SchemaFieldsOrderByWithRelationInput | SchemaFieldsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchemaFields.
     */
    cursor?: SchemaFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchemaFields.
     */
    distinct?: SchemaFieldsScalarFieldEnum | SchemaFieldsScalarFieldEnum[]
  }

  /**
   * SchemaFields findFirstOrThrow
   */
  export type SchemaFieldsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * Filter, which SchemaFields to fetch.
     */
    where?: SchemaFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaFields to fetch.
     */
    orderBy?: SchemaFieldsOrderByWithRelationInput | SchemaFieldsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchemaFields.
     */
    cursor?: SchemaFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchemaFields.
     */
    distinct?: SchemaFieldsScalarFieldEnum | SchemaFieldsScalarFieldEnum[]
  }

  /**
   * SchemaFields findMany
   */
  export type SchemaFieldsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * Filter, which SchemaFields to fetch.
     */
    where?: SchemaFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaFields to fetch.
     */
    orderBy?: SchemaFieldsOrderByWithRelationInput | SchemaFieldsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchemaFields.
     */
    cursor?: SchemaFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaFields.
     */
    skip?: number
    distinct?: SchemaFieldsScalarFieldEnum | SchemaFieldsScalarFieldEnum[]
  }

  /**
   * SchemaFields create
   */
  export type SchemaFieldsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * The data needed to create a SchemaFields.
     */
    data: XOR<SchemaFieldsCreateInput, SchemaFieldsUncheckedCreateInput>
  }

  /**
   * SchemaFields createMany
   */
  export type SchemaFieldsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchemaFields.
     */
    data: SchemaFieldsCreateManyInput | SchemaFieldsCreateManyInput[]
  }

  /**
   * SchemaFields createManyAndReturn
   */
  export type SchemaFieldsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * The data used to create many SchemaFields.
     */
    data: SchemaFieldsCreateManyInput | SchemaFieldsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchemaFields update
   */
  export type SchemaFieldsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * The data needed to update a SchemaFields.
     */
    data: XOR<SchemaFieldsUpdateInput, SchemaFieldsUncheckedUpdateInput>
    /**
     * Choose, which SchemaFields to update.
     */
    where: SchemaFieldsWhereUniqueInput
  }

  /**
   * SchemaFields updateMany
   */
  export type SchemaFieldsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchemaFields.
     */
    data: XOR<SchemaFieldsUpdateManyMutationInput, SchemaFieldsUncheckedUpdateManyInput>
    /**
     * Filter which SchemaFields to update
     */
    where?: SchemaFieldsWhereInput
    /**
     * Limit how many SchemaFields to update.
     */
    limit?: number
  }

  /**
   * SchemaFields updateManyAndReturn
   */
  export type SchemaFieldsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * The data used to update SchemaFields.
     */
    data: XOR<SchemaFieldsUpdateManyMutationInput, SchemaFieldsUncheckedUpdateManyInput>
    /**
     * Filter which SchemaFields to update
     */
    where?: SchemaFieldsWhereInput
    /**
     * Limit how many SchemaFields to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchemaFields upsert
   */
  export type SchemaFieldsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * The filter to search for the SchemaFields to update in case it exists.
     */
    where: SchemaFieldsWhereUniqueInput
    /**
     * In case the SchemaFields found by the `where` argument doesn't exist, create a new SchemaFields with this data.
     */
    create: XOR<SchemaFieldsCreateInput, SchemaFieldsUncheckedCreateInput>
    /**
     * In case the SchemaFields was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchemaFieldsUpdateInput, SchemaFieldsUncheckedUpdateInput>
  }

  /**
   * SchemaFields delete
   */
  export type SchemaFieldsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    /**
     * Filter which SchemaFields to delete.
     */
    where: SchemaFieldsWhereUniqueInput
  }

  /**
   * SchemaFields deleteMany
   */
  export type SchemaFieldsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchemaFields to delete
     */
    where?: SchemaFieldsWhereInput
    /**
     * Limit how many SchemaFields to delete.
     */
    limit?: number
  }

  /**
   * SchemaFields.parentField
   */
  export type SchemaFields$parentFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    where?: SchemaFieldsWhereInput
  }

  /**
   * SchemaFields.childFields
   */
  export type SchemaFields$childFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
    where?: SchemaFieldsWhereInput
    orderBy?: SchemaFieldsOrderByWithRelationInput | SchemaFieldsOrderByWithRelationInput[]
    cursor?: SchemaFieldsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchemaFieldsScalarFieldEnum | SchemaFieldsScalarFieldEnum[]
  }

  /**
   * SchemaFields without action
   */
  export type SchemaFieldsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemaFields
     */
    select?: SchemaFieldsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemaFields
     */
    omit?: SchemaFieldsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemaFieldsInclude<ExtArgs> | null
  }


  /**
   * Model TimeLog
   */

  export type AggregateTimeLog = {
    _count: TimeLogCountAggregateOutputType | null
    _avg: TimeLogAvgAggregateOutputType | null
    _sum: TimeLogSumAggregateOutputType | null
    _min: TimeLogMinAggregateOutputType | null
    _max: TimeLogMaxAggregateOutputType | null
  }

  export type TimeLogAvgAggregateOutputType = {
    duration: number | null
  }

  export type TimeLogSumAggregateOutputType = {
    duration: number | null
  }

  export type TimeLogMinAggregateOutputType = {
    id: string | null
    duration: number | null
    createdAt: Date | null
    projectId: string | null
    userId: string | null
    taskId: string | null
  }

  export type TimeLogMaxAggregateOutputType = {
    id: string | null
    duration: number | null
    createdAt: Date | null
    projectId: string | null
    userId: string | null
    taskId: string | null
  }

  export type TimeLogCountAggregateOutputType = {
    id: number
    duration: number
    createdAt: number
    projectId: number
    userId: number
    taskId: number
    _all: number
  }


  export type TimeLogAvgAggregateInputType = {
    duration?: true
  }

  export type TimeLogSumAggregateInputType = {
    duration?: true
  }

  export type TimeLogMinAggregateInputType = {
    id?: true
    duration?: true
    createdAt?: true
    projectId?: true
    userId?: true
    taskId?: true
  }

  export type TimeLogMaxAggregateInputType = {
    id?: true
    duration?: true
    createdAt?: true
    projectId?: true
    userId?: true
    taskId?: true
  }

  export type TimeLogCountAggregateInputType = {
    id?: true
    duration?: true
    createdAt?: true
    projectId?: true
    userId?: true
    taskId?: true
    _all?: true
  }

  export type TimeLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeLog to aggregate.
     */
    where?: TimeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeLogs to fetch.
     */
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimeLogs
    **/
    _count?: true | TimeLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimeLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimeLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeLogMaxAggregateInputType
  }

  export type GetTimeLogAggregateType<T extends TimeLogAggregateArgs> = {
        [P in keyof T & keyof AggregateTimeLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimeLog[P]>
      : GetScalarType<T[P], AggregateTimeLog[P]>
  }




  export type TimeLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeLogWhereInput
    orderBy?: TimeLogOrderByWithAggregationInput | TimeLogOrderByWithAggregationInput[]
    by: TimeLogScalarFieldEnum[] | TimeLogScalarFieldEnum
    having?: TimeLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeLogCountAggregateInputType | true
    _avg?: TimeLogAvgAggregateInputType
    _sum?: TimeLogSumAggregateInputType
    _min?: TimeLogMinAggregateInputType
    _max?: TimeLogMaxAggregateInputType
  }

  export type TimeLogGroupByOutputType = {
    id: string
    duration: number
    createdAt: Date
    projectId: string
    userId: string
    taskId: string | null
    _count: TimeLogCountAggregateOutputType | null
    _avg: TimeLogAvgAggregateOutputType | null
    _sum: TimeLogSumAggregateOutputType | null
    _min: TimeLogMinAggregateOutputType | null
    _max: TimeLogMaxAggregateOutputType | null
  }

  type GetTimeLogGroupByPayload<T extends TimeLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeLogGroupByOutputType[P]>
            : GetScalarType<T[P], TimeLogGroupByOutputType[P]>
        }
      >
    >


  export type TimeLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    createdAt?: boolean
    projectId?: boolean
    userId?: boolean
    taskId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TimeLog$taskArgs<ExtArgs>
  }, ExtArgs["result"]["timeLog"]>

  export type TimeLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    createdAt?: boolean
    projectId?: boolean
    userId?: boolean
    taskId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TimeLog$taskArgs<ExtArgs>
  }, ExtArgs["result"]["timeLog"]>

  export type TimeLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    createdAt?: boolean
    projectId?: boolean
    userId?: boolean
    taskId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TimeLog$taskArgs<ExtArgs>
  }, ExtArgs["result"]["timeLog"]>

  export type TimeLogSelectScalar = {
    id?: boolean
    duration?: boolean
    createdAt?: boolean
    projectId?: boolean
    userId?: boolean
    taskId?: boolean
  }

  export type TimeLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "duration" | "createdAt" | "projectId" | "userId" | "taskId", ExtArgs["result"]["timeLog"]>
  export type TimeLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TimeLog$taskArgs<ExtArgs>
  }
  export type TimeLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TimeLog$taskArgs<ExtArgs>
  }
  export type TimeLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TimeLog$taskArgs<ExtArgs>
  }

  export type $TimeLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimeLog"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TasksPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      duration: number
      createdAt: Date
      projectId: string
      userId: string
      taskId: string | null
    }, ExtArgs["result"]["timeLog"]>
    composites: {}
  }

  type TimeLogGetPayload<S extends boolean | null | undefined | TimeLogDefaultArgs> = $Result.GetResult<Prisma.$TimeLogPayload, S>

  type TimeLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TimeLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TimeLogCountAggregateInputType | true
    }

  export interface TimeLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimeLog'], meta: { name: 'TimeLog' } }
    /**
     * Find zero or one TimeLog that matches the filter.
     * @param {TimeLogFindUniqueArgs} args - Arguments to find a TimeLog
     * @example
     * // Get one TimeLog
     * const timeLog = await prisma.timeLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimeLogFindUniqueArgs>(args: SelectSubset<T, TimeLogFindUniqueArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TimeLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TimeLogFindUniqueOrThrowArgs} args - Arguments to find a TimeLog
     * @example
     * // Get one TimeLog
     * const timeLog = await prisma.timeLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimeLogFindUniqueOrThrowArgs>(args: SelectSubset<T, TimeLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimeLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogFindFirstArgs} args - Arguments to find a TimeLog
     * @example
     * // Get one TimeLog
     * const timeLog = await prisma.timeLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimeLogFindFirstArgs>(args?: SelectSubset<T, TimeLogFindFirstArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimeLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogFindFirstOrThrowArgs} args - Arguments to find a TimeLog
     * @example
     * // Get one TimeLog
     * const timeLog = await prisma.timeLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimeLogFindFirstOrThrowArgs>(args?: SelectSubset<T, TimeLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TimeLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimeLogs
     * const timeLogs = await prisma.timeLog.findMany()
     * 
     * // Get first 10 TimeLogs
     * const timeLogs = await prisma.timeLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timeLogWithIdOnly = await prisma.timeLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimeLogFindManyArgs>(args?: SelectSubset<T, TimeLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TimeLog.
     * @param {TimeLogCreateArgs} args - Arguments to create a TimeLog.
     * @example
     * // Create one TimeLog
     * const TimeLog = await prisma.timeLog.create({
     *   data: {
     *     // ... data to create a TimeLog
     *   }
     * })
     * 
     */
    create<T extends TimeLogCreateArgs>(args: SelectSubset<T, TimeLogCreateArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TimeLogs.
     * @param {TimeLogCreateManyArgs} args - Arguments to create many TimeLogs.
     * @example
     * // Create many TimeLogs
     * const timeLog = await prisma.timeLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimeLogCreateManyArgs>(args?: SelectSubset<T, TimeLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimeLogs and returns the data saved in the database.
     * @param {TimeLogCreateManyAndReturnArgs} args - Arguments to create many TimeLogs.
     * @example
     * // Create many TimeLogs
     * const timeLog = await prisma.timeLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimeLogs and only return the `id`
     * const timeLogWithIdOnly = await prisma.timeLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimeLogCreateManyAndReturnArgs>(args?: SelectSubset<T, TimeLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TimeLog.
     * @param {TimeLogDeleteArgs} args - Arguments to delete one TimeLog.
     * @example
     * // Delete one TimeLog
     * const TimeLog = await prisma.timeLog.delete({
     *   where: {
     *     // ... filter to delete one TimeLog
     *   }
     * })
     * 
     */
    delete<T extends TimeLogDeleteArgs>(args: SelectSubset<T, TimeLogDeleteArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TimeLog.
     * @param {TimeLogUpdateArgs} args - Arguments to update one TimeLog.
     * @example
     * // Update one TimeLog
     * const timeLog = await prisma.timeLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimeLogUpdateArgs>(args: SelectSubset<T, TimeLogUpdateArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TimeLogs.
     * @param {TimeLogDeleteManyArgs} args - Arguments to filter TimeLogs to delete.
     * @example
     * // Delete a few TimeLogs
     * const { count } = await prisma.timeLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimeLogDeleteManyArgs>(args?: SelectSubset<T, TimeLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimeLogs
     * const timeLog = await prisma.timeLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimeLogUpdateManyArgs>(args: SelectSubset<T, TimeLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeLogs and returns the data updated in the database.
     * @param {TimeLogUpdateManyAndReturnArgs} args - Arguments to update many TimeLogs.
     * @example
     * // Update many TimeLogs
     * const timeLog = await prisma.timeLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TimeLogs and only return the `id`
     * const timeLogWithIdOnly = await prisma.timeLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TimeLogUpdateManyAndReturnArgs>(args: SelectSubset<T, TimeLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TimeLog.
     * @param {TimeLogUpsertArgs} args - Arguments to update or create a TimeLog.
     * @example
     * // Update or create a TimeLog
     * const timeLog = await prisma.timeLog.upsert({
     *   create: {
     *     // ... data to create a TimeLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimeLog we want to update
     *   }
     * })
     */
    upsert<T extends TimeLogUpsertArgs>(args: SelectSubset<T, TimeLogUpsertArgs<ExtArgs>>): Prisma__TimeLogClient<$Result.GetResult<Prisma.$TimeLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TimeLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogCountArgs} args - Arguments to filter TimeLogs to count.
     * @example
     * // Count the number of TimeLogs
     * const count = await prisma.timeLog.count({
     *   where: {
     *     // ... the filter for the TimeLogs we want to count
     *   }
     * })
    **/
    count<T extends TimeLogCountArgs>(
      args?: Subset<T, TimeLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimeLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeLogAggregateArgs>(args: Subset<T, TimeLogAggregateArgs>): Prisma.PrismaPromise<GetTimeLogAggregateType<T>>

    /**
     * Group by TimeLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeLogGroupByArgs['orderBy'] }
        : { orderBy?: TimeLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimeLog model
   */
  readonly fields: TimeLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimeLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task<T extends TimeLog$taskArgs<ExtArgs> = {}>(args?: Subset<T, TimeLog$taskArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimeLog model
   */
  interface TimeLogFieldRefs {
    readonly id: FieldRef<"TimeLog", 'String'>
    readonly duration: FieldRef<"TimeLog", 'Int'>
    readonly createdAt: FieldRef<"TimeLog", 'DateTime'>
    readonly projectId: FieldRef<"TimeLog", 'String'>
    readonly userId: FieldRef<"TimeLog", 'String'>
    readonly taskId: FieldRef<"TimeLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TimeLog findUnique
   */
  export type TimeLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * Filter, which TimeLog to fetch.
     */
    where: TimeLogWhereUniqueInput
  }

  /**
   * TimeLog findUniqueOrThrow
   */
  export type TimeLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * Filter, which TimeLog to fetch.
     */
    where: TimeLogWhereUniqueInput
  }

  /**
   * TimeLog findFirst
   */
  export type TimeLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * Filter, which TimeLog to fetch.
     */
    where?: TimeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeLogs to fetch.
     */
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeLogs.
     */
    cursor?: TimeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeLogs.
     */
    distinct?: TimeLogScalarFieldEnum | TimeLogScalarFieldEnum[]
  }

  /**
   * TimeLog findFirstOrThrow
   */
  export type TimeLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * Filter, which TimeLog to fetch.
     */
    where?: TimeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeLogs to fetch.
     */
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeLogs.
     */
    cursor?: TimeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeLogs.
     */
    distinct?: TimeLogScalarFieldEnum | TimeLogScalarFieldEnum[]
  }

  /**
   * TimeLog findMany
   */
  export type TimeLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * Filter, which TimeLogs to fetch.
     */
    where?: TimeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeLogs to fetch.
     */
    orderBy?: TimeLogOrderByWithRelationInput | TimeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimeLogs.
     */
    cursor?: TimeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeLogs.
     */
    skip?: number
    distinct?: TimeLogScalarFieldEnum | TimeLogScalarFieldEnum[]
  }

  /**
   * TimeLog create
   */
  export type TimeLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * The data needed to create a TimeLog.
     */
    data: XOR<TimeLogCreateInput, TimeLogUncheckedCreateInput>
  }

  /**
   * TimeLog createMany
   */
  export type TimeLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimeLogs.
     */
    data: TimeLogCreateManyInput | TimeLogCreateManyInput[]
  }

  /**
   * TimeLog createManyAndReturn
   */
  export type TimeLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * The data used to create many TimeLogs.
     */
    data: TimeLogCreateManyInput | TimeLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeLog update
   */
  export type TimeLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * The data needed to update a TimeLog.
     */
    data: XOR<TimeLogUpdateInput, TimeLogUncheckedUpdateInput>
    /**
     * Choose, which TimeLog to update.
     */
    where: TimeLogWhereUniqueInput
  }

  /**
   * TimeLog updateMany
   */
  export type TimeLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimeLogs.
     */
    data: XOR<TimeLogUpdateManyMutationInput, TimeLogUncheckedUpdateManyInput>
    /**
     * Filter which TimeLogs to update
     */
    where?: TimeLogWhereInput
    /**
     * Limit how many TimeLogs to update.
     */
    limit?: number
  }

  /**
   * TimeLog updateManyAndReturn
   */
  export type TimeLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * The data used to update TimeLogs.
     */
    data: XOR<TimeLogUpdateManyMutationInput, TimeLogUncheckedUpdateManyInput>
    /**
     * Filter which TimeLogs to update
     */
    where?: TimeLogWhereInput
    /**
     * Limit how many TimeLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeLog upsert
   */
  export type TimeLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * The filter to search for the TimeLog to update in case it exists.
     */
    where: TimeLogWhereUniqueInput
    /**
     * In case the TimeLog found by the `where` argument doesn't exist, create a new TimeLog with this data.
     */
    create: XOR<TimeLogCreateInput, TimeLogUncheckedCreateInput>
    /**
     * In case the TimeLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeLogUpdateInput, TimeLogUncheckedUpdateInput>
  }

  /**
   * TimeLog delete
   */
  export type TimeLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
    /**
     * Filter which TimeLog to delete.
     */
    where: TimeLogWhereUniqueInput
  }

  /**
   * TimeLog deleteMany
   */
  export type TimeLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeLogs to delete
     */
    where?: TimeLogWhereInput
    /**
     * Limit how many TimeLogs to delete.
     */
    limit?: number
  }

  /**
   * TimeLog.task
   */
  export type TimeLog$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
  }

  /**
   * TimeLog without action
   */
  export type TimeLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeLog
     */
    select?: TimeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeLog
     */
    omit?: TimeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeLogInclude<ExtArgs> | null
  }


  /**
   * Model Comments
   */

  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    order: number | null
  }

  export type CommentsSumAggregateOutputType = {
    order: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
    thema: string | null
    authorId: string | null
    parentCommentId: string | null
    featureId: string | null
    userStoryId: string | null
    taskId: string | null
    sprintId: string | null
    roadMapId: string | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
    thema: string | null
    authorId: string | null
    parentCommentId: string | null
    featureId: string | null
    userStoryId: string | null
    taskId: string | null
    sprintId: string | null
    roadMapId: string | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    title: number
    content: number
    order: number
    createdAt: number
    updatedAt: number
    thema: number
    authorId: number
    parentCommentId: number
    featureId: number
    userStoryId: number
    taskId: number
    sprintId: number
    roadMapId: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    order?: true
  }

  export type CommentsSumAggregateInputType = {
    order?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    thema?: true
    authorId?: true
    parentCommentId?: true
    featureId?: true
    userStoryId?: true
    taskId?: true
    sprintId?: true
    roadMapId?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    thema?: true
    authorId?: true
    parentCommentId?: true
    featureId?: true
    userStoryId?: true
    taskId?: true
    sprintId?: true
    roadMapId?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    thema?: true
    authorId?: true
    parentCommentId?: true
    featureId?: true
    userStoryId?: true
    taskId?: true
    sprintId?: true
    roadMapId?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to aggregate.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithAggregationInput | CommentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }

  export type CommentsGroupByOutputType = {
    id: string
    title: string
    content: string
    order: number
    createdAt: Date
    updatedAt: Date
    thema: string | null
    authorId: string
    parentCommentId: string | null
    featureId: string | null
    userStoryId: string | null
    taskId: string | null
    sprintId: string | null
    roadMapId: string | null
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type CommentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    thema?: boolean
    authorId?: boolean
    parentCommentId?: boolean
    featureId?: boolean
    userStoryId?: boolean
    taskId?: boolean
    sprintId?: boolean
    roadMapId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | Comments$parentCommentArgs<ExtArgs>
    childComments?: boolean | Comments$childCommentsArgs<ExtArgs>
    feature?: boolean | Comments$featureArgs<ExtArgs>
    userStory?: boolean | Comments$userStoryArgs<ExtArgs>
    task?: boolean | Comments$taskArgs<ExtArgs>
    sprint?: boolean | Comments$sprintArgs<ExtArgs>
    roadMap?: boolean | Comments$roadMapArgs<ExtArgs>
    _count?: boolean | CommentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    thema?: boolean
    authorId?: boolean
    parentCommentId?: boolean
    featureId?: boolean
    userStoryId?: boolean
    taskId?: boolean
    sprintId?: boolean
    roadMapId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | Comments$parentCommentArgs<ExtArgs>
    feature?: boolean | Comments$featureArgs<ExtArgs>
    userStory?: boolean | Comments$userStoryArgs<ExtArgs>
    task?: boolean | Comments$taskArgs<ExtArgs>
    sprint?: boolean | Comments$sprintArgs<ExtArgs>
    roadMap?: boolean | Comments$roadMapArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    thema?: boolean
    authorId?: boolean
    parentCommentId?: boolean
    featureId?: boolean
    userStoryId?: boolean
    taskId?: boolean
    sprintId?: boolean
    roadMapId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | Comments$parentCommentArgs<ExtArgs>
    feature?: boolean | Comments$featureArgs<ExtArgs>
    userStory?: boolean | Comments$userStoryArgs<ExtArgs>
    task?: boolean | Comments$taskArgs<ExtArgs>
    sprint?: boolean | Comments$sprintArgs<ExtArgs>
    roadMap?: boolean | Comments$roadMapArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    thema?: boolean
    authorId?: boolean
    parentCommentId?: boolean
    featureId?: boolean
    userStoryId?: boolean
    taskId?: boolean
    sprintId?: boolean
    roadMapId?: boolean
  }

  export type CommentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "order" | "createdAt" | "updatedAt" | "thema" | "authorId" | "parentCommentId" | "featureId" | "userStoryId" | "taskId" | "sprintId" | "roadMapId", ExtArgs["result"]["comments"]>
  export type CommentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | Comments$parentCommentArgs<ExtArgs>
    childComments?: boolean | Comments$childCommentsArgs<ExtArgs>
    feature?: boolean | Comments$featureArgs<ExtArgs>
    userStory?: boolean | Comments$userStoryArgs<ExtArgs>
    task?: boolean | Comments$taskArgs<ExtArgs>
    sprint?: boolean | Comments$sprintArgs<ExtArgs>
    roadMap?: boolean | Comments$roadMapArgs<ExtArgs>
    _count?: boolean | CommentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | Comments$parentCommentArgs<ExtArgs>
    feature?: boolean | Comments$featureArgs<ExtArgs>
    userStory?: boolean | Comments$userStoryArgs<ExtArgs>
    task?: boolean | Comments$taskArgs<ExtArgs>
    sprint?: boolean | Comments$sprintArgs<ExtArgs>
    roadMap?: boolean | Comments$roadMapArgs<ExtArgs>
  }
  export type CommentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | Comments$parentCommentArgs<ExtArgs>
    feature?: boolean | Comments$featureArgs<ExtArgs>
    userStory?: boolean | Comments$userStoryArgs<ExtArgs>
    task?: boolean | Comments$taskArgs<ExtArgs>
    sprint?: boolean | Comments$sprintArgs<ExtArgs>
    roadMap?: boolean | Comments$roadMapArgs<ExtArgs>
  }

  export type $CommentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comments"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      parentComment: Prisma.$CommentsPayload<ExtArgs> | null
      childComments: Prisma.$CommentsPayload<ExtArgs>[]
      feature: Prisma.$FeaturesPayload<ExtArgs> | null
      userStory: Prisma.$UserStoryPayload<ExtArgs> | null
      task: Prisma.$TasksPayload<ExtArgs> | null
      sprint: Prisma.$SprintsPayload<ExtArgs> | null
      roadMap: Prisma.$RoadMapPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      order: number
      createdAt: Date
      updatedAt: Date
      thema: string | null
      authorId: string
      parentCommentId: string | null
      featureId: string | null
      userStoryId: string | null
      taskId: string | null
      sprintId: string | null
      roadMapId: string | null
    }, ExtArgs["result"]["comments"]>
    composites: {}
  }

  type CommentsGetPayload<S extends boolean | null | undefined | CommentsDefaultArgs> = $Result.GetResult<Prisma.$CommentsPayload, S>

  type CommentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface CommentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comments'], meta: { name: 'Comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentsFindUniqueArgs>(args: SelectSubset<T, CommentsFindUniqueArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentsFindFirstArgs>(args?: SelectSubset<T, CommentsFindFirstArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentsFindManyArgs>(args?: SelectSubset<T, CommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
     */
    create<T extends CommentsCreateArgs>(args: SelectSubset<T, CommentsCreateArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comments = await prisma.comments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentsCreateManyArgs>(args?: SelectSubset<T, CommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentsCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comments = await prisma.comments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentsWithIdOnly = await prisma.comments.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentsCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
     */
    delete<T extends CommentsDeleteArgs>(args: SelectSubset<T, CommentsDeleteArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentsUpdateArgs>(args: SelectSubset<T, CommentsUpdateArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentsDeleteManyArgs>(args?: SelectSubset<T, CommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentsUpdateManyArgs>(args: SelectSubset<T, CommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentsUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentsWithIdOnly = await prisma.comments.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentsUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
     */
    upsert<T extends CommentsUpsertArgs>(args: SelectSubset<T, CommentsUpsertArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comments model
   */
  readonly fields: CommentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parentComment<T extends Comments$parentCommentArgs<ExtArgs> = {}>(args?: Subset<T, Comments$parentCommentArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childComments<T extends Comments$childCommentsArgs<ExtArgs> = {}>(args?: Subset<T, Comments$childCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feature<T extends Comments$featureArgs<ExtArgs> = {}>(args?: Subset<T, Comments$featureArgs<ExtArgs>>): Prisma__FeaturesClient<$Result.GetResult<Prisma.$FeaturesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userStory<T extends Comments$userStoryArgs<ExtArgs> = {}>(args?: Subset<T, Comments$userStoryArgs<ExtArgs>>): Prisma__UserStoryClient<$Result.GetResult<Prisma.$UserStoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends Comments$taskArgs<ExtArgs> = {}>(args?: Subset<T, Comments$taskArgs<ExtArgs>>): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sprint<T extends Comments$sprintArgs<ExtArgs> = {}>(args?: Subset<T, Comments$sprintArgs<ExtArgs>>): Prisma__SprintsClient<$Result.GetResult<Prisma.$SprintsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    roadMap<T extends Comments$roadMapArgs<ExtArgs> = {}>(args?: Subset<T, Comments$roadMapArgs<ExtArgs>>): Prisma__RoadMapClient<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comments model
   */
  interface CommentsFieldRefs {
    readonly id: FieldRef<"Comments", 'String'>
    readonly title: FieldRef<"Comments", 'String'>
    readonly content: FieldRef<"Comments", 'String'>
    readonly order: FieldRef<"Comments", 'Int'>
    readonly createdAt: FieldRef<"Comments", 'DateTime'>
    readonly updatedAt: FieldRef<"Comments", 'DateTime'>
    readonly thema: FieldRef<"Comments", 'String'>
    readonly authorId: FieldRef<"Comments", 'String'>
    readonly parentCommentId: FieldRef<"Comments", 'String'>
    readonly featureId: FieldRef<"Comments", 'String'>
    readonly userStoryId: FieldRef<"Comments", 'String'>
    readonly taskId: FieldRef<"Comments", 'String'>
    readonly sprintId: FieldRef<"Comments", 'String'>
    readonly roadMapId: FieldRef<"Comments", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comments findUnique
   */
  export type CommentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findUniqueOrThrow
   */
  export type CommentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findFirst
   */
  export type CommentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findFirstOrThrow
   */
  export type CommentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments create
   */
  export type CommentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Comments.
     */
    data: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }

  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
  }

  /**
   * Comments createManyAndReturn
   */
  export type CommentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comments update
   */
  export type CommentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Comments.
     */
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentsWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comments updateManyAndReturn
   */
  export type CommentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentsWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Comments to update in case it exists.
     */
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     */
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }

  /**
   * Comments delete
   */
  export type CommentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter which Comments to delete.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentsWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comments.parentComment
   */
  export type Comments$parentCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
  }

  /**
   * Comments.childComments
   */
  export type Comments$childCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments.feature
   */
  export type Comments$featureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Features
     */
    select?: FeaturesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Features
     */
    omit?: FeaturesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeaturesInclude<ExtArgs> | null
    where?: FeaturesWhereInput
  }

  /**
   * Comments.userStory
   */
  export type Comments$userStoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStory
     */
    select?: UserStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStory
     */
    omit?: UserStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStoryInclude<ExtArgs> | null
    where?: UserStoryWhereInput
  }

  /**
   * Comments.task
   */
  export type Comments$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tasks
     */
    omit?: TasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
  }

  /**
   * Comments.sprint
   */
  export type Comments$sprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprints
     */
    select?: SprintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprints
     */
    omit?: SprintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintsInclude<ExtArgs> | null
    where?: SprintsWhereInput
  }

  /**
   * Comments.roadMap
   */
  export type Comments$roadMapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
  }

  /**
   * Comments without action
   */
  export type CommentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comments
     */
    omit?: CommentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
  }


  /**
   * Model Files
   */

  export type AggregateFiles = {
    _count: FilesCountAggregateOutputType | null
    _avg: FilesAvgAggregateOutputType | null
    _sum: FilesSumAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  export type FilesAvgAggregateOutputType = {
    order: number | null
    devorder: number | null
  }

  export type FilesSumAggregateOutputType = {
    order: number | null
    devorder: number | null
  }

  export type FilesMinAggregateOutputType = {
    id: string | null
    name: string | null
    extension: string | null
    url: string | null
    category: string | null
    type: $Enums.FileType | null
    description: string | null
    fonctionnalities: string | null
    import: string | null
    export: string | null
    useby: string | null
    script: string | null
    version: string | null
    order: number | null
    devorder: number | null
    status: $Enums.Status | null
    createdAt: Date | null
    creator: string | null
    projectId: string | null
    uploaderId: string | null
    parentFileId: string | null
  }

  export type FilesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    extension: string | null
    url: string | null
    category: string | null
    type: $Enums.FileType | null
    description: string | null
    fonctionnalities: string | null
    import: string | null
    export: string | null
    useby: string | null
    script: string | null
    version: string | null
    order: number | null
    devorder: number | null
    status: $Enums.Status | null
    createdAt: Date | null
    creator: string | null
    projectId: string | null
    uploaderId: string | null
    parentFileId: string | null
  }

  export type FilesCountAggregateOutputType = {
    id: number
    name: number
    extension: number
    url: number
    category: number
    type: number
    description: number
    fonctionnalities: number
    import: number
    export: number
    useby: number
    script: number
    version: number
    order: number
    devorder: number
    status: number
    createdAt: number
    creator: number
    projectId: number
    uploaderId: number
    parentFileId: number
    _all: number
  }


  export type FilesAvgAggregateInputType = {
    order?: true
    devorder?: true
  }

  export type FilesSumAggregateInputType = {
    order?: true
    devorder?: true
  }

  export type FilesMinAggregateInputType = {
    id?: true
    name?: true
    extension?: true
    url?: true
    category?: true
    type?: true
    description?: true
    fonctionnalities?: true
    import?: true
    export?: true
    useby?: true
    script?: true
    version?: true
    order?: true
    devorder?: true
    status?: true
    createdAt?: true
    creator?: true
    projectId?: true
    uploaderId?: true
    parentFileId?: true
  }

  export type FilesMaxAggregateInputType = {
    id?: true
    name?: true
    extension?: true
    url?: true
    category?: true
    type?: true
    description?: true
    fonctionnalities?: true
    import?: true
    export?: true
    useby?: true
    script?: true
    version?: true
    order?: true
    devorder?: true
    status?: true
    createdAt?: true
    creator?: true
    projectId?: true
    uploaderId?: true
    parentFileId?: true
  }

  export type FilesCountAggregateInputType = {
    id?: true
    name?: true
    extension?: true
    url?: true
    category?: true
    type?: true
    description?: true
    fonctionnalities?: true
    import?: true
    export?: true
    useby?: true
    script?: true
    version?: true
    order?: true
    devorder?: true
    status?: true
    createdAt?: true
    creator?: true
    projectId?: true
    uploaderId?: true
    parentFileId?: true
    _all?: true
  }

  export type FilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to aggregate.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilesMaxAggregateInputType
  }

  export type GetFilesAggregateType<T extends FilesAggregateArgs> = {
        [P in keyof T & keyof AggregateFiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiles[P]>
      : GetScalarType<T[P], AggregateFiles[P]>
  }




  export type FilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithAggregationInput | FilesOrderByWithAggregationInput[]
    by: FilesScalarFieldEnum[] | FilesScalarFieldEnum
    having?: FilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilesCountAggregateInputType | true
    _avg?: FilesAvgAggregateInputType
    _sum?: FilesSumAggregateInputType
    _min?: FilesMinAggregateInputType
    _max?: FilesMaxAggregateInputType
  }

  export type FilesGroupByOutputType = {
    id: string
    name: string
    extension: string | null
    url: string
    category: string
    type: $Enums.FileType
    description: string | null
    fonctionnalities: string | null
    import: string | null
    export: string | null
    useby: string | null
    script: string | null
    version: string | null
    order: number
    devorder: number
    status: $Enums.Status
    createdAt: Date
    creator: string | null
    projectId: string
    uploaderId: string
    parentFileId: string | null
    _count: FilesCountAggregateOutputType | null
    _avg: FilesAvgAggregateOutputType | null
    _sum: FilesSumAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  type GetFilesGroupByPayload<T extends FilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilesGroupByOutputType[P]>
            : GetScalarType<T[P], FilesGroupByOutputType[P]>
        }
      >
    >


  export type FilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    extension?: boolean
    url?: boolean
    category?: boolean
    type?: boolean
    description?: boolean
    fonctionnalities?: boolean
    import?: boolean
    export?: boolean
    useby?: boolean
    script?: boolean
    version?: boolean
    order?: boolean
    devorder?: boolean
    status?: boolean
    createdAt?: boolean
    creator?: boolean
    projectId?: boolean
    uploaderId?: boolean
    parentFileId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    parentFile?: boolean | Files$parentFileArgs<ExtArgs>
    childFiles?: boolean | Files$childFilesArgs<ExtArgs>
    roadMaps?: boolean | Files$roadMapsArgs<ExtArgs>
    _count?: boolean | FilesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["files"]>

  export type FilesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    extension?: boolean
    url?: boolean
    category?: boolean
    type?: boolean
    description?: boolean
    fonctionnalities?: boolean
    import?: boolean
    export?: boolean
    useby?: boolean
    script?: boolean
    version?: boolean
    order?: boolean
    devorder?: boolean
    status?: boolean
    createdAt?: boolean
    creator?: boolean
    projectId?: boolean
    uploaderId?: boolean
    parentFileId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    parentFile?: boolean | Files$parentFileArgs<ExtArgs>
  }, ExtArgs["result"]["files"]>

  export type FilesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    extension?: boolean
    url?: boolean
    category?: boolean
    type?: boolean
    description?: boolean
    fonctionnalities?: boolean
    import?: boolean
    export?: boolean
    useby?: boolean
    script?: boolean
    version?: boolean
    order?: boolean
    devorder?: boolean
    status?: boolean
    createdAt?: boolean
    creator?: boolean
    projectId?: boolean
    uploaderId?: boolean
    parentFileId?: boolean
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    parentFile?: boolean | Files$parentFileArgs<ExtArgs>
  }, ExtArgs["result"]["files"]>

  export type FilesSelectScalar = {
    id?: boolean
    name?: boolean
    extension?: boolean
    url?: boolean
    category?: boolean
    type?: boolean
    description?: boolean
    fonctionnalities?: boolean
    import?: boolean
    export?: boolean
    useby?: boolean
    script?: boolean
    version?: boolean
    order?: boolean
    devorder?: boolean
    status?: boolean
    createdAt?: boolean
    creator?: boolean
    projectId?: boolean
    uploaderId?: boolean
    parentFileId?: boolean
  }

  export type FilesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "extension" | "url" | "category" | "type" | "description" | "fonctionnalities" | "import" | "export" | "useby" | "script" | "version" | "order" | "devorder" | "status" | "createdAt" | "creator" | "projectId" | "uploaderId" | "parentFileId", ExtArgs["result"]["files"]>
  export type FilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    parentFile?: boolean | Files$parentFileArgs<ExtArgs>
    childFiles?: boolean | Files$childFilesArgs<ExtArgs>
    roadMaps?: boolean | Files$roadMapsArgs<ExtArgs>
    _count?: boolean | FilesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FilesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    parentFile?: boolean | Files$parentFileArgs<ExtArgs>
  }
  export type FilesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectsDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    parentFile?: boolean | Files$parentFileArgs<ExtArgs>
  }

  export type $FilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Files"
    objects: {
      project: Prisma.$ProjectsPayload<ExtArgs>
      uploader: Prisma.$UserPayload<ExtArgs>
      parentFile: Prisma.$FilesPayload<ExtArgs> | null
      childFiles: Prisma.$FilesPayload<ExtArgs>[]
      roadMaps: Prisma.$RoadMapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      extension: string | null
      url: string
      category: string
      type: $Enums.FileType
      description: string | null
      fonctionnalities: string | null
      import: string | null
      export: string | null
      useby: string | null
      script: string | null
      version: string | null
      order: number
      devorder: number
      status: $Enums.Status
      createdAt: Date
      creator: string | null
      projectId: string
      uploaderId: string
      parentFileId: string | null
    }, ExtArgs["result"]["files"]>
    composites: {}
  }

  type FilesGetPayload<S extends boolean | null | undefined | FilesDefaultArgs> = $Result.GetResult<Prisma.$FilesPayload, S>

  type FilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FilesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FilesCountAggregateInputType | true
    }

  export interface FilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Files'], meta: { name: 'Files' } }
    /**
     * Find zero or one Files that matches the filter.
     * @param {FilesFindUniqueArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FilesFindUniqueArgs>(args: SelectSubset<T, FilesFindUniqueArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Files that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FilesFindUniqueOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FilesFindUniqueOrThrowArgs>(args: SelectSubset<T, FilesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesFindFirstArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FilesFindFirstArgs>(args?: SelectSubset<T, FilesFindFirstArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Files that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesFindFirstOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FilesFindFirstOrThrowArgs>(args?: SelectSubset<T, FilesFindFirstOrThrowArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.files.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.files.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filesWithIdOnly = await prisma.files.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FilesFindManyArgs>(args?: SelectSubset<T, FilesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Files.
     * @param {FilesCreateArgs} args - Arguments to create a Files.
     * @example
     * // Create one Files
     * const Files = await prisma.files.create({
     *   data: {
     *     // ... data to create a Files
     *   }
     * })
     * 
     */
    create<T extends FilesCreateArgs>(args: SelectSubset<T, FilesCreateArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FilesCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const files = await prisma.files.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FilesCreateManyArgs>(args?: SelectSubset<T, FilesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FilesCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const files = await prisma.files.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const filesWithIdOnly = await prisma.files.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FilesCreateManyAndReturnArgs>(args?: SelectSubset<T, FilesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Files.
     * @param {FilesDeleteArgs} args - Arguments to delete one Files.
     * @example
     * // Delete one Files
     * const Files = await prisma.files.delete({
     *   where: {
     *     // ... filter to delete one Files
     *   }
     * })
     * 
     */
    delete<T extends FilesDeleteArgs>(args: SelectSubset<T, FilesDeleteArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Files.
     * @param {FilesUpdateArgs} args - Arguments to update one Files.
     * @example
     * // Update one Files
     * const files = await prisma.files.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FilesUpdateArgs>(args: SelectSubset<T, FilesUpdateArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FilesDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.files.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FilesDeleteManyArgs>(args?: SelectSubset<T, FilesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const files = await prisma.files.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FilesUpdateManyArgs>(args: SelectSubset<T, FilesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FilesUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const files = await prisma.files.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const filesWithIdOnly = await prisma.files.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FilesUpdateManyAndReturnArgs>(args: SelectSubset<T, FilesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Files.
     * @param {FilesUpsertArgs} args - Arguments to update or create a Files.
     * @example
     * // Update or create a Files
     * const files = await prisma.files.upsert({
     *   create: {
     *     // ... data to create a Files
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Files we want to update
     *   }
     * })
     */
    upsert<T extends FilesUpsertArgs>(args: SelectSubset<T, FilesUpsertArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.files.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FilesCountArgs>(
      args?: Subset<T, FilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilesAggregateArgs>(args: Subset<T, FilesAggregateArgs>): Prisma.PrismaPromise<GetFilesAggregateType<T>>

    /**
     * Group by Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilesGroupByArgs['orderBy'] }
        : { orderBy?: FilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Files model
   */
  readonly fields: FilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Files.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parentFile<T extends Files$parentFileArgs<ExtArgs> = {}>(args?: Subset<T, Files$parentFileArgs<ExtArgs>>): Prisma__FilesClient<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childFiles<T extends Files$childFilesArgs<ExtArgs> = {}>(args?: Subset<T, Files$childFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roadMaps<T extends Files$roadMapsArgs<ExtArgs> = {}>(args?: Subset<T, Files$roadMapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Files model
   */
  interface FilesFieldRefs {
    readonly id: FieldRef<"Files", 'String'>
    readonly name: FieldRef<"Files", 'String'>
    readonly extension: FieldRef<"Files", 'String'>
    readonly url: FieldRef<"Files", 'String'>
    readonly category: FieldRef<"Files", 'String'>
    readonly type: FieldRef<"Files", 'FileType'>
    readonly description: FieldRef<"Files", 'String'>
    readonly fonctionnalities: FieldRef<"Files", 'String'>
    readonly import: FieldRef<"Files", 'String'>
    readonly export: FieldRef<"Files", 'String'>
    readonly useby: FieldRef<"Files", 'String'>
    readonly script: FieldRef<"Files", 'String'>
    readonly version: FieldRef<"Files", 'String'>
    readonly order: FieldRef<"Files", 'Int'>
    readonly devorder: FieldRef<"Files", 'Int'>
    readonly status: FieldRef<"Files", 'Status'>
    readonly createdAt: FieldRef<"Files", 'DateTime'>
    readonly creator: FieldRef<"Files", 'String'>
    readonly projectId: FieldRef<"Files", 'String'>
    readonly uploaderId: FieldRef<"Files", 'String'>
    readonly parentFileId: FieldRef<"Files", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Files findUnique
   */
  export type FilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files findUniqueOrThrow
   */
  export type FilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files findFirst
   */
  export type FilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files findFirstOrThrow
   */
  export type FilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files findMany
   */
  export type FilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files create
   */
  export type FilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * The data needed to create a Files.
     */
    data: XOR<FilesCreateInput, FilesUncheckedCreateInput>
  }

  /**
   * Files createMany
   */
  export type FilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FilesCreateManyInput | FilesCreateManyInput[]
  }

  /**
   * Files createManyAndReturn
   */
  export type FilesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FilesCreateManyInput | FilesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Files update
   */
  export type FilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * The data needed to update a Files.
     */
    data: XOR<FilesUpdateInput, FilesUncheckedUpdateInput>
    /**
     * Choose, which Files to update.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files updateMany
   */
  export type FilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FilesWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * Files updateManyAndReturn
   */
  export type FilesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FilesWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Files upsert
   */
  export type FilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * The filter to search for the Files to update in case it exists.
     */
    where: FilesWhereUniqueInput
    /**
     * In case the Files found by the `where` argument doesn't exist, create a new Files with this data.
     */
    create: XOR<FilesCreateInput, FilesUncheckedCreateInput>
    /**
     * In case the Files was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FilesUpdateInput, FilesUncheckedUpdateInput>
  }

  /**
   * Files delete
   */
  export type FilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    /**
     * Filter which Files to delete.
     */
    where: FilesWhereUniqueInput
  }

  /**
   * Files deleteMany
   */
  export type FilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FilesWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * Files.parentFile
   */
  export type Files$parentFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
  }

  /**
   * Files.childFiles
   */
  export type Files$childFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
    where?: FilesWhereInput
    orderBy?: FilesOrderByWithRelationInput | FilesOrderByWithRelationInput[]
    cursor?: FilesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilesScalarFieldEnum | FilesScalarFieldEnum[]
  }

  /**
   * Files.roadMaps
   */
  export type Files$roadMapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadMap
     */
    select?: RoadMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadMap
     */
    omit?: RoadMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadMapInclude<ExtArgs> | null
    where?: RoadMapWhereInput
    orderBy?: RoadMapOrderByWithRelationInput | RoadMapOrderByWithRelationInput[]
    cursor?: RoadMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadMapScalarFieldEnum | RoadMapScalarFieldEnum[]
  }

  /**
   * Files without action
   */
  export type FilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Files
     */
    select?: FilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Files
     */
    omit?: FilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FilesInclude<ExtArgs> | null
  }


  /**
   * Model ActivityLogs
   */

  export type AggregateActivityLogs = {
    _count: ActivityLogsCountAggregateOutputType | null
    _min: ActivityLogsMinAggregateOutputType | null
    _max: ActivityLogsMaxAggregateOutputType | null
  }

  export type ActivityLogsMinAggregateOutputType = {
    id: string | null
    type: $Enums.ActionType | null
    message: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type ActivityLogsMaxAggregateOutputType = {
    id: string | null
    type: $Enums.ActionType | null
    message: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type ActivityLogsCountAggregateOutputType = {
    id: number
    type: number
    message: number
    createdAt: number
    userId: number
    _all: number
  }


  export type ActivityLogsMinAggregateInputType = {
    id?: true
    type?: true
    message?: true
    createdAt?: true
    userId?: true
  }

  export type ActivityLogsMaxAggregateInputType = {
    id?: true
    type?: true
    message?: true
    createdAt?: true
    userId?: true
  }

  export type ActivityLogsCountAggregateInputType = {
    id?: true
    type?: true
    message?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type ActivityLogsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to aggregate.
     */
    where?: ActivityLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogsOrderByWithRelationInput | ActivityLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLogs
    **/
    _count?: true | ActivityLogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLogsMaxAggregateInputType
  }

  export type GetActivityLogsAggregateType<T extends ActivityLogsAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLogs[P]>
      : GetScalarType<T[P], AggregateActivityLogs[P]>
  }




  export type ActivityLogsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogsWhereInput
    orderBy?: ActivityLogsOrderByWithAggregationInput | ActivityLogsOrderByWithAggregationInput[]
    by: ActivityLogsScalarFieldEnum[] | ActivityLogsScalarFieldEnum
    having?: ActivityLogsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLogsCountAggregateInputType | true
    _min?: ActivityLogsMinAggregateInputType
    _max?: ActivityLogsMaxAggregateInputType
  }

  export type ActivityLogsGroupByOutputType = {
    id: string
    type: $Enums.ActionType
    message: string
    createdAt: Date
    userId: string
    _count: ActivityLogsCountAggregateOutputType | null
    _min: ActivityLogsMinAggregateOutputType | null
    _max: ActivityLogsMaxAggregateOutputType | null
  }

  type GetActivityLogsGroupByPayload<T extends ActivityLogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLogsGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLogsGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLogsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLogs"]>

  export type ActivityLogsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLogs"]>

  export type ActivityLogsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLogs"]>

  export type ActivityLogsSelectScalar = {
    id?: boolean
    type?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type ActivityLogsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "message" | "createdAt" | "userId", ExtArgs["result"]["activityLogs"]>
  export type ActivityLogsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityLogsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityLogsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivityLogsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLogs"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.ActionType
      message: string
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["activityLogs"]>
    composites: {}
  }

  type ActivityLogsGetPayload<S extends boolean | null | undefined | ActivityLogsDefaultArgs> = $Result.GetResult<Prisma.$ActivityLogsPayload, S>

  type ActivityLogsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityLogsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityLogsCountAggregateInputType | true
    }

  export interface ActivityLogsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLogs'], meta: { name: 'ActivityLogs' } }
    /**
     * Find zero or one ActivityLogs that matches the filter.
     * @param {ActivityLogsFindUniqueArgs} args - Arguments to find a ActivityLogs
     * @example
     * // Get one ActivityLogs
     * const activityLogs = await prisma.activityLogs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLogsFindUniqueArgs>(args: SelectSubset<T, ActivityLogsFindUniqueArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityLogs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityLogsFindUniqueOrThrowArgs} args - Arguments to find a ActivityLogs
     * @example
     * // Get one ActivityLogs
     * const activityLogs = await prisma.activityLogs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLogsFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLogsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsFindFirstArgs} args - Arguments to find a ActivityLogs
     * @example
     * // Get one ActivityLogs
     * const activityLogs = await prisma.activityLogs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLogsFindFirstArgs>(args?: SelectSubset<T, ActivityLogsFindFirstArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLogs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsFindFirstOrThrowArgs} args - Arguments to find a ActivityLogs
     * @example
     * // Get one ActivityLogs
     * const activityLogs = await prisma.activityLogs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLogsFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLogsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLogs
     * const activityLogs = await prisma.activityLogs.findMany()
     * 
     * // Get first 10 ActivityLogs
     * const activityLogs = await prisma.activityLogs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLogsWithIdOnly = await prisma.activityLogs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLogsFindManyArgs>(args?: SelectSubset<T, ActivityLogsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityLogs.
     * @param {ActivityLogsCreateArgs} args - Arguments to create a ActivityLogs.
     * @example
     * // Create one ActivityLogs
     * const ActivityLogs = await prisma.activityLogs.create({
     *   data: {
     *     // ... data to create a ActivityLogs
     *   }
     * })
     * 
     */
    create<T extends ActivityLogsCreateArgs>(args: SelectSubset<T, ActivityLogsCreateArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityLogs.
     * @param {ActivityLogsCreateManyArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLogs = await prisma.activityLogs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLogsCreateManyArgs>(args?: SelectSubset<T, ActivityLogsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLogs and returns the data saved in the database.
     * @param {ActivityLogsCreateManyAndReturnArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLogs = await prisma.activityLogs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLogs and only return the `id`
     * const activityLogsWithIdOnly = await prisma.activityLogs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLogsCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLogsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityLogs.
     * @param {ActivityLogsDeleteArgs} args - Arguments to delete one ActivityLogs.
     * @example
     * // Delete one ActivityLogs
     * const ActivityLogs = await prisma.activityLogs.delete({
     *   where: {
     *     // ... filter to delete one ActivityLogs
     *   }
     * })
     * 
     */
    delete<T extends ActivityLogsDeleteArgs>(args: SelectSubset<T, ActivityLogsDeleteArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityLogs.
     * @param {ActivityLogsUpdateArgs} args - Arguments to update one ActivityLogs.
     * @example
     * // Update one ActivityLogs
     * const activityLogs = await prisma.activityLogs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLogsUpdateArgs>(args: SelectSubset<T, ActivityLogsUpdateArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityLogs.
     * @param {ActivityLogsDeleteManyArgs} args - Arguments to filter ActivityLogs to delete.
     * @example
     * // Delete a few ActivityLogs
     * const { count } = await prisma.activityLogs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLogsDeleteManyArgs>(args?: SelectSubset<T, ActivityLogsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLogs
     * const activityLogs = await prisma.activityLogs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLogsUpdateManyArgs>(args: SelectSubset<T, ActivityLogsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs and returns the data updated in the database.
     * @param {ActivityLogsUpdateManyAndReturnArgs} args - Arguments to update many ActivityLogs.
     * @example
     * // Update many ActivityLogs
     * const activityLogs = await prisma.activityLogs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityLogs and only return the `id`
     * const activityLogsWithIdOnly = await prisma.activityLogs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityLogsUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityLogsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityLogs.
     * @param {ActivityLogsUpsertArgs} args - Arguments to update or create a ActivityLogs.
     * @example
     * // Update or create a ActivityLogs
     * const activityLogs = await prisma.activityLogs.upsert({
     *   create: {
     *     // ... data to create a ActivityLogs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLogs we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLogsUpsertArgs>(args: SelectSubset<T, ActivityLogsUpsertArgs<ExtArgs>>): Prisma__ActivityLogsClient<$Result.GetResult<Prisma.$ActivityLogsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsCountArgs} args - Arguments to filter ActivityLogs to count.
     * @example
     * // Count the number of ActivityLogs
     * const count = await prisma.activityLogs.count({
     *   where: {
     *     // ... the filter for the ActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends ActivityLogsCountArgs>(
      args?: Subset<T, ActivityLogsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLogsAggregateArgs>(args: Subset<T, ActivityLogsAggregateArgs>): Prisma.PrismaPromise<GetActivityLogsAggregateType<T>>

    /**
     * Group by ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLogsGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLogs model
   */
  readonly fields: ActivityLogsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLogs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLogsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLogs model
   */
  interface ActivityLogsFieldRefs {
    readonly id: FieldRef<"ActivityLogs", 'String'>
    readonly type: FieldRef<"ActivityLogs", 'ActionType'>
    readonly message: FieldRef<"ActivityLogs", 'String'>
    readonly createdAt: FieldRef<"ActivityLogs", 'DateTime'>
    readonly userId: FieldRef<"ActivityLogs", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLogs findUnique
   */
  export type ActivityLogsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where: ActivityLogsWhereUniqueInput
  }

  /**
   * ActivityLogs findUniqueOrThrow
   */
  export type ActivityLogsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where: ActivityLogsWhereUniqueInput
  }

  /**
   * ActivityLogs findFirst
   */
  export type ActivityLogsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogsOrderByWithRelationInput | ActivityLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogsScalarFieldEnum | ActivityLogsScalarFieldEnum[]
  }

  /**
   * ActivityLogs findFirstOrThrow
   */
  export type ActivityLogsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogsOrderByWithRelationInput | ActivityLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogsScalarFieldEnum | ActivityLogsScalarFieldEnum[]
  }

  /**
   * ActivityLogs findMany
   */
  export type ActivityLogsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogsOrderByWithRelationInput | ActivityLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLogs.
     */
    cursor?: ActivityLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    distinct?: ActivityLogsScalarFieldEnum | ActivityLogsScalarFieldEnum[]
  }

  /**
   * ActivityLogs create
   */
  export type ActivityLogsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLogs.
     */
    data: XOR<ActivityLogsCreateInput, ActivityLogsUncheckedCreateInput>
  }

  /**
   * ActivityLogs createMany
   */
  export type ActivityLogsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogsCreateManyInput | ActivityLogsCreateManyInput[]
  }

  /**
   * ActivityLogs createManyAndReturn
   */
  export type ActivityLogsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogsCreateManyInput | ActivityLogsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLogs update
   */
  export type ActivityLogsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLogs.
     */
    data: XOR<ActivityLogsUpdateInput, ActivityLogsUncheckedUpdateInput>
    /**
     * Choose, which ActivityLogs to update.
     */
    where: ActivityLogsWhereUniqueInput
  }

  /**
   * ActivityLogs updateMany
   */
  export type ActivityLogsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogsUpdateManyMutationInput, ActivityLogsUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogsWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
  }

  /**
   * ActivityLogs updateManyAndReturn
   */
  export type ActivityLogsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogsUpdateManyMutationInput, ActivityLogsUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogsWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLogs upsert
   */
  export type ActivityLogsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLogs to update in case it exists.
     */
    where: ActivityLogsWhereUniqueInput
    /**
     * In case the ActivityLogs found by the `where` argument doesn't exist, create a new ActivityLogs with this data.
     */
    create: XOR<ActivityLogsCreateInput, ActivityLogsUncheckedCreateInput>
    /**
     * In case the ActivityLogs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLogsUpdateInput, ActivityLogsUncheckedUpdateInput>
  }

  /**
   * ActivityLogs delete
   */
  export type ActivityLogsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
    /**
     * Filter which ActivityLogs to delete.
     */
    where: ActivityLogsWhereUniqueInput
  }

  /**
   * ActivityLogs deleteMany
   */
  export type ActivityLogsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to delete
     */
    where?: ActivityLogsWhereInput
    /**
     * Limit how many ActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * ActivityLogs without action
   */
  export type ActivityLogsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLogs
     */
    select?: ActivityLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLogs
     */
    omit?: ActivityLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    role: 'role',
    lang: 'lang',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    accountId: 'accountId',
    providerId: 'providerId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    idToken: 'idToken',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const TeamsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    privileges: 'privileges',
    teamType: 'teamType',
    creatorId: 'creatorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamsScalarFieldEnum = (typeof TeamsScalarFieldEnum)[keyof typeof TeamsScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ordre: 'ordre',
    description: 'description',
    image: 'image',
    status: 'status',
    priority: 'priority',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    creatorId: 'creatorId'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const RoadMapScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    ordre: 'ordre',
    phase: 'phase',
    estimatedDays: 'estimatedDays',
    progress: 'progress',
    deliverables: 'deliverables',
    technologies: 'technologies',
    dependencies: 'dependencies',
    priority: 'priority',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    creatorId: 'creatorId'
  };

  export type RoadMapScalarFieldEnum = (typeof RoadMapScalarFieldEnum)[keyof typeof RoadMapScalarFieldEnum]


  export const FeaturesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    order: 'order',
    description: 'description',
    status: 'status',
    priority: 'priority',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    creatorId: 'creatorId',
    parentFeatureId: 'parentFeatureId'
  };

  export type FeaturesScalarFieldEnum = (typeof FeaturesScalarFieldEnum)[keyof typeof FeaturesScalarFieldEnum]


  export const UserStoryScalarFieldEnum: {
    id: 'id',
    title: 'title',
    goal: 'goal',
    name: 'name',
    description: 'description',
    status: 'status',
    priority: 'priority',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    creatorId: 'creatorId',
    parentUserStoryId: 'parentUserStoryId'
  };

  export type UserStoryScalarFieldEnum = (typeof UserStoryScalarFieldEnum)[keyof typeof UserStoryScalarFieldEnum]


  export const SprintsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    goal: 'goal',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    projectId: 'projectId',
    creatorId: 'creatorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SprintsScalarFieldEnum = (typeof SprintsScalarFieldEnum)[keyof typeof SprintsScalarFieldEnum]


  export const TasksScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    assigneeId: 'assigneeId',
    parentTaskId: 'parentTaskId'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const SchemaFieldsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fieldType: 'fieldType',
    isRequired: 'isRequired',
    isUnique: 'isUnique',
    defaultValue: 'defaultValue',
    description: 'description',
    comment: 'comment',
    order: 'order',
    projectId: 'projectId',
    parentFieldId: 'parentFieldId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SchemaFieldsScalarFieldEnum = (typeof SchemaFieldsScalarFieldEnum)[keyof typeof SchemaFieldsScalarFieldEnum]


  export const TimeLogScalarFieldEnum: {
    id: 'id',
    duration: 'duration',
    createdAt: 'createdAt',
    projectId: 'projectId',
    userId: 'userId',
    taskId: 'taskId'
  };

  export type TimeLogScalarFieldEnum = (typeof TimeLogScalarFieldEnum)[keyof typeof TimeLogScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    thema: 'thema',
    authorId: 'authorId',
    parentCommentId: 'parentCommentId',
    featureId: 'featureId',
    userStoryId: 'userStoryId',
    taskId: 'taskId',
    sprintId: 'sprintId',
    roadMapId: 'roadMapId'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const FilesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    extension: 'extension',
    url: 'url',
    category: 'category',
    type: 'type',
    description: 'description',
    fonctionnalities: 'fonctionnalities',
    import: 'import',
    export: 'export',
    useby: 'useby',
    script: 'script',
    version: 'version',
    order: 'order',
    devorder: 'devorder',
    status: 'status',
    createdAt: 'createdAt',
    creator: 'creator',
    projectId: 'projectId',
    uploaderId: 'uploaderId',
    parentFileId: 'parentFileId'
  };

  export type FilesScalarFieldEnum = (typeof FilesScalarFieldEnum)[keyof typeof FilesScalarFieldEnum]


  export const ActivityLogsScalarFieldEnum: {
    id: 'id',
    type: 'type',
    message: 'message',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type ActivityLogsScalarFieldEnum = (typeof ActivityLogsScalarFieldEnum)[keyof typeof ActivityLogsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'SprintStatus'
   */
  export type EnumSprintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SprintStatus'>
    


  /**
   * Reference to a field of type 'FieldType'
   */
  export type EnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType'>
    


  /**
   * Reference to a field of type 'FileType'
   */
  export type EnumFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileType'>
    


  /**
   * Reference to a field of type 'ActionType'
   */
  export type EnumActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    lang?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    verifications?: VerificationListRelationFilter
    projects?: ProjectsListRelationFilter
    createdProjects?: ProjectsListRelationFilter
    createdFeatures?: FeaturesListRelationFilter
    createdUserStories?: UserStoryListRelationFilter
    assignedTasks?: TasksListRelationFilter
    authoredComments?: CommentsListRelationFilter
    timeLogs?: TimeLogListRelationFilter
    activityLogs?: ActivityLogsListRelationFilter
    uploadedFiles?: FilesListRelationFilter
    createdTeams?: TeamsListRelationFilter
    memberTeams?: TeamsListRelationFilter
    createdRoadMaps?: RoadMapListRelationFilter
    createdSprints?: SprintsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    lang?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    verifications?: VerificationOrderByRelationAggregateInput
    projects?: ProjectsOrderByRelationAggregateInput
    createdProjects?: ProjectsOrderByRelationAggregateInput
    createdFeatures?: FeaturesOrderByRelationAggregateInput
    createdUserStories?: UserStoryOrderByRelationAggregateInput
    assignedTasks?: TasksOrderByRelationAggregateInput
    authoredComments?: CommentsOrderByRelationAggregateInput
    timeLogs?: TimeLogOrderByRelationAggregateInput
    activityLogs?: ActivityLogsOrderByRelationAggregateInput
    uploadedFiles?: FilesOrderByRelationAggregateInput
    createdTeams?: TeamsOrderByRelationAggregateInput
    memberTeams?: TeamsOrderByRelationAggregateInput
    createdRoadMaps?: RoadMapOrderByRelationAggregateInput
    createdSprints?: SprintsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    lang?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    verifications?: VerificationListRelationFilter
    projects?: ProjectsListRelationFilter
    createdProjects?: ProjectsListRelationFilter
    createdFeatures?: FeaturesListRelationFilter
    createdUserStories?: UserStoryListRelationFilter
    assignedTasks?: TasksListRelationFilter
    authoredComments?: CommentsListRelationFilter
    timeLogs?: TimeLogListRelationFilter
    activityLogs?: ActivityLogsListRelationFilter
    uploadedFiles?: FilesListRelationFilter
    createdTeams?: TeamsListRelationFilter
    memberTeams?: TeamsListRelationFilter
    createdRoadMaps?: RoadMapListRelationFilter
    createdSprints?: SprintsListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    lang?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    lang?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
    userId?: StringFilter<"Verification"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
    userId?: StringFilter<"Verification"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    userId?: StringWithAggregatesFilter<"Verification"> | string
  }

  export type TeamsWhereInput = {
    AND?: TeamsWhereInput | TeamsWhereInput[]
    OR?: TeamsWhereInput[]
    NOT?: TeamsWhereInput | TeamsWhereInput[]
    id?: StringFilter<"Teams"> | string
    name?: StringFilter<"Teams"> | string
    description?: StringNullableFilter<"Teams"> | string | null
    image?: StringNullableFilter<"Teams"> | string | null
    privileges?: StringNullableFilter<"Teams"> | string | null
    teamType?: StringFilter<"Teams"> | string
    creatorId?: StringNullableFilter<"Teams"> | string | null
    createdAt?: DateTimeFilter<"Teams"> | Date | string
    updatedAt?: DateTimeFilter<"Teams"> | Date | string
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    members?: UserListRelationFilter
    projects?: ProjectsListRelationFilter
  }

  export type TeamsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    privileges?: SortOrderInput | SortOrder
    teamType?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    members?: UserOrderByRelationAggregateInput
    projects?: ProjectsOrderByRelationAggregateInput
  }

  export type TeamsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamsWhereInput | TeamsWhereInput[]
    OR?: TeamsWhereInput[]
    NOT?: TeamsWhereInput | TeamsWhereInput[]
    name?: StringFilter<"Teams"> | string
    description?: StringNullableFilter<"Teams"> | string | null
    image?: StringNullableFilter<"Teams"> | string | null
    privileges?: StringNullableFilter<"Teams"> | string | null
    teamType?: StringFilter<"Teams"> | string
    creatorId?: StringNullableFilter<"Teams"> | string | null
    createdAt?: DateTimeFilter<"Teams"> | Date | string
    updatedAt?: DateTimeFilter<"Teams"> | Date | string
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    members?: UserListRelationFilter
    projects?: ProjectsListRelationFilter
  }, "id">

  export type TeamsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    privileges?: SortOrderInput | SortOrder
    teamType?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamsCountOrderByAggregateInput
    _max?: TeamsMaxOrderByAggregateInput
    _min?: TeamsMinOrderByAggregateInput
  }

  export type TeamsScalarWhereWithAggregatesInput = {
    AND?: TeamsScalarWhereWithAggregatesInput | TeamsScalarWhereWithAggregatesInput[]
    OR?: TeamsScalarWhereWithAggregatesInput[]
    NOT?: TeamsScalarWhereWithAggregatesInput | TeamsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teams"> | string
    name?: StringWithAggregatesFilter<"Teams"> | string
    description?: StringNullableWithAggregatesFilter<"Teams"> | string | null
    image?: StringNullableWithAggregatesFilter<"Teams"> | string | null
    privileges?: StringNullableWithAggregatesFilter<"Teams"> | string | null
    teamType?: StringWithAggregatesFilter<"Teams"> | string
    creatorId?: StringNullableWithAggregatesFilter<"Teams"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Teams"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Teams"> | Date | string
  }

  export type ProjectsWhereInput = {
    AND?: ProjectsWhereInput | ProjectsWhereInput[]
    OR?: ProjectsWhereInput[]
    NOT?: ProjectsWhereInput | ProjectsWhereInput[]
    id?: StringFilter<"Projects"> | string
    name?: StringFilter<"Projects"> | string
    ordre?: IntFilter<"Projects"> | number
    description?: StringNullableFilter<"Projects"> | string | null
    image?: StringNullableFilter<"Projects"> | string | null
    status?: EnumStatusFilter<"Projects"> | $Enums.Status
    priority?: IntFilter<"Projects"> | number
    startDate?: DateTimeNullableFilter<"Projects"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Projects"> | Date | string | null
    createdAt?: DateTimeFilter<"Projects"> | Date | string
    updatedAt?: DateTimeFilter<"Projects"> | Date | string
    creatorId?: StringNullableFilter<"Projects"> | string | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    teams?: TeamsListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
    files?: FilesListRelationFilter
    schemaFields?: SchemaFieldsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    tasks?: TasksListRelationFilter
    timeLogs?: TimeLogListRelationFilter
  }

  export type ProjectsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ordre?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    creator?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    teams?: TeamsOrderByRelationAggregateInput
    features?: FeaturesOrderByRelationAggregateInput
    userStories?: UserStoryOrderByRelationAggregateInput
    sprints?: SprintsOrderByRelationAggregateInput
    files?: FilesOrderByRelationAggregateInput
    schemaFields?: SchemaFieldsOrderByRelationAggregateInput
    roadMaps?: RoadMapOrderByRelationAggregateInput
    tasks?: TasksOrderByRelationAggregateInput
    timeLogs?: TimeLogOrderByRelationAggregateInput
  }

  export type ProjectsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectsWhereInput | ProjectsWhereInput[]
    OR?: ProjectsWhereInput[]
    NOT?: ProjectsWhereInput | ProjectsWhereInput[]
    name?: StringFilter<"Projects"> | string
    ordre?: IntFilter<"Projects"> | number
    description?: StringNullableFilter<"Projects"> | string | null
    image?: StringNullableFilter<"Projects"> | string | null
    status?: EnumStatusFilter<"Projects"> | $Enums.Status
    priority?: IntFilter<"Projects"> | number
    startDate?: DateTimeNullableFilter<"Projects"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Projects"> | Date | string | null
    createdAt?: DateTimeFilter<"Projects"> | Date | string
    updatedAt?: DateTimeFilter<"Projects"> | Date | string
    creatorId?: StringNullableFilter<"Projects"> | string | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    teams?: TeamsListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
    files?: FilesListRelationFilter
    schemaFields?: SchemaFieldsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    tasks?: TasksListRelationFilter
    timeLogs?: TimeLogListRelationFilter
  }, "id">

  export type ProjectsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ordre?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    _count?: ProjectsCountOrderByAggregateInput
    _avg?: ProjectsAvgOrderByAggregateInput
    _max?: ProjectsMaxOrderByAggregateInput
    _min?: ProjectsMinOrderByAggregateInput
    _sum?: ProjectsSumOrderByAggregateInput
  }

  export type ProjectsScalarWhereWithAggregatesInput = {
    AND?: ProjectsScalarWhereWithAggregatesInput | ProjectsScalarWhereWithAggregatesInput[]
    OR?: ProjectsScalarWhereWithAggregatesInput[]
    NOT?: ProjectsScalarWhereWithAggregatesInput | ProjectsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Projects"> | string
    name?: StringWithAggregatesFilter<"Projects"> | string
    ordre?: IntWithAggregatesFilter<"Projects"> | number
    description?: StringNullableWithAggregatesFilter<"Projects"> | string | null
    image?: StringNullableWithAggregatesFilter<"Projects"> | string | null
    status?: EnumStatusWithAggregatesFilter<"Projects"> | $Enums.Status
    priority?: IntWithAggregatesFilter<"Projects"> | number
    startDate?: DateTimeNullableWithAggregatesFilter<"Projects"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Projects"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    creatorId?: StringNullableWithAggregatesFilter<"Projects"> | string | null
  }

  export type RoadMapWhereInput = {
    AND?: RoadMapWhereInput | RoadMapWhereInput[]
    OR?: RoadMapWhereInput[]
    NOT?: RoadMapWhereInput | RoadMapWhereInput[]
    id?: StringFilter<"RoadMap"> | string
    title?: StringFilter<"RoadMap"> | string
    description?: StringFilter<"RoadMap"> | string
    ordre?: IntFilter<"RoadMap"> | number
    phase?: StringFilter<"RoadMap"> | string
    estimatedDays?: IntFilter<"RoadMap"> | number
    progress?: IntFilter<"RoadMap"> | number
    deliverables?: StringFilter<"RoadMap"> | string
    technologies?: StringFilter<"RoadMap"> | string
    dependencies?: StringFilter<"RoadMap"> | string
    priority?: StringFilter<"RoadMap"> | string
    startDate?: DateTimeNullableFilter<"RoadMap"> | Date | string | null
    endDate?: DateTimeNullableFilter<"RoadMap"> | Date | string | null
    createdAt?: DateTimeFilter<"RoadMap"> | Date | string
    updatedAt?: DateTimeFilter<"RoadMap"> | Date | string
    projectId?: StringFilter<"RoadMap"> | string
    creatorId?: StringNullableFilter<"RoadMap"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    comments?: CommentsListRelationFilter
    files?: FilesListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
  }

  export type RoadMapOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ordre?: SortOrder
    phase?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
    deliverables?: SortOrder
    technologies?: SortOrder
    dependencies?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    project?: ProjectsOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    comments?: CommentsOrderByRelationAggregateInput
    files?: FilesOrderByRelationAggregateInput
    features?: FeaturesOrderByRelationAggregateInput
    userStories?: UserStoryOrderByRelationAggregateInput
    sprints?: SprintsOrderByRelationAggregateInput
    tasks?: TasksOrderByRelationAggregateInput
  }

  export type RoadMapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoadMapWhereInput | RoadMapWhereInput[]
    OR?: RoadMapWhereInput[]
    NOT?: RoadMapWhereInput | RoadMapWhereInput[]
    title?: StringFilter<"RoadMap"> | string
    description?: StringFilter<"RoadMap"> | string
    ordre?: IntFilter<"RoadMap"> | number
    phase?: StringFilter<"RoadMap"> | string
    estimatedDays?: IntFilter<"RoadMap"> | number
    progress?: IntFilter<"RoadMap"> | number
    deliverables?: StringFilter<"RoadMap"> | string
    technologies?: StringFilter<"RoadMap"> | string
    dependencies?: StringFilter<"RoadMap"> | string
    priority?: StringFilter<"RoadMap"> | string
    startDate?: DateTimeNullableFilter<"RoadMap"> | Date | string | null
    endDate?: DateTimeNullableFilter<"RoadMap"> | Date | string | null
    createdAt?: DateTimeFilter<"RoadMap"> | Date | string
    updatedAt?: DateTimeFilter<"RoadMap"> | Date | string
    projectId?: StringFilter<"RoadMap"> | string
    creatorId?: StringNullableFilter<"RoadMap"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    comments?: CommentsListRelationFilter
    files?: FilesListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
  }, "id">

  export type RoadMapOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ordre?: SortOrder
    phase?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
    deliverables?: SortOrder
    technologies?: SortOrder
    dependencies?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    _count?: RoadMapCountOrderByAggregateInput
    _avg?: RoadMapAvgOrderByAggregateInput
    _max?: RoadMapMaxOrderByAggregateInput
    _min?: RoadMapMinOrderByAggregateInput
    _sum?: RoadMapSumOrderByAggregateInput
  }

  export type RoadMapScalarWhereWithAggregatesInput = {
    AND?: RoadMapScalarWhereWithAggregatesInput | RoadMapScalarWhereWithAggregatesInput[]
    OR?: RoadMapScalarWhereWithAggregatesInput[]
    NOT?: RoadMapScalarWhereWithAggregatesInput | RoadMapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoadMap"> | string
    title?: StringWithAggregatesFilter<"RoadMap"> | string
    description?: StringWithAggregatesFilter<"RoadMap"> | string
    ordre?: IntWithAggregatesFilter<"RoadMap"> | number
    phase?: StringWithAggregatesFilter<"RoadMap"> | string
    estimatedDays?: IntWithAggregatesFilter<"RoadMap"> | number
    progress?: IntWithAggregatesFilter<"RoadMap"> | number
    deliverables?: StringWithAggregatesFilter<"RoadMap"> | string
    technologies?: StringWithAggregatesFilter<"RoadMap"> | string
    dependencies?: StringWithAggregatesFilter<"RoadMap"> | string
    priority?: StringWithAggregatesFilter<"RoadMap"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"RoadMap"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"RoadMap"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RoadMap"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoadMap"> | Date | string
    projectId?: StringWithAggregatesFilter<"RoadMap"> | string
    creatorId?: StringNullableWithAggregatesFilter<"RoadMap"> | string | null
  }

  export type FeaturesWhereInput = {
    AND?: FeaturesWhereInput | FeaturesWhereInput[]
    OR?: FeaturesWhereInput[]
    NOT?: FeaturesWhereInput | FeaturesWhereInput[]
    id?: StringFilter<"Features"> | string
    name?: StringFilter<"Features"> | string
    order?: IntFilter<"Features"> | number
    description?: StringNullableFilter<"Features"> | string | null
    status?: EnumStatusFilter<"Features"> | $Enums.Status
    priority?: IntFilter<"Features"> | number
    startDate?: DateTimeNullableFilter<"Features"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Features"> | Date | string | null
    createdAt?: DateTimeFilter<"Features"> | Date | string
    updatedAt?: DateTimeFilter<"Features"> | Date | string
    projectId?: StringFilter<"Features"> | string
    creatorId?: StringNullableFilter<"Features"> | string | null
    parentFeatureId?: StringNullableFilter<"Features"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    parentFeature?: XOR<FeaturesNullableScalarRelationFilter, FeaturesWhereInput> | null
    childFeatures?: FeaturesListRelationFilter
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
  }

  export type FeaturesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    parentFeatureId?: SortOrderInput | SortOrder
    project?: ProjectsOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    parentFeature?: FeaturesOrderByWithRelationInput
    childFeatures?: FeaturesOrderByRelationAggregateInput
    comments?: CommentsOrderByRelationAggregateInput
    roadMaps?: RoadMapOrderByRelationAggregateInput
    userStories?: UserStoryOrderByRelationAggregateInput
    sprints?: SprintsOrderByRelationAggregateInput
    tasks?: TasksOrderByRelationAggregateInput
  }

  export type FeaturesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeaturesWhereInput | FeaturesWhereInput[]
    OR?: FeaturesWhereInput[]
    NOT?: FeaturesWhereInput | FeaturesWhereInput[]
    name?: StringFilter<"Features"> | string
    order?: IntFilter<"Features"> | number
    description?: StringNullableFilter<"Features"> | string | null
    status?: EnumStatusFilter<"Features"> | $Enums.Status
    priority?: IntFilter<"Features"> | number
    startDate?: DateTimeNullableFilter<"Features"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Features"> | Date | string | null
    createdAt?: DateTimeFilter<"Features"> | Date | string
    updatedAt?: DateTimeFilter<"Features"> | Date | string
    projectId?: StringFilter<"Features"> | string
    creatorId?: StringNullableFilter<"Features"> | string | null
    parentFeatureId?: StringNullableFilter<"Features"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    parentFeature?: XOR<FeaturesNullableScalarRelationFilter, FeaturesWhereInput> | null
    childFeatures?: FeaturesListRelationFilter
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
  }, "id">

  export type FeaturesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    parentFeatureId?: SortOrderInput | SortOrder
    _count?: FeaturesCountOrderByAggregateInput
    _avg?: FeaturesAvgOrderByAggregateInput
    _max?: FeaturesMaxOrderByAggregateInput
    _min?: FeaturesMinOrderByAggregateInput
    _sum?: FeaturesSumOrderByAggregateInput
  }

  export type FeaturesScalarWhereWithAggregatesInput = {
    AND?: FeaturesScalarWhereWithAggregatesInput | FeaturesScalarWhereWithAggregatesInput[]
    OR?: FeaturesScalarWhereWithAggregatesInput[]
    NOT?: FeaturesScalarWhereWithAggregatesInput | FeaturesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Features"> | string
    name?: StringWithAggregatesFilter<"Features"> | string
    order?: IntWithAggregatesFilter<"Features"> | number
    description?: StringNullableWithAggregatesFilter<"Features"> | string | null
    status?: EnumStatusWithAggregatesFilter<"Features"> | $Enums.Status
    priority?: IntWithAggregatesFilter<"Features"> | number
    startDate?: DateTimeNullableWithAggregatesFilter<"Features"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Features"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Features"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Features"> | Date | string
    projectId?: StringWithAggregatesFilter<"Features"> | string
    creatorId?: StringNullableWithAggregatesFilter<"Features"> | string | null
    parentFeatureId?: StringNullableWithAggregatesFilter<"Features"> | string | null
  }

  export type UserStoryWhereInput = {
    AND?: UserStoryWhereInput | UserStoryWhereInput[]
    OR?: UserStoryWhereInput[]
    NOT?: UserStoryWhereInput | UserStoryWhereInput[]
    id?: StringFilter<"UserStory"> | string
    title?: StringFilter<"UserStory"> | string
    goal?: StringNullableFilter<"UserStory"> | string | null
    name?: StringFilter<"UserStory"> | string
    description?: StringNullableFilter<"UserStory"> | string | null
    status?: EnumStatusFilter<"UserStory"> | $Enums.Status
    priority?: IntFilter<"UserStory"> | number
    startDate?: DateTimeNullableFilter<"UserStory"> | Date | string | null
    endDate?: DateTimeNullableFilter<"UserStory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserStory"> | Date | string
    updatedAt?: DateTimeFilter<"UserStory"> | Date | string
    projectId?: StringFilter<"UserStory"> | string
    creatorId?: StringNullableFilter<"UserStory"> | string | null
    parentUserStoryId?: StringNullableFilter<"UserStory"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    parentUserStory?: XOR<UserStoryNullableScalarRelationFilter, UserStoryWhereInput> | null
    childUserStories?: UserStoryListRelationFilter
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    features?: FeaturesListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
  }

  export type UserStoryOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    goal?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    parentUserStoryId?: SortOrderInput | SortOrder
    project?: ProjectsOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    parentUserStory?: UserStoryOrderByWithRelationInput
    childUserStories?: UserStoryOrderByRelationAggregateInput
    comments?: CommentsOrderByRelationAggregateInput
    roadMaps?: RoadMapOrderByRelationAggregateInput
    features?: FeaturesOrderByRelationAggregateInput
    sprints?: SprintsOrderByRelationAggregateInput
    tasks?: TasksOrderByRelationAggregateInput
  }

  export type UserStoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserStoryWhereInput | UserStoryWhereInput[]
    OR?: UserStoryWhereInput[]
    NOT?: UserStoryWhereInput | UserStoryWhereInput[]
    title?: StringFilter<"UserStory"> | string
    goal?: StringNullableFilter<"UserStory"> | string | null
    name?: StringFilter<"UserStory"> | string
    description?: StringNullableFilter<"UserStory"> | string | null
    status?: EnumStatusFilter<"UserStory"> | $Enums.Status
    priority?: IntFilter<"UserStory"> | number
    startDate?: DateTimeNullableFilter<"UserStory"> | Date | string | null
    endDate?: DateTimeNullableFilter<"UserStory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserStory"> | Date | string
    updatedAt?: DateTimeFilter<"UserStory"> | Date | string
    projectId?: StringFilter<"UserStory"> | string
    creatorId?: StringNullableFilter<"UserStory"> | string | null
    parentUserStoryId?: StringNullableFilter<"UserStory"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    parentUserStory?: XOR<UserStoryNullableScalarRelationFilter, UserStoryWhereInput> | null
    childUserStories?: UserStoryListRelationFilter
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    features?: FeaturesListRelationFilter
    sprints?: SprintsListRelationFilter
    tasks?: TasksListRelationFilter
  }, "id">

  export type UserStoryOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    goal?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    parentUserStoryId?: SortOrderInput | SortOrder
    _count?: UserStoryCountOrderByAggregateInput
    _avg?: UserStoryAvgOrderByAggregateInput
    _max?: UserStoryMaxOrderByAggregateInput
    _min?: UserStoryMinOrderByAggregateInput
    _sum?: UserStorySumOrderByAggregateInput
  }

  export type UserStoryScalarWhereWithAggregatesInput = {
    AND?: UserStoryScalarWhereWithAggregatesInput | UserStoryScalarWhereWithAggregatesInput[]
    OR?: UserStoryScalarWhereWithAggregatesInput[]
    NOT?: UserStoryScalarWhereWithAggregatesInput | UserStoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStory"> | string
    title?: StringWithAggregatesFilter<"UserStory"> | string
    goal?: StringNullableWithAggregatesFilter<"UserStory"> | string | null
    name?: StringWithAggregatesFilter<"UserStory"> | string
    description?: StringNullableWithAggregatesFilter<"UserStory"> | string | null
    status?: EnumStatusWithAggregatesFilter<"UserStory"> | $Enums.Status
    priority?: IntWithAggregatesFilter<"UserStory"> | number
    startDate?: DateTimeNullableWithAggregatesFilter<"UserStory"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"UserStory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserStory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserStory"> | Date | string
    projectId?: StringWithAggregatesFilter<"UserStory"> | string
    creatorId?: StringNullableWithAggregatesFilter<"UserStory"> | string | null
    parentUserStoryId?: StringNullableWithAggregatesFilter<"UserStory"> | string | null
  }

  export type SprintsWhereInput = {
    AND?: SprintsWhereInput | SprintsWhereInput[]
    OR?: SprintsWhereInput[]
    NOT?: SprintsWhereInput | SprintsWhereInput[]
    id?: StringFilter<"Sprints"> | string
    name?: StringFilter<"Sprints"> | string
    goal?: StringNullableFilter<"Sprints"> | string | null
    startDate?: DateTimeFilter<"Sprints"> | Date | string
    endDate?: DateTimeFilter<"Sprints"> | Date | string
    status?: EnumSprintStatusFilter<"Sprints"> | $Enums.SprintStatus
    projectId?: StringFilter<"Sprints"> | string
    creatorId?: StringNullableFilter<"Sprints"> | string | null
    createdAt?: DateTimeFilter<"Sprints"> | Date | string
    updatedAt?: DateTimeFilter<"Sprints"> | Date | string
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    tasks?: TasksListRelationFilter
  }

  export type SprintsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    goal?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectsOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    comments?: CommentsOrderByRelationAggregateInput
    roadMaps?: RoadMapOrderByRelationAggregateInput
    features?: FeaturesOrderByRelationAggregateInput
    userStories?: UserStoryOrderByRelationAggregateInput
    tasks?: TasksOrderByRelationAggregateInput
  }

  export type SprintsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SprintsWhereInput | SprintsWhereInput[]
    OR?: SprintsWhereInput[]
    NOT?: SprintsWhereInput | SprintsWhereInput[]
    name?: StringFilter<"Sprints"> | string
    goal?: StringNullableFilter<"Sprints"> | string | null
    startDate?: DateTimeFilter<"Sprints"> | Date | string
    endDate?: DateTimeFilter<"Sprints"> | Date | string
    status?: EnumSprintStatusFilter<"Sprints"> | $Enums.SprintStatus
    projectId?: StringFilter<"Sprints"> | string
    creatorId?: StringNullableFilter<"Sprints"> | string | null
    createdAt?: DateTimeFilter<"Sprints"> | Date | string
    updatedAt?: DateTimeFilter<"Sprints"> | Date | string
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    tasks?: TasksListRelationFilter
  }, "id">

  export type SprintsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    goal?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SprintsCountOrderByAggregateInput
    _max?: SprintsMaxOrderByAggregateInput
    _min?: SprintsMinOrderByAggregateInput
  }

  export type SprintsScalarWhereWithAggregatesInput = {
    AND?: SprintsScalarWhereWithAggregatesInput | SprintsScalarWhereWithAggregatesInput[]
    OR?: SprintsScalarWhereWithAggregatesInput[]
    NOT?: SprintsScalarWhereWithAggregatesInput | SprintsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sprints"> | string
    name?: StringWithAggregatesFilter<"Sprints"> | string
    goal?: StringNullableWithAggregatesFilter<"Sprints"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Sprints"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Sprints"> | Date | string
    status?: EnumSprintStatusWithAggregatesFilter<"Sprints"> | $Enums.SprintStatus
    projectId?: StringWithAggregatesFilter<"Sprints"> | string
    creatorId?: StringNullableWithAggregatesFilter<"Sprints"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Sprints"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sprints"> | Date | string
  }

  export type TasksWhereInput = {
    AND?: TasksWhereInput | TasksWhereInput[]
    OR?: TasksWhereInput[]
    NOT?: TasksWhereInput | TasksWhereInput[]
    id?: StringFilter<"Tasks"> | string
    title?: StringFilter<"Tasks"> | string
    description?: StringNullableFilter<"Tasks"> | string | null
    status?: EnumStatusFilter<"Tasks"> | $Enums.Status
    priority?: IntFilter<"Tasks"> | number
    dueDate?: DateTimeNullableFilter<"Tasks"> | Date | string | null
    createdAt?: DateTimeFilter<"Tasks"> | Date | string
    updatedAt?: DateTimeFilter<"Tasks"> | Date | string
    projectId?: StringFilter<"Tasks"> | string
    assigneeId?: StringNullableFilter<"Tasks"> | string | null
    parentTaskId?: StringNullableFilter<"Tasks"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    parentTask?: XOR<TasksNullableScalarRelationFilter, TasksWhereInput> | null
    childTasks?: TasksListRelationFilter
    timeLogs?: TimeLogListRelationFilter
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
  }

  export type TasksOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    parentTaskId?: SortOrderInput | SortOrder
    project?: ProjectsOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
    parentTask?: TasksOrderByWithRelationInput
    childTasks?: TasksOrderByRelationAggregateInput
    timeLogs?: TimeLogOrderByRelationAggregateInput
    comments?: CommentsOrderByRelationAggregateInput
    roadMaps?: RoadMapOrderByRelationAggregateInput
    features?: FeaturesOrderByRelationAggregateInput
    userStories?: UserStoryOrderByRelationAggregateInput
    sprints?: SprintsOrderByRelationAggregateInput
  }

  export type TasksWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TasksWhereInput | TasksWhereInput[]
    OR?: TasksWhereInput[]
    NOT?: TasksWhereInput | TasksWhereInput[]
    title?: StringFilter<"Tasks"> | string
    description?: StringNullableFilter<"Tasks"> | string | null
    status?: EnumStatusFilter<"Tasks"> | $Enums.Status
    priority?: IntFilter<"Tasks"> | number
    dueDate?: DateTimeNullableFilter<"Tasks"> | Date | string | null
    createdAt?: DateTimeFilter<"Tasks"> | Date | string
    updatedAt?: DateTimeFilter<"Tasks"> | Date | string
    projectId?: StringFilter<"Tasks"> | string
    assigneeId?: StringNullableFilter<"Tasks"> | string | null
    parentTaskId?: StringNullableFilter<"Tasks"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    parentTask?: XOR<TasksNullableScalarRelationFilter, TasksWhereInput> | null
    childTasks?: TasksListRelationFilter
    timeLogs?: TimeLogListRelationFilter
    comments?: CommentsListRelationFilter
    roadMaps?: RoadMapListRelationFilter
    features?: FeaturesListRelationFilter
    userStories?: UserStoryListRelationFilter
    sprints?: SprintsListRelationFilter
  }, "id">

  export type TasksOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    parentTaskId?: SortOrderInput | SortOrder
    _count?: TasksCountOrderByAggregateInput
    _avg?: TasksAvgOrderByAggregateInput
    _max?: TasksMaxOrderByAggregateInput
    _min?: TasksMinOrderByAggregateInput
    _sum?: TasksSumOrderByAggregateInput
  }

  export type TasksScalarWhereWithAggregatesInput = {
    AND?: TasksScalarWhereWithAggregatesInput | TasksScalarWhereWithAggregatesInput[]
    OR?: TasksScalarWhereWithAggregatesInput[]
    NOT?: TasksScalarWhereWithAggregatesInput | TasksScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tasks"> | string
    title?: StringWithAggregatesFilter<"Tasks"> | string
    description?: StringNullableWithAggregatesFilter<"Tasks"> | string | null
    status?: EnumStatusWithAggregatesFilter<"Tasks"> | $Enums.Status
    priority?: IntWithAggregatesFilter<"Tasks"> | number
    dueDate?: DateTimeNullableWithAggregatesFilter<"Tasks"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tasks"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tasks"> | Date | string
    projectId?: StringWithAggregatesFilter<"Tasks"> | string
    assigneeId?: StringNullableWithAggregatesFilter<"Tasks"> | string | null
    parentTaskId?: StringNullableWithAggregatesFilter<"Tasks"> | string | null
  }

  export type SchemaFieldsWhereInput = {
    AND?: SchemaFieldsWhereInput | SchemaFieldsWhereInput[]
    OR?: SchemaFieldsWhereInput[]
    NOT?: SchemaFieldsWhereInput | SchemaFieldsWhereInput[]
    id?: StringFilter<"SchemaFields"> | string
    name?: StringFilter<"SchemaFields"> | string
    fieldType?: EnumFieldTypeNullableFilter<"SchemaFields"> | $Enums.FieldType | null
    isRequired?: BoolFilter<"SchemaFields"> | boolean
    isUnique?: BoolFilter<"SchemaFields"> | boolean
    defaultValue?: StringNullableFilter<"SchemaFields"> | string | null
    description?: StringNullableFilter<"SchemaFields"> | string | null
    comment?: StringNullableFilter<"SchemaFields"> | string | null
    order?: IntFilter<"SchemaFields"> | number
    projectId?: StringFilter<"SchemaFields"> | string
    parentFieldId?: StringNullableFilter<"SchemaFields"> | string | null
    createdAt?: DateTimeFilter<"SchemaFields"> | Date | string
    updatedAt?: DateTimeFilter<"SchemaFields"> | Date | string
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    parentField?: XOR<SchemaFieldsNullableScalarRelationFilter, SchemaFieldsWhereInput> | null
    childFields?: SchemaFieldsListRelationFilter
  }

  export type SchemaFieldsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fieldType?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    isUnique?: SortOrder
    defaultValue?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    order?: SortOrder
    projectId?: SortOrder
    parentFieldId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectsOrderByWithRelationInput
    parentField?: SchemaFieldsOrderByWithRelationInput
    childFields?: SchemaFieldsOrderByRelationAggregateInput
  }

  export type SchemaFieldsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SchemaFieldsWhereInput | SchemaFieldsWhereInput[]
    OR?: SchemaFieldsWhereInput[]
    NOT?: SchemaFieldsWhereInput | SchemaFieldsWhereInput[]
    name?: StringFilter<"SchemaFields"> | string
    fieldType?: EnumFieldTypeNullableFilter<"SchemaFields"> | $Enums.FieldType | null
    isRequired?: BoolFilter<"SchemaFields"> | boolean
    isUnique?: BoolFilter<"SchemaFields"> | boolean
    defaultValue?: StringNullableFilter<"SchemaFields"> | string | null
    description?: StringNullableFilter<"SchemaFields"> | string | null
    comment?: StringNullableFilter<"SchemaFields"> | string | null
    order?: IntFilter<"SchemaFields"> | number
    projectId?: StringFilter<"SchemaFields"> | string
    parentFieldId?: StringNullableFilter<"SchemaFields"> | string | null
    createdAt?: DateTimeFilter<"SchemaFields"> | Date | string
    updatedAt?: DateTimeFilter<"SchemaFields"> | Date | string
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    parentField?: XOR<SchemaFieldsNullableScalarRelationFilter, SchemaFieldsWhereInput> | null
    childFields?: SchemaFieldsListRelationFilter
  }, "id">

  export type SchemaFieldsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fieldType?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    isUnique?: SortOrder
    defaultValue?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    order?: SortOrder
    projectId?: SortOrder
    parentFieldId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SchemaFieldsCountOrderByAggregateInput
    _avg?: SchemaFieldsAvgOrderByAggregateInput
    _max?: SchemaFieldsMaxOrderByAggregateInput
    _min?: SchemaFieldsMinOrderByAggregateInput
    _sum?: SchemaFieldsSumOrderByAggregateInput
  }

  export type SchemaFieldsScalarWhereWithAggregatesInput = {
    AND?: SchemaFieldsScalarWhereWithAggregatesInput | SchemaFieldsScalarWhereWithAggregatesInput[]
    OR?: SchemaFieldsScalarWhereWithAggregatesInput[]
    NOT?: SchemaFieldsScalarWhereWithAggregatesInput | SchemaFieldsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SchemaFields"> | string
    name?: StringWithAggregatesFilter<"SchemaFields"> | string
    fieldType?: EnumFieldTypeNullableWithAggregatesFilter<"SchemaFields"> | $Enums.FieldType | null
    isRequired?: BoolWithAggregatesFilter<"SchemaFields"> | boolean
    isUnique?: BoolWithAggregatesFilter<"SchemaFields"> | boolean
    defaultValue?: StringNullableWithAggregatesFilter<"SchemaFields"> | string | null
    description?: StringNullableWithAggregatesFilter<"SchemaFields"> | string | null
    comment?: StringNullableWithAggregatesFilter<"SchemaFields"> | string | null
    order?: IntWithAggregatesFilter<"SchemaFields"> | number
    projectId?: StringWithAggregatesFilter<"SchemaFields"> | string
    parentFieldId?: StringNullableWithAggregatesFilter<"SchemaFields"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SchemaFields"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SchemaFields"> | Date | string
  }

  export type TimeLogWhereInput = {
    AND?: TimeLogWhereInput | TimeLogWhereInput[]
    OR?: TimeLogWhereInput[]
    NOT?: TimeLogWhereInput | TimeLogWhereInput[]
    id?: StringFilter<"TimeLog"> | string
    duration?: IntFilter<"TimeLog"> | number
    createdAt?: DateTimeFilter<"TimeLog"> | Date | string
    projectId?: StringFilter<"TimeLog"> | string
    userId?: StringFilter<"TimeLog"> | string
    taskId?: StringNullableFilter<"TimeLog"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TasksNullableScalarRelationFilter, TasksWhereInput> | null
  }

  export type TimeLogOrderByWithRelationInput = {
    id?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    taskId?: SortOrderInput | SortOrder
    project?: ProjectsOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    task?: TasksOrderByWithRelationInput
  }

  export type TimeLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimeLogWhereInput | TimeLogWhereInput[]
    OR?: TimeLogWhereInput[]
    NOT?: TimeLogWhereInput | TimeLogWhereInput[]
    duration?: IntFilter<"TimeLog"> | number
    createdAt?: DateTimeFilter<"TimeLog"> | Date | string
    projectId?: StringFilter<"TimeLog"> | string
    userId?: StringFilter<"TimeLog"> | string
    taskId?: StringNullableFilter<"TimeLog"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TasksNullableScalarRelationFilter, TasksWhereInput> | null
  }, "id">

  export type TimeLogOrderByWithAggregationInput = {
    id?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    taskId?: SortOrderInput | SortOrder
    _count?: TimeLogCountOrderByAggregateInput
    _avg?: TimeLogAvgOrderByAggregateInput
    _max?: TimeLogMaxOrderByAggregateInput
    _min?: TimeLogMinOrderByAggregateInput
    _sum?: TimeLogSumOrderByAggregateInput
  }

  export type TimeLogScalarWhereWithAggregatesInput = {
    AND?: TimeLogScalarWhereWithAggregatesInput | TimeLogScalarWhereWithAggregatesInput[]
    OR?: TimeLogScalarWhereWithAggregatesInput[]
    NOT?: TimeLogScalarWhereWithAggregatesInput | TimeLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TimeLog"> | string
    duration?: IntWithAggregatesFilter<"TimeLog"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TimeLog"> | Date | string
    projectId?: StringWithAggregatesFilter<"TimeLog"> | string
    userId?: StringWithAggregatesFilter<"TimeLog"> | string
    taskId?: StringNullableWithAggregatesFilter<"TimeLog"> | string | null
  }

  export type CommentsWhereInput = {
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    id?: StringFilter<"Comments"> | string
    title?: StringFilter<"Comments"> | string
    content?: StringFilter<"Comments"> | string
    order?: IntFilter<"Comments"> | number
    createdAt?: DateTimeFilter<"Comments"> | Date | string
    updatedAt?: DateTimeFilter<"Comments"> | Date | string
    thema?: StringNullableFilter<"Comments"> | string | null
    authorId?: StringFilter<"Comments"> | string
    parentCommentId?: StringNullableFilter<"Comments"> | string | null
    featureId?: StringNullableFilter<"Comments"> | string | null
    userStoryId?: StringNullableFilter<"Comments"> | string | null
    taskId?: StringNullableFilter<"Comments"> | string | null
    sprintId?: StringNullableFilter<"Comments"> | string | null
    roadMapId?: StringNullableFilter<"Comments"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    parentComment?: XOR<CommentsNullableScalarRelationFilter, CommentsWhereInput> | null
    childComments?: CommentsListRelationFilter
    feature?: XOR<FeaturesNullableScalarRelationFilter, FeaturesWhereInput> | null
    userStory?: XOR<UserStoryNullableScalarRelationFilter, UserStoryWhereInput> | null
    task?: XOR<TasksNullableScalarRelationFilter, TasksWhereInput> | null
    sprint?: XOR<SprintsNullableScalarRelationFilter, SprintsWhereInput> | null
    roadMap?: XOR<RoadMapNullableScalarRelationFilter, RoadMapWhereInput> | null
  }

  export type CommentsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    thema?: SortOrderInput | SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrderInput | SortOrder
    featureId?: SortOrderInput | SortOrder
    userStoryId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    sprintId?: SortOrderInput | SortOrder
    roadMapId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    parentComment?: CommentsOrderByWithRelationInput
    childComments?: CommentsOrderByRelationAggregateInput
    feature?: FeaturesOrderByWithRelationInput
    userStory?: UserStoryOrderByWithRelationInput
    task?: TasksOrderByWithRelationInput
    sprint?: SprintsOrderByWithRelationInput
    roadMap?: RoadMapOrderByWithRelationInput
  }

  export type CommentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    title?: StringFilter<"Comments"> | string
    content?: StringFilter<"Comments"> | string
    order?: IntFilter<"Comments"> | number
    createdAt?: DateTimeFilter<"Comments"> | Date | string
    updatedAt?: DateTimeFilter<"Comments"> | Date | string
    thema?: StringNullableFilter<"Comments"> | string | null
    authorId?: StringFilter<"Comments"> | string
    parentCommentId?: StringNullableFilter<"Comments"> | string | null
    featureId?: StringNullableFilter<"Comments"> | string | null
    userStoryId?: StringNullableFilter<"Comments"> | string | null
    taskId?: StringNullableFilter<"Comments"> | string | null
    sprintId?: StringNullableFilter<"Comments"> | string | null
    roadMapId?: StringNullableFilter<"Comments"> | string | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    parentComment?: XOR<CommentsNullableScalarRelationFilter, CommentsWhereInput> | null
    childComments?: CommentsListRelationFilter
    feature?: XOR<FeaturesNullableScalarRelationFilter, FeaturesWhereInput> | null
    userStory?: XOR<UserStoryNullableScalarRelationFilter, UserStoryWhereInput> | null
    task?: XOR<TasksNullableScalarRelationFilter, TasksWhereInput> | null
    sprint?: XOR<SprintsNullableScalarRelationFilter, SprintsWhereInput> | null
    roadMap?: XOR<RoadMapNullableScalarRelationFilter, RoadMapWhereInput> | null
  }, "id">

  export type CommentsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    thema?: SortOrderInput | SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrderInput | SortOrder
    featureId?: SortOrderInput | SortOrder
    userStoryId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    sprintId?: SortOrderInput | SortOrder
    roadMapId?: SortOrderInput | SortOrder
    _count?: CommentsCountOrderByAggregateInput
    _avg?: CommentsAvgOrderByAggregateInput
    _max?: CommentsMaxOrderByAggregateInput
    _min?: CommentsMinOrderByAggregateInput
    _sum?: CommentsSumOrderByAggregateInput
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    OR?: CommentsScalarWhereWithAggregatesInput[]
    NOT?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comments"> | string
    title?: StringWithAggregatesFilter<"Comments"> | string
    content?: StringWithAggregatesFilter<"Comments"> | string
    order?: IntWithAggregatesFilter<"Comments"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Comments"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comments"> | Date | string
    thema?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    authorId?: StringWithAggregatesFilter<"Comments"> | string
    parentCommentId?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    featureId?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    userStoryId?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    sprintId?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    roadMapId?: StringNullableWithAggregatesFilter<"Comments"> | string | null
  }

  export type FilesWhereInput = {
    AND?: FilesWhereInput | FilesWhereInput[]
    OR?: FilesWhereInput[]
    NOT?: FilesWhereInput | FilesWhereInput[]
    id?: StringFilter<"Files"> | string
    name?: StringFilter<"Files"> | string
    extension?: StringNullableFilter<"Files"> | string | null
    url?: StringFilter<"Files"> | string
    category?: StringFilter<"Files"> | string
    type?: EnumFileTypeFilter<"Files"> | $Enums.FileType
    description?: StringNullableFilter<"Files"> | string | null
    fonctionnalities?: StringNullableFilter<"Files"> | string | null
    import?: StringNullableFilter<"Files"> | string | null
    export?: StringNullableFilter<"Files"> | string | null
    useby?: StringNullableFilter<"Files"> | string | null
    script?: StringNullableFilter<"Files"> | string | null
    version?: StringNullableFilter<"Files"> | string | null
    order?: IntFilter<"Files"> | number
    devorder?: IntFilter<"Files"> | number
    status?: EnumStatusFilter<"Files"> | $Enums.Status
    createdAt?: DateTimeFilter<"Files"> | Date | string
    creator?: StringNullableFilter<"Files"> | string | null
    projectId?: StringFilter<"Files"> | string
    uploaderId?: StringFilter<"Files"> | string
    parentFileId?: StringNullableFilter<"Files"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    parentFile?: XOR<FilesNullableScalarRelationFilter, FilesWhereInput> | null
    childFiles?: FilesListRelationFilter
    roadMaps?: RoadMapListRelationFilter
  }

  export type FilesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    extension?: SortOrderInput | SortOrder
    url?: SortOrder
    category?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    fonctionnalities?: SortOrderInput | SortOrder
    import?: SortOrderInput | SortOrder
    export?: SortOrderInput | SortOrder
    useby?: SortOrderInput | SortOrder
    script?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    order?: SortOrder
    devorder?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    creator?: SortOrderInput | SortOrder
    projectId?: SortOrder
    uploaderId?: SortOrder
    parentFileId?: SortOrderInput | SortOrder
    project?: ProjectsOrderByWithRelationInput
    uploader?: UserOrderByWithRelationInput
    parentFile?: FilesOrderByWithRelationInput
    childFiles?: FilesOrderByRelationAggregateInput
    roadMaps?: RoadMapOrderByRelationAggregateInput
  }

  export type FilesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FilesWhereInput | FilesWhereInput[]
    OR?: FilesWhereInput[]
    NOT?: FilesWhereInput | FilesWhereInput[]
    name?: StringFilter<"Files"> | string
    extension?: StringNullableFilter<"Files"> | string | null
    url?: StringFilter<"Files"> | string
    category?: StringFilter<"Files"> | string
    type?: EnumFileTypeFilter<"Files"> | $Enums.FileType
    description?: StringNullableFilter<"Files"> | string | null
    fonctionnalities?: StringNullableFilter<"Files"> | string | null
    import?: StringNullableFilter<"Files"> | string | null
    export?: StringNullableFilter<"Files"> | string | null
    useby?: StringNullableFilter<"Files"> | string | null
    script?: StringNullableFilter<"Files"> | string | null
    version?: StringNullableFilter<"Files"> | string | null
    order?: IntFilter<"Files"> | number
    devorder?: IntFilter<"Files"> | number
    status?: EnumStatusFilter<"Files"> | $Enums.Status
    createdAt?: DateTimeFilter<"Files"> | Date | string
    creator?: StringNullableFilter<"Files"> | string | null
    projectId?: StringFilter<"Files"> | string
    uploaderId?: StringFilter<"Files"> | string
    parentFileId?: StringNullableFilter<"Files"> | string | null
    project?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    parentFile?: XOR<FilesNullableScalarRelationFilter, FilesWhereInput> | null
    childFiles?: FilesListRelationFilter
    roadMaps?: RoadMapListRelationFilter
  }, "id">

  export type FilesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    extension?: SortOrderInput | SortOrder
    url?: SortOrder
    category?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    fonctionnalities?: SortOrderInput | SortOrder
    import?: SortOrderInput | SortOrder
    export?: SortOrderInput | SortOrder
    useby?: SortOrderInput | SortOrder
    script?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    order?: SortOrder
    devorder?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    creator?: SortOrderInput | SortOrder
    projectId?: SortOrder
    uploaderId?: SortOrder
    parentFileId?: SortOrderInput | SortOrder
    _count?: FilesCountOrderByAggregateInput
    _avg?: FilesAvgOrderByAggregateInput
    _max?: FilesMaxOrderByAggregateInput
    _min?: FilesMinOrderByAggregateInput
    _sum?: FilesSumOrderByAggregateInput
  }

  export type FilesScalarWhereWithAggregatesInput = {
    AND?: FilesScalarWhereWithAggregatesInput | FilesScalarWhereWithAggregatesInput[]
    OR?: FilesScalarWhereWithAggregatesInput[]
    NOT?: FilesScalarWhereWithAggregatesInput | FilesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Files"> | string
    name?: StringWithAggregatesFilter<"Files"> | string
    extension?: StringNullableWithAggregatesFilter<"Files"> | string | null
    url?: StringWithAggregatesFilter<"Files"> | string
    category?: StringWithAggregatesFilter<"Files"> | string
    type?: EnumFileTypeWithAggregatesFilter<"Files"> | $Enums.FileType
    description?: StringNullableWithAggregatesFilter<"Files"> | string | null
    fonctionnalities?: StringNullableWithAggregatesFilter<"Files"> | string | null
    import?: StringNullableWithAggregatesFilter<"Files"> | string | null
    export?: StringNullableWithAggregatesFilter<"Files"> | string | null
    useby?: StringNullableWithAggregatesFilter<"Files"> | string | null
    script?: StringNullableWithAggregatesFilter<"Files"> | string | null
    version?: StringNullableWithAggregatesFilter<"Files"> | string | null
    order?: IntWithAggregatesFilter<"Files"> | number
    devorder?: IntWithAggregatesFilter<"Files"> | number
    status?: EnumStatusWithAggregatesFilter<"Files"> | $Enums.Status
    createdAt?: DateTimeWithAggregatesFilter<"Files"> | Date | string
    creator?: StringNullableWithAggregatesFilter<"Files"> | string | null
    projectId?: StringWithAggregatesFilter<"Files"> | string
    uploaderId?: StringWithAggregatesFilter<"Files"> | string
    parentFileId?: StringNullableWithAggregatesFilter<"Files"> | string | null
  }

  export type ActivityLogsWhereInput = {
    AND?: ActivityLogsWhereInput | ActivityLogsWhereInput[]
    OR?: ActivityLogsWhereInput[]
    NOT?: ActivityLogsWhereInput | ActivityLogsWhereInput[]
    id?: StringFilter<"ActivityLogs"> | string
    type?: EnumActionTypeFilter<"ActivityLogs"> | $Enums.ActionType
    message?: StringFilter<"ActivityLogs"> | string
    createdAt?: DateTimeFilter<"ActivityLogs"> | Date | string
    userId?: StringFilter<"ActivityLogs"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ActivityLogsOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ActivityLogsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityLogsWhereInput | ActivityLogsWhereInput[]
    OR?: ActivityLogsWhereInput[]
    NOT?: ActivityLogsWhereInput | ActivityLogsWhereInput[]
    type?: EnumActionTypeFilter<"ActivityLogs"> | $Enums.ActionType
    message?: StringFilter<"ActivityLogs"> | string
    createdAt?: DateTimeFilter<"ActivityLogs"> | Date | string
    userId?: StringFilter<"ActivityLogs"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ActivityLogsOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: ActivityLogsCountOrderByAggregateInput
    _max?: ActivityLogsMaxOrderByAggregateInput
    _min?: ActivityLogsMinOrderByAggregateInput
  }

  export type ActivityLogsScalarWhereWithAggregatesInput = {
    AND?: ActivityLogsScalarWhereWithAggregatesInput | ActivityLogsScalarWhereWithAggregatesInput[]
    OR?: ActivityLogsScalarWhereWithAggregatesInput[]
    NOT?: ActivityLogsScalarWhereWithAggregatesInput | ActivityLogsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityLogs"> | string
    type?: EnumActionTypeWithAggregatesFilter<"ActivityLogs"> | $Enums.ActionType
    message?: StringWithAggregatesFilter<"ActivityLogs"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityLogs"> | Date | string
    userId?: StringWithAggregatesFilter<"ActivityLogs"> | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    idToken?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    idToken?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    idToken?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVerificationsInput
  }

  export type VerificationUncheckedCreateInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVerificationsNestedInput
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationCreateManyInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamsCreateInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedTeamsInput
    members?: UserCreateNestedManyWithoutMemberTeamsInput
    projects?: ProjectsCreateNestedManyWithoutTeamsInput
  }

  export type TeamsUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutMemberTeamsInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type TeamsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedTeamsNestedInput
    members?: UserUpdateManyWithoutMemberTeamsNestedInput
    projects?: ProjectsUpdateManyWithoutTeamsNestedInput
  }

  export type TeamsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutMemberTeamsNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type TeamsCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsCreateInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsCreateManyInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
  }

  export type ProjectsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoadMapCreateInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapCreateManyInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
  }

  export type RoadMapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadMapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesCreateInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesCreateManyInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
  }

  export type FeaturesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryCreateInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryCreateManyInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
  }

  export type UserStoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SprintsCreateInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsCreateManyInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
  }

  export type TasksUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchemaFieldsCreateInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSchemaFieldsInput
    parentField?: SchemaFieldsCreateNestedOneWithoutChildFieldsInput
    childFields?: SchemaFieldsCreateNestedManyWithoutParentFieldInput
  }

  export type SchemaFieldsUncheckedCreateInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    projectId: string
    parentFieldId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    childFields?: SchemaFieldsUncheckedCreateNestedManyWithoutParentFieldInput
  }

  export type SchemaFieldsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSchemaFieldsNestedInput
    parentField?: SchemaFieldsUpdateOneWithoutChildFieldsNestedInput
    childFields?: SchemaFieldsUpdateManyWithoutParentFieldNestedInput
  }

  export type SchemaFieldsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
    parentFieldId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childFields?: SchemaFieldsUncheckedUpdateManyWithoutParentFieldNestedInput
  }

  export type SchemaFieldsCreateManyInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    projectId: string
    parentFieldId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchemaFieldsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchemaFieldsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
    parentFieldId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeLogCreateInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTimeLogsInput
    user: UserCreateNestedOneWithoutTimeLogsInput
    task?: TasksCreateNestedOneWithoutTimeLogsInput
  }

  export type TimeLogUncheckedCreateInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    projectId: string
    userId: string
    taskId?: string | null
  }

  export type TimeLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTimeLogsNestedInput
    user?: UserUpdateOneRequiredWithoutTimeLogsNestedInput
    task?: TasksUpdateOneWithoutTimeLogsNestedInput
  }

  export type TimeLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimeLogCreateManyInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    projectId: string
    userId: string
    taskId?: string | null
  }

  export type TimeLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsCreateInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsCreateManyInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type CommentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilesCreateInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    project: ProjectsCreateNestedOneWithoutFilesInput
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    parentFile?: FilesCreateNestedOneWithoutChildFilesInput
    childFiles?: FilesCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapCreateNestedManyWithoutFilesInput
  }

  export type FilesUncheckedCreateInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    uploaderId: string
    parentFileId?: string | null
    childFiles?: FilesUncheckedCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FilesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectsUpdateOneRequiredWithoutFilesNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    parentFile?: FilesUpdateOneWithoutChildFilesNestedInput
    childFiles?: FilesUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
    childFiles?: FilesUncheckedUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FilesCreateManyInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    uploaderId: string
    parentFileId?: string | null
  }

  export type FilesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogsCreateInput = {
    id?: string
    type: $Enums.ActionType
    message: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogsUncheckedCreateInput = {
    id?: string
    type: $Enums.ActionType
    message: string
    createdAt?: Date | string
    userId: string
  }

  export type ActivityLogsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityLogsNestedInput
  }

  export type ActivityLogsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityLogsCreateManyInput = {
    id?: string
    type: $Enums.ActionType
    message: string
    createdAt?: Date | string
    userId: string
  }

  export type ActivityLogsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type VerificationListRelationFilter = {
    every?: VerificationWhereInput
    some?: VerificationWhereInput
    none?: VerificationWhereInput
  }

  export type ProjectsListRelationFilter = {
    every?: ProjectsWhereInput
    some?: ProjectsWhereInput
    none?: ProjectsWhereInput
  }

  export type FeaturesListRelationFilter = {
    every?: FeaturesWhereInput
    some?: FeaturesWhereInput
    none?: FeaturesWhereInput
  }

  export type UserStoryListRelationFilter = {
    every?: UserStoryWhereInput
    some?: UserStoryWhereInput
    none?: UserStoryWhereInput
  }

  export type TasksListRelationFilter = {
    every?: TasksWhereInput
    some?: TasksWhereInput
    none?: TasksWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: CommentsWhereInput
    some?: CommentsWhereInput
    none?: CommentsWhereInput
  }

  export type TimeLogListRelationFilter = {
    every?: TimeLogWhereInput
    some?: TimeLogWhereInput
    none?: TimeLogWhereInput
  }

  export type ActivityLogsListRelationFilter = {
    every?: ActivityLogsWhereInput
    some?: ActivityLogsWhereInput
    none?: ActivityLogsWhereInput
  }

  export type FilesListRelationFilter = {
    every?: FilesWhereInput
    some?: FilesWhereInput
    none?: FilesWhereInput
  }

  export type TeamsListRelationFilter = {
    every?: TeamsWhereInput
    some?: TeamsWhereInput
    none?: TeamsWhereInput
  }

  export type RoadMapListRelationFilter = {
    every?: RoadMapWhereInput
    some?: RoadMapWhereInput
    none?: RoadMapWhereInput
  }

  export type SprintsListRelationFilter = {
    every?: SprintsWhereInput
    some?: SprintsWhereInput
    none?: SprintsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeaturesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserStoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimeLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityLogsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FilesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoadMapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SprintsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    lang?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    lang?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    lang?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    idToken?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    idToken?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    idToken?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    privileges?: SortOrder
    teamType?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    privileges?: SortOrder
    teamType?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    privileges?: SortOrder
    teamType?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type SchemaFieldsListRelationFilter = {
    every?: SchemaFieldsWhereInput
    some?: SchemaFieldsWhereInput
    none?: SchemaFieldsWhereInput
  }

  export type SchemaFieldsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ordre?: SortOrder
    description?: SortOrder
    image?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
  }

  export type ProjectsAvgOrderByAggregateInput = {
    ordre?: SortOrder
    priority?: SortOrder
  }

  export type ProjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ordre?: SortOrder
    description?: SortOrder
    image?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
  }

  export type ProjectsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ordre?: SortOrder
    description?: SortOrder
    image?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creatorId?: SortOrder
  }

  export type ProjectsSumOrderByAggregateInput = {
    ordre?: SortOrder
    priority?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type ProjectsScalarRelationFilter = {
    is?: ProjectsWhereInput
    isNot?: ProjectsWhereInput
  }

  export type RoadMapCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ordre?: SortOrder
    phase?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
    deliverables?: SortOrder
    technologies?: SortOrder
    dependencies?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
  }

  export type RoadMapAvgOrderByAggregateInput = {
    ordre?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
  }

  export type RoadMapMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ordre?: SortOrder
    phase?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
    deliverables?: SortOrder
    technologies?: SortOrder
    dependencies?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
  }

  export type RoadMapMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ordre?: SortOrder
    phase?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
    deliverables?: SortOrder
    technologies?: SortOrder
    dependencies?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
  }

  export type RoadMapSumOrderByAggregateInput = {
    ordre?: SortOrder
    estimatedDays?: SortOrder
    progress?: SortOrder
  }

  export type FeaturesNullableScalarRelationFilter = {
    is?: FeaturesWhereInput | null
    isNot?: FeaturesWhereInput | null
  }

  export type FeaturesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    parentFeatureId?: SortOrder
  }

  export type FeaturesAvgOrderByAggregateInput = {
    order?: SortOrder
    priority?: SortOrder
  }

  export type FeaturesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    parentFeatureId?: SortOrder
  }

  export type FeaturesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    parentFeatureId?: SortOrder
  }

  export type FeaturesSumOrderByAggregateInput = {
    order?: SortOrder
    priority?: SortOrder
  }

  export type UserStoryNullableScalarRelationFilter = {
    is?: UserStoryWhereInput | null
    isNot?: UserStoryWhereInput | null
  }

  export type UserStoryCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    goal?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    parentUserStoryId?: SortOrder
  }

  export type UserStoryAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type UserStoryMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    goal?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    parentUserStoryId?: SortOrder
  }

  export type UserStoryMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    goal?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    parentUserStoryId?: SortOrder
  }

  export type UserStorySumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumSprintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SprintStatus[]
    notIn?: $Enums.SprintStatus[]
    not?: NestedEnumSprintStatusFilter<$PrismaModel> | $Enums.SprintStatus
  }

  export type SprintsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSprintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SprintStatus[]
    notIn?: $Enums.SprintStatus[]
    not?: NestedEnumSprintStatusWithAggregatesFilter<$PrismaModel> | $Enums.SprintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSprintStatusFilter<$PrismaModel>
    _max?: NestedEnumSprintStatusFilter<$PrismaModel>
  }

  export type TasksNullableScalarRelationFilter = {
    is?: TasksWhereInput | null
    isNot?: TasksWhereInput | null
  }

  export type TasksCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrder
    parentTaskId?: SortOrder
  }

  export type TasksAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type TasksMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrder
    parentTaskId?: SortOrder
  }

  export type TasksMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrder
    parentTaskId?: SortOrder
  }

  export type TasksSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumFieldTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FieldType[] | null
    notIn?: $Enums.FieldType[] | null
    not?: NestedEnumFieldTypeNullableFilter<$PrismaModel> | $Enums.FieldType | null
  }

  export type SchemaFieldsNullableScalarRelationFilter = {
    is?: SchemaFieldsWhereInput | null
    isNot?: SchemaFieldsWhereInput | null
  }

  export type SchemaFieldsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isUnique?: SortOrder
    defaultValue?: SortOrder
    description?: SortOrder
    comment?: SortOrder
    order?: SortOrder
    projectId?: SortOrder
    parentFieldId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchemaFieldsAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type SchemaFieldsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isUnique?: SortOrder
    defaultValue?: SortOrder
    description?: SortOrder
    comment?: SortOrder
    order?: SortOrder
    projectId?: SortOrder
    parentFieldId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchemaFieldsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isUnique?: SortOrder
    defaultValue?: SortOrder
    description?: SortOrder
    comment?: SortOrder
    order?: SortOrder
    projectId?: SortOrder
    parentFieldId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchemaFieldsSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumFieldTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FieldType[] | null
    notIn?: $Enums.FieldType[] | null
    not?: NestedEnumFieldTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.FieldType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeNullableFilter<$PrismaModel>
  }

  export type TimeLogCountOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TimeLogAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type TimeLogMaxOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TimeLogMinOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TimeLogSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type CommentsNullableScalarRelationFilter = {
    is?: CommentsWhereInput | null
    isNot?: CommentsWhereInput | null
  }

  export type SprintsNullableScalarRelationFilter = {
    is?: SprintsWhereInput | null
    isNot?: SprintsWhereInput | null
  }

  export type RoadMapNullableScalarRelationFilter = {
    is?: RoadMapWhereInput | null
    isNot?: RoadMapWhereInput | null
  }

  export type CommentsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    thema?: SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrder
    featureId?: SortOrder
    userStoryId?: SortOrder
    taskId?: SortOrder
    sprintId?: SortOrder
    roadMapId?: SortOrder
  }

  export type CommentsAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type CommentsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    thema?: SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrder
    featureId?: SortOrder
    userStoryId?: SortOrder
    taskId?: SortOrder
    sprintId?: SortOrder
    roadMapId?: SortOrder
  }

  export type CommentsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    thema?: SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrder
    featureId?: SortOrder
    userStoryId?: SortOrder
    taskId?: SortOrder
    sprintId?: SortOrder
    roadMapId?: SortOrder
  }

  export type CommentsSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumFileTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[]
    notIn?: $Enums.FileType[]
    not?: NestedEnumFileTypeFilter<$PrismaModel> | $Enums.FileType
  }

  export type FilesNullableScalarRelationFilter = {
    is?: FilesWhereInput | null
    isNot?: FilesWhereInput | null
  }

  export type FilesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    extension?: SortOrder
    url?: SortOrder
    category?: SortOrder
    type?: SortOrder
    description?: SortOrder
    fonctionnalities?: SortOrder
    import?: SortOrder
    export?: SortOrder
    useby?: SortOrder
    script?: SortOrder
    version?: SortOrder
    order?: SortOrder
    devorder?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    creator?: SortOrder
    projectId?: SortOrder
    uploaderId?: SortOrder
    parentFileId?: SortOrder
  }

  export type FilesAvgOrderByAggregateInput = {
    order?: SortOrder
    devorder?: SortOrder
  }

  export type FilesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    extension?: SortOrder
    url?: SortOrder
    category?: SortOrder
    type?: SortOrder
    description?: SortOrder
    fonctionnalities?: SortOrder
    import?: SortOrder
    export?: SortOrder
    useby?: SortOrder
    script?: SortOrder
    version?: SortOrder
    order?: SortOrder
    devorder?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    creator?: SortOrder
    projectId?: SortOrder
    uploaderId?: SortOrder
    parentFileId?: SortOrder
  }

  export type FilesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    extension?: SortOrder
    url?: SortOrder
    category?: SortOrder
    type?: SortOrder
    description?: SortOrder
    fonctionnalities?: SortOrder
    import?: SortOrder
    export?: SortOrder
    useby?: SortOrder
    script?: SortOrder
    version?: SortOrder
    order?: SortOrder
    devorder?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    creator?: SortOrder
    projectId?: SortOrder
    uploaderId?: SortOrder
    parentFileId?: SortOrder
  }

  export type FilesSumOrderByAggregateInput = {
    order?: SortOrder
    devorder?: SortOrder
  }

  export type EnumFileTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[]
    notIn?: $Enums.FileType[]
    not?: NestedEnumFileTypeWithAggregatesFilter<$PrismaModel> | $Enums.FileType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileTypeFilter<$PrismaModel>
    _max?: NestedEnumFileTypeFilter<$PrismaModel>
  }

  export type EnumActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[]
    notIn?: $Enums.ActionType[]
    not?: NestedEnumActionTypeFilter<$PrismaModel> | $Enums.ActionType
  }

  export type ActivityLogsCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ActivityLogsMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ActivityLogsMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type EnumActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[]
    notIn?: $Enums.ActionType[]
    not?: NestedEnumActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionTypeFilter<$PrismaModel>
    _max?: NestedEnumActionTypeFilter<$PrismaModel>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type VerificationCreateNestedManyWithoutUserInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
  }

  export type ProjectsCreateNestedManyWithoutUsersInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type ProjectsCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProjectsCreateWithoutCreatorInput, ProjectsUncheckedCreateWithoutCreatorInput> | ProjectsCreateWithoutCreatorInput[] | ProjectsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutCreatorInput | ProjectsCreateOrConnectWithoutCreatorInput[]
    createMany?: ProjectsCreateManyCreatorInputEnvelope
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type FeaturesCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FeaturesCreateWithoutCreatorInput, FeaturesUncheckedCreateWithoutCreatorInput> | FeaturesCreateWithoutCreatorInput[] | FeaturesUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutCreatorInput | FeaturesCreateOrConnectWithoutCreatorInput[]
    createMany?: FeaturesCreateManyCreatorInputEnvelope
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryCreateNestedManyWithoutCreatorInput = {
    create?: XOR<UserStoryCreateWithoutCreatorInput, UserStoryUncheckedCreateWithoutCreatorInput> | UserStoryCreateWithoutCreatorInput[] | UserStoryUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutCreatorInput | UserStoryCreateOrConnectWithoutCreatorInput[]
    createMany?: UserStoryCreateManyCreatorInputEnvelope
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type TasksCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TasksCreateWithoutAssigneeInput, TasksUncheckedCreateWithoutAssigneeInput> | TasksCreateWithoutAssigneeInput[] | TasksUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutAssigneeInput | TasksCreateOrConnectWithoutAssigneeInput[]
    createMany?: TasksCreateManyAssigneeInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type CommentsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentsCreateWithoutAuthorInput, CommentsUncheckedCreateWithoutAuthorInput> | CommentsCreateWithoutAuthorInput[] | CommentsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutAuthorInput | CommentsCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentsCreateManyAuthorInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type TimeLogCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeLogCreateWithoutUserInput, TimeLogUncheckedCreateWithoutUserInput> | TimeLogCreateWithoutUserInput[] | TimeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutUserInput | TimeLogCreateOrConnectWithoutUserInput[]
    createMany?: TimeLogCreateManyUserInputEnvelope
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
  }

  export type ActivityLogsCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogsCreateWithoutUserInput, ActivityLogsUncheckedCreateWithoutUserInput> | ActivityLogsCreateWithoutUserInput[] | ActivityLogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogsCreateOrConnectWithoutUserInput | ActivityLogsCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogsCreateManyUserInputEnvelope
    connect?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
  }

  export type FilesCreateNestedManyWithoutUploaderInput = {
    create?: XOR<FilesCreateWithoutUploaderInput, FilesUncheckedCreateWithoutUploaderInput> | FilesCreateWithoutUploaderInput[] | FilesUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutUploaderInput | FilesCreateOrConnectWithoutUploaderInput[]
    createMany?: FilesCreateManyUploaderInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type TeamsCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TeamsCreateWithoutCreatorInput, TeamsUncheckedCreateWithoutCreatorInput> | TeamsCreateWithoutCreatorInput[] | TeamsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutCreatorInput | TeamsCreateOrConnectWithoutCreatorInput[]
    createMany?: TeamsCreateManyCreatorInputEnvelope
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type TeamsCreateNestedManyWithoutMembersInput = {
    create?: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput> | TeamsCreateWithoutMembersInput[] | TeamsUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutMembersInput | TeamsCreateOrConnectWithoutMembersInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutCreatorInput = {
    create?: XOR<RoadMapCreateWithoutCreatorInput, RoadMapUncheckedCreateWithoutCreatorInput> | RoadMapCreateWithoutCreatorInput[] | RoadMapUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutCreatorInput | RoadMapCreateOrConnectWithoutCreatorInput[]
    createMany?: RoadMapCreateManyCreatorInputEnvelope
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type SprintsCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SprintsCreateWithoutCreatorInput, SprintsUncheckedCreateWithoutCreatorInput> | SprintsCreateWithoutCreatorInput[] | SprintsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutCreatorInput | SprintsCreateOrConnectWithoutCreatorInput[]
    createMany?: SprintsCreateManyCreatorInputEnvelope
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type VerificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
  }

  export type ProjectsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type ProjectsUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProjectsCreateWithoutCreatorInput, ProjectsUncheckedCreateWithoutCreatorInput> | ProjectsCreateWithoutCreatorInput[] | ProjectsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutCreatorInput | ProjectsCreateOrConnectWithoutCreatorInput[]
    createMany?: ProjectsCreateManyCreatorInputEnvelope
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FeaturesCreateWithoutCreatorInput, FeaturesUncheckedCreateWithoutCreatorInput> | FeaturesCreateWithoutCreatorInput[] | FeaturesUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutCreatorInput | FeaturesCreateOrConnectWithoutCreatorInput[]
    createMany?: FeaturesCreateManyCreatorInputEnvelope
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<UserStoryCreateWithoutCreatorInput, UserStoryUncheckedCreateWithoutCreatorInput> | UserStoryCreateWithoutCreatorInput[] | UserStoryUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutCreatorInput | UserStoryCreateOrConnectWithoutCreatorInput[]
    createMany?: UserStoryCreateManyCreatorInputEnvelope
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TasksCreateWithoutAssigneeInput, TasksUncheckedCreateWithoutAssigneeInput> | TasksCreateWithoutAssigneeInput[] | TasksUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutAssigneeInput | TasksCreateOrConnectWithoutAssigneeInput[]
    createMany?: TasksCreateManyAssigneeInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentsCreateWithoutAuthorInput, CommentsUncheckedCreateWithoutAuthorInput> | CommentsCreateWithoutAuthorInput[] | CommentsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutAuthorInput | CommentsCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentsCreateManyAuthorInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type TimeLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeLogCreateWithoutUserInput, TimeLogUncheckedCreateWithoutUserInput> | TimeLogCreateWithoutUserInput[] | TimeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutUserInput | TimeLogCreateOrConnectWithoutUserInput[]
    createMany?: TimeLogCreateManyUserInputEnvelope
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
  }

  export type ActivityLogsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogsCreateWithoutUserInput, ActivityLogsUncheckedCreateWithoutUserInput> | ActivityLogsCreateWithoutUserInput[] | ActivityLogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogsCreateOrConnectWithoutUserInput | ActivityLogsCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogsCreateManyUserInputEnvelope
    connect?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
  }

  export type FilesUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<FilesCreateWithoutUploaderInput, FilesUncheckedCreateWithoutUploaderInput> | FilesCreateWithoutUploaderInput[] | FilesUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutUploaderInput | FilesCreateOrConnectWithoutUploaderInput[]
    createMany?: FilesCreateManyUploaderInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type TeamsUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TeamsCreateWithoutCreatorInput, TeamsUncheckedCreateWithoutCreatorInput> | TeamsCreateWithoutCreatorInput[] | TeamsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutCreatorInput | TeamsCreateOrConnectWithoutCreatorInput[]
    createMany?: TeamsCreateManyCreatorInputEnvelope
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type TeamsUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput> | TeamsCreateWithoutMembersInput[] | TeamsUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutMembersInput | TeamsCreateOrConnectWithoutMembersInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<RoadMapCreateWithoutCreatorInput, RoadMapUncheckedCreateWithoutCreatorInput> | RoadMapCreateWithoutCreatorInput[] | RoadMapUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutCreatorInput | RoadMapCreateOrConnectWithoutCreatorInput[]
    createMany?: RoadMapCreateManyCreatorInputEnvelope
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type SprintsUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SprintsCreateWithoutCreatorInput, SprintsUncheckedCreateWithoutCreatorInput> | SprintsCreateWithoutCreatorInput[] | SprintsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutCreatorInput | SprintsCreateOrConnectWithoutCreatorInput[]
    createMany?: SprintsCreateManyCreatorInputEnvelope
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type VerificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    upsert?: VerificationUpsertWithWhereUniqueWithoutUserInput | VerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    set?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    disconnect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    delete?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    update?: VerificationUpdateWithWhereUniqueWithoutUserInput | VerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VerificationUpdateManyWithWhereWithoutUserInput | VerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
  }

  export type ProjectsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutUsersInput | ProjectsUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutUsersInput | ProjectsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutUsersInput | ProjectsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type ProjectsUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProjectsCreateWithoutCreatorInput, ProjectsUncheckedCreateWithoutCreatorInput> | ProjectsCreateWithoutCreatorInput[] | ProjectsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutCreatorInput | ProjectsCreateOrConnectWithoutCreatorInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutCreatorInput | ProjectsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProjectsCreateManyCreatorInputEnvelope
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutCreatorInput | ProjectsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutCreatorInput | ProjectsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type FeaturesUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FeaturesCreateWithoutCreatorInput, FeaturesUncheckedCreateWithoutCreatorInput> | FeaturesCreateWithoutCreatorInput[] | FeaturesUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutCreatorInput | FeaturesCreateOrConnectWithoutCreatorInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutCreatorInput | FeaturesUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FeaturesCreateManyCreatorInputEnvelope
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutCreatorInput | FeaturesUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutCreatorInput | FeaturesUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<UserStoryCreateWithoutCreatorInput, UserStoryUncheckedCreateWithoutCreatorInput> | UserStoryCreateWithoutCreatorInput[] | UserStoryUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutCreatorInput | UserStoryCreateOrConnectWithoutCreatorInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutCreatorInput | UserStoryUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: UserStoryCreateManyCreatorInputEnvelope
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutCreatorInput | UserStoryUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutCreatorInput | UserStoryUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type TasksUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TasksCreateWithoutAssigneeInput, TasksUncheckedCreateWithoutAssigneeInput> | TasksCreateWithoutAssigneeInput[] | TasksUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutAssigneeInput | TasksCreateOrConnectWithoutAssigneeInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutAssigneeInput | TasksUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TasksCreateManyAssigneeInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutAssigneeInput | TasksUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutAssigneeInput | TasksUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type CommentsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentsCreateWithoutAuthorInput, CommentsUncheckedCreateWithoutAuthorInput> | CommentsCreateWithoutAuthorInput[] | CommentsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutAuthorInput | CommentsCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutAuthorInput | CommentsUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentsCreateManyAuthorInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutAuthorInput | CommentsUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutAuthorInput | CommentsUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type TimeLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeLogCreateWithoutUserInput, TimeLogUncheckedCreateWithoutUserInput> | TimeLogCreateWithoutUserInput[] | TimeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutUserInput | TimeLogCreateOrConnectWithoutUserInput[]
    upsert?: TimeLogUpsertWithWhereUniqueWithoutUserInput | TimeLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeLogCreateManyUserInputEnvelope
    set?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    disconnect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    delete?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    update?: TimeLogUpdateWithWhereUniqueWithoutUserInput | TimeLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeLogUpdateManyWithWhereWithoutUserInput | TimeLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
  }

  export type ActivityLogsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogsCreateWithoutUserInput, ActivityLogsUncheckedCreateWithoutUserInput> | ActivityLogsCreateWithoutUserInput[] | ActivityLogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogsCreateOrConnectWithoutUserInput | ActivityLogsCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogsUpsertWithWhereUniqueWithoutUserInput | ActivityLogsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogsCreateManyUserInputEnvelope
    set?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    disconnect?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    delete?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    connect?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    update?: ActivityLogsUpdateWithWhereUniqueWithoutUserInput | ActivityLogsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogsUpdateManyWithWhereWithoutUserInput | ActivityLogsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogsScalarWhereInput | ActivityLogsScalarWhereInput[]
  }

  export type FilesUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<FilesCreateWithoutUploaderInput, FilesUncheckedCreateWithoutUploaderInput> | FilesCreateWithoutUploaderInput[] | FilesUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutUploaderInput | FilesCreateOrConnectWithoutUploaderInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutUploaderInput | FilesUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: FilesCreateManyUploaderInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutUploaderInput | FilesUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutUploaderInput | FilesUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type TeamsUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TeamsCreateWithoutCreatorInput, TeamsUncheckedCreateWithoutCreatorInput> | TeamsCreateWithoutCreatorInput[] | TeamsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutCreatorInput | TeamsCreateOrConnectWithoutCreatorInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutCreatorInput | TeamsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TeamsCreateManyCreatorInputEnvelope
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutCreatorInput | TeamsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutCreatorInput | TeamsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type TeamsUpdateManyWithoutMembersNestedInput = {
    create?: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput> | TeamsCreateWithoutMembersInput[] | TeamsUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutMembersInput | TeamsCreateOrConnectWithoutMembersInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutMembersInput | TeamsUpsertWithWhereUniqueWithoutMembersInput[]
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutMembersInput | TeamsUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutMembersInput | TeamsUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<RoadMapCreateWithoutCreatorInput, RoadMapUncheckedCreateWithoutCreatorInput> | RoadMapCreateWithoutCreatorInput[] | RoadMapUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutCreatorInput | RoadMapCreateOrConnectWithoutCreatorInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutCreatorInput | RoadMapUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: RoadMapCreateManyCreatorInputEnvelope
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutCreatorInput | RoadMapUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutCreatorInput | RoadMapUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type SprintsUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SprintsCreateWithoutCreatorInput, SprintsUncheckedCreateWithoutCreatorInput> | SprintsCreateWithoutCreatorInput[] | SprintsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutCreatorInput | SprintsCreateOrConnectWithoutCreatorInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutCreatorInput | SprintsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SprintsCreateManyCreatorInputEnvelope
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutCreatorInput | SprintsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutCreatorInput | SprintsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type VerificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    upsert?: VerificationUpsertWithWhereUniqueWithoutUserInput | VerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    set?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    disconnect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    delete?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    update?: VerificationUpdateWithWhereUniqueWithoutUserInput | VerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VerificationUpdateManyWithWhereWithoutUserInput | VerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
  }

  export type ProjectsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutUsersInput | ProjectsUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutUsersInput | ProjectsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutUsersInput | ProjectsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type ProjectsUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProjectsCreateWithoutCreatorInput, ProjectsUncheckedCreateWithoutCreatorInput> | ProjectsCreateWithoutCreatorInput[] | ProjectsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutCreatorInput | ProjectsCreateOrConnectWithoutCreatorInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutCreatorInput | ProjectsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProjectsCreateManyCreatorInputEnvelope
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutCreatorInput | ProjectsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutCreatorInput | ProjectsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FeaturesCreateWithoutCreatorInput, FeaturesUncheckedCreateWithoutCreatorInput> | FeaturesCreateWithoutCreatorInput[] | FeaturesUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutCreatorInput | FeaturesCreateOrConnectWithoutCreatorInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutCreatorInput | FeaturesUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FeaturesCreateManyCreatorInputEnvelope
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutCreatorInput | FeaturesUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutCreatorInput | FeaturesUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<UserStoryCreateWithoutCreatorInput, UserStoryUncheckedCreateWithoutCreatorInput> | UserStoryCreateWithoutCreatorInput[] | UserStoryUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutCreatorInput | UserStoryCreateOrConnectWithoutCreatorInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutCreatorInput | UserStoryUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: UserStoryCreateManyCreatorInputEnvelope
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutCreatorInput | UserStoryUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutCreatorInput | UserStoryUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TasksCreateWithoutAssigneeInput, TasksUncheckedCreateWithoutAssigneeInput> | TasksCreateWithoutAssigneeInput[] | TasksUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutAssigneeInput | TasksCreateOrConnectWithoutAssigneeInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutAssigneeInput | TasksUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TasksCreateManyAssigneeInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutAssigneeInput | TasksUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutAssigneeInput | TasksUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentsCreateWithoutAuthorInput, CommentsUncheckedCreateWithoutAuthorInput> | CommentsCreateWithoutAuthorInput[] | CommentsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutAuthorInput | CommentsCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutAuthorInput | CommentsUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentsCreateManyAuthorInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutAuthorInput | CommentsUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutAuthorInput | CommentsUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type TimeLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeLogCreateWithoutUserInput, TimeLogUncheckedCreateWithoutUserInput> | TimeLogCreateWithoutUserInput[] | TimeLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutUserInput | TimeLogCreateOrConnectWithoutUserInput[]
    upsert?: TimeLogUpsertWithWhereUniqueWithoutUserInput | TimeLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeLogCreateManyUserInputEnvelope
    set?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    disconnect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    delete?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    update?: TimeLogUpdateWithWhereUniqueWithoutUserInput | TimeLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeLogUpdateManyWithWhereWithoutUserInput | TimeLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
  }

  export type ActivityLogsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogsCreateWithoutUserInput, ActivityLogsUncheckedCreateWithoutUserInput> | ActivityLogsCreateWithoutUserInput[] | ActivityLogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogsCreateOrConnectWithoutUserInput | ActivityLogsCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogsUpsertWithWhereUniqueWithoutUserInput | ActivityLogsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogsCreateManyUserInputEnvelope
    set?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    disconnect?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    delete?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    connect?: ActivityLogsWhereUniqueInput | ActivityLogsWhereUniqueInput[]
    update?: ActivityLogsUpdateWithWhereUniqueWithoutUserInput | ActivityLogsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogsUpdateManyWithWhereWithoutUserInput | ActivityLogsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogsScalarWhereInput | ActivityLogsScalarWhereInput[]
  }

  export type FilesUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<FilesCreateWithoutUploaderInput, FilesUncheckedCreateWithoutUploaderInput> | FilesCreateWithoutUploaderInput[] | FilesUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutUploaderInput | FilesCreateOrConnectWithoutUploaderInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutUploaderInput | FilesUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: FilesCreateManyUploaderInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutUploaderInput | FilesUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutUploaderInput | FilesUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type TeamsUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TeamsCreateWithoutCreatorInput, TeamsUncheckedCreateWithoutCreatorInput> | TeamsCreateWithoutCreatorInput[] | TeamsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutCreatorInput | TeamsCreateOrConnectWithoutCreatorInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutCreatorInput | TeamsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TeamsCreateManyCreatorInputEnvelope
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutCreatorInput | TeamsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutCreatorInput | TeamsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type TeamsUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput> | TeamsCreateWithoutMembersInput[] | TeamsUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutMembersInput | TeamsCreateOrConnectWithoutMembersInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutMembersInput | TeamsUpsertWithWhereUniqueWithoutMembersInput[]
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutMembersInput | TeamsUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutMembersInput | TeamsUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<RoadMapCreateWithoutCreatorInput, RoadMapUncheckedCreateWithoutCreatorInput> | RoadMapCreateWithoutCreatorInput[] | RoadMapUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutCreatorInput | RoadMapCreateOrConnectWithoutCreatorInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutCreatorInput | RoadMapUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: RoadMapCreateManyCreatorInputEnvelope
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutCreatorInput | RoadMapUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutCreatorInput | RoadMapUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type SprintsUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SprintsCreateWithoutCreatorInput, SprintsUncheckedCreateWithoutCreatorInput> | SprintsCreateWithoutCreatorInput[] | SprintsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutCreatorInput | SprintsCreateOrConnectWithoutCreatorInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutCreatorInput | SprintsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SprintsCreateManyCreatorInputEnvelope
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutCreatorInput | SprintsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutCreatorInput | SprintsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutVerificationsInput = {
    create?: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVerificationsNestedInput = {
    create?: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationsInput
    upsert?: UserUpsertWithoutVerificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVerificationsInput, UserUpdateWithoutVerificationsInput>, UserUncheckedUpdateWithoutVerificationsInput>
  }

  export type UserCreateNestedOneWithoutCreatedTeamsInput = {
    create?: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutMemberTeamsInput = {
    create?: XOR<UserCreateWithoutMemberTeamsInput, UserUncheckedCreateWithoutMemberTeamsInput> | UserCreateWithoutMemberTeamsInput[] | UserUncheckedCreateWithoutMemberTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberTeamsInput | UserCreateOrConnectWithoutMemberTeamsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProjectsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<ProjectsCreateWithoutTeamsInput, ProjectsUncheckedCreateWithoutTeamsInput> | ProjectsCreateWithoutTeamsInput[] | ProjectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutTeamsInput | ProjectsCreateOrConnectWithoutTeamsInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutMemberTeamsInput = {
    create?: XOR<UserCreateWithoutMemberTeamsInput, UserUncheckedCreateWithoutMemberTeamsInput> | UserCreateWithoutMemberTeamsInput[] | UserUncheckedCreateWithoutMemberTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberTeamsInput | UserCreateOrConnectWithoutMemberTeamsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProjectsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<ProjectsCreateWithoutTeamsInput, ProjectsUncheckedCreateWithoutTeamsInput> | ProjectsCreateWithoutTeamsInput[] | ProjectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutTeamsInput | ProjectsCreateOrConnectWithoutTeamsInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatedTeamsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamsInput
    upsert?: UserUpsertWithoutCreatedTeamsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTeamsInput, UserUpdateWithoutCreatedTeamsInput>, UserUncheckedUpdateWithoutCreatedTeamsInput>
  }

  export type UserUpdateManyWithoutMemberTeamsNestedInput = {
    create?: XOR<UserCreateWithoutMemberTeamsInput, UserUncheckedCreateWithoutMemberTeamsInput> | UserCreateWithoutMemberTeamsInput[] | UserUncheckedCreateWithoutMemberTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberTeamsInput | UserCreateOrConnectWithoutMemberTeamsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMemberTeamsInput | UserUpsertWithWhereUniqueWithoutMemberTeamsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMemberTeamsInput | UserUpdateWithWhereUniqueWithoutMemberTeamsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMemberTeamsInput | UserUpdateManyWithWhereWithoutMemberTeamsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProjectsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<ProjectsCreateWithoutTeamsInput, ProjectsUncheckedCreateWithoutTeamsInput> | ProjectsCreateWithoutTeamsInput[] | ProjectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutTeamsInput | ProjectsCreateOrConnectWithoutTeamsInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutTeamsInput | ProjectsUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutTeamsInput | ProjectsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutTeamsInput | ProjectsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutMemberTeamsNestedInput = {
    create?: XOR<UserCreateWithoutMemberTeamsInput, UserUncheckedCreateWithoutMemberTeamsInput> | UserCreateWithoutMemberTeamsInput[] | UserUncheckedCreateWithoutMemberTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberTeamsInput | UserCreateOrConnectWithoutMemberTeamsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMemberTeamsInput | UserUpsertWithWhereUniqueWithoutMemberTeamsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMemberTeamsInput | UserUpdateWithWhereUniqueWithoutMemberTeamsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMemberTeamsInput | UserUpdateManyWithWhereWithoutMemberTeamsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProjectsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<ProjectsCreateWithoutTeamsInput, ProjectsUncheckedCreateWithoutTeamsInput> | ProjectsCreateWithoutTeamsInput[] | ProjectsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutTeamsInput | ProjectsCreateOrConnectWithoutTeamsInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutTeamsInput | ProjectsUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutTeamsInput | ProjectsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutTeamsInput | ProjectsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProjectsInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeamsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<TeamsCreateWithoutProjectsInput, TeamsUncheckedCreateWithoutProjectsInput> | TeamsCreateWithoutProjectsInput[] | TeamsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutProjectsInput | TeamsCreateOrConnectWithoutProjectsInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type FeaturesCreateNestedManyWithoutProjectInput = {
    create?: XOR<FeaturesCreateWithoutProjectInput, FeaturesUncheckedCreateWithoutProjectInput> | FeaturesCreateWithoutProjectInput[] | FeaturesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutProjectInput | FeaturesCreateOrConnectWithoutProjectInput[]
    createMany?: FeaturesCreateManyProjectInputEnvelope
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserStoryCreateWithoutProjectInput, UserStoryUncheckedCreateWithoutProjectInput> | UserStoryCreateWithoutProjectInput[] | UserStoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutProjectInput | UserStoryCreateOrConnectWithoutProjectInput[]
    createMany?: UserStoryCreateManyProjectInputEnvelope
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsCreateNestedManyWithoutProjectInput = {
    create?: XOR<SprintsCreateWithoutProjectInput, SprintsUncheckedCreateWithoutProjectInput> | SprintsCreateWithoutProjectInput[] | SprintsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutProjectInput | SprintsCreateOrConnectWithoutProjectInput[]
    createMany?: SprintsCreateManyProjectInputEnvelope
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type FilesCreateNestedManyWithoutProjectInput = {
    create?: XOR<FilesCreateWithoutProjectInput, FilesUncheckedCreateWithoutProjectInput> | FilesCreateWithoutProjectInput[] | FilesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutProjectInput | FilesCreateOrConnectWithoutProjectInput[]
    createMany?: FilesCreateManyProjectInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type SchemaFieldsCreateNestedManyWithoutProjectInput = {
    create?: XOR<SchemaFieldsCreateWithoutProjectInput, SchemaFieldsUncheckedCreateWithoutProjectInput> | SchemaFieldsCreateWithoutProjectInput[] | SchemaFieldsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutProjectInput | SchemaFieldsCreateOrConnectWithoutProjectInput[]
    createMany?: SchemaFieldsCreateManyProjectInputEnvelope
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutProjectInput = {
    create?: XOR<RoadMapCreateWithoutProjectInput, RoadMapUncheckedCreateWithoutProjectInput> | RoadMapCreateWithoutProjectInput[] | RoadMapUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutProjectInput | RoadMapCreateOrConnectWithoutProjectInput[]
    createMany?: RoadMapCreateManyProjectInputEnvelope
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type TasksCreateNestedManyWithoutProjectInput = {
    create?: XOR<TasksCreateWithoutProjectInput, TasksUncheckedCreateWithoutProjectInput> | TasksCreateWithoutProjectInput[] | TasksUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutProjectInput | TasksCreateOrConnectWithoutProjectInput[]
    createMany?: TasksCreateManyProjectInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type TimeLogCreateNestedManyWithoutProjectInput = {
    create?: XOR<TimeLogCreateWithoutProjectInput, TimeLogUncheckedCreateWithoutProjectInput> | TimeLogCreateWithoutProjectInput[] | TimeLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutProjectInput | TimeLogCreateOrConnectWithoutProjectInput[]
    createMany?: TimeLogCreateManyProjectInputEnvelope
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeamsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<TeamsCreateWithoutProjectsInput, TeamsUncheckedCreateWithoutProjectsInput> | TeamsCreateWithoutProjectsInput[] | TeamsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutProjectsInput | TeamsCreateOrConnectWithoutProjectsInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<FeaturesCreateWithoutProjectInput, FeaturesUncheckedCreateWithoutProjectInput> | FeaturesCreateWithoutProjectInput[] | FeaturesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutProjectInput | FeaturesCreateOrConnectWithoutProjectInput[]
    createMany?: FeaturesCreateManyProjectInputEnvelope
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserStoryCreateWithoutProjectInput, UserStoryUncheckedCreateWithoutProjectInput> | UserStoryCreateWithoutProjectInput[] | UserStoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutProjectInput | UserStoryCreateOrConnectWithoutProjectInput[]
    createMany?: UserStoryCreateManyProjectInputEnvelope
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SprintsCreateWithoutProjectInput, SprintsUncheckedCreateWithoutProjectInput> | SprintsCreateWithoutProjectInput[] | SprintsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutProjectInput | SprintsCreateOrConnectWithoutProjectInput[]
    createMany?: SprintsCreateManyProjectInputEnvelope
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type FilesUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<FilesCreateWithoutProjectInput, FilesUncheckedCreateWithoutProjectInput> | FilesCreateWithoutProjectInput[] | FilesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutProjectInput | FilesCreateOrConnectWithoutProjectInput[]
    createMany?: FilesCreateManyProjectInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SchemaFieldsCreateWithoutProjectInput, SchemaFieldsUncheckedCreateWithoutProjectInput> | SchemaFieldsCreateWithoutProjectInput[] | SchemaFieldsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutProjectInput | SchemaFieldsCreateOrConnectWithoutProjectInput[]
    createMany?: SchemaFieldsCreateManyProjectInputEnvelope
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<RoadMapCreateWithoutProjectInput, RoadMapUncheckedCreateWithoutProjectInput> | RoadMapCreateWithoutProjectInput[] | RoadMapUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutProjectInput | RoadMapCreateOrConnectWithoutProjectInput[]
    createMany?: RoadMapCreateManyProjectInputEnvelope
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TasksCreateWithoutProjectInput, TasksUncheckedCreateWithoutProjectInput> | TasksCreateWithoutProjectInput[] | TasksUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutProjectInput | TasksCreateOrConnectWithoutProjectInput[]
    createMany?: TasksCreateManyProjectInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type TimeLogUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TimeLogCreateWithoutProjectInput, TimeLogUncheckedCreateWithoutProjectInput> | TimeLogCreateWithoutProjectInput[] | TimeLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutProjectInput | TimeLogCreateOrConnectWithoutProjectInput[]
    createMany?: TimeLogCreateManyProjectInputEnvelope
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneWithoutCreatedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    upsert?: UserUpsertWithoutCreatedProjectsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProjectsInput, UserUpdateWithoutCreatedProjectsInput>, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type UserUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProjectsInput | UserUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProjectsInput | UserUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProjectsInput | UserUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeamsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<TeamsCreateWithoutProjectsInput, TeamsUncheckedCreateWithoutProjectsInput> | TeamsCreateWithoutProjectsInput[] | TeamsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutProjectsInput | TeamsCreateOrConnectWithoutProjectsInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutProjectsInput | TeamsUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutProjectsInput | TeamsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutProjectsInput | TeamsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type FeaturesUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FeaturesCreateWithoutProjectInput, FeaturesUncheckedCreateWithoutProjectInput> | FeaturesCreateWithoutProjectInput[] | FeaturesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutProjectInput | FeaturesCreateOrConnectWithoutProjectInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutProjectInput | FeaturesUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FeaturesCreateManyProjectInputEnvelope
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutProjectInput | FeaturesUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutProjectInput | FeaturesUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserStoryCreateWithoutProjectInput, UserStoryUncheckedCreateWithoutProjectInput> | UserStoryCreateWithoutProjectInput[] | UserStoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutProjectInput | UserStoryCreateOrConnectWithoutProjectInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutProjectInput | UserStoryUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserStoryCreateManyProjectInputEnvelope
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutProjectInput | UserStoryUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutProjectInput | UserStoryUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SprintsCreateWithoutProjectInput, SprintsUncheckedCreateWithoutProjectInput> | SprintsCreateWithoutProjectInput[] | SprintsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutProjectInput | SprintsCreateOrConnectWithoutProjectInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutProjectInput | SprintsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SprintsCreateManyProjectInputEnvelope
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutProjectInput | SprintsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutProjectInput | SprintsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type FilesUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FilesCreateWithoutProjectInput, FilesUncheckedCreateWithoutProjectInput> | FilesCreateWithoutProjectInput[] | FilesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutProjectInput | FilesCreateOrConnectWithoutProjectInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutProjectInput | FilesUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FilesCreateManyProjectInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutProjectInput | FilesUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutProjectInput | FilesUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type SchemaFieldsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SchemaFieldsCreateWithoutProjectInput, SchemaFieldsUncheckedCreateWithoutProjectInput> | SchemaFieldsCreateWithoutProjectInput[] | SchemaFieldsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutProjectInput | SchemaFieldsCreateOrConnectWithoutProjectInput[]
    upsert?: SchemaFieldsUpsertWithWhereUniqueWithoutProjectInput | SchemaFieldsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SchemaFieldsCreateManyProjectInputEnvelope
    set?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    disconnect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    delete?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    update?: SchemaFieldsUpdateWithWhereUniqueWithoutProjectInput | SchemaFieldsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SchemaFieldsUpdateManyWithWhereWithoutProjectInput | SchemaFieldsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SchemaFieldsScalarWhereInput | SchemaFieldsScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutProjectNestedInput = {
    create?: XOR<RoadMapCreateWithoutProjectInput, RoadMapUncheckedCreateWithoutProjectInput> | RoadMapCreateWithoutProjectInput[] | RoadMapUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutProjectInput | RoadMapCreateOrConnectWithoutProjectInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutProjectInput | RoadMapUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: RoadMapCreateManyProjectInputEnvelope
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutProjectInput | RoadMapUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutProjectInput | RoadMapUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type TasksUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TasksCreateWithoutProjectInput, TasksUncheckedCreateWithoutProjectInput> | TasksCreateWithoutProjectInput[] | TasksUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutProjectInput | TasksCreateOrConnectWithoutProjectInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutProjectInput | TasksUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TasksCreateManyProjectInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutProjectInput | TasksUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutProjectInput | TasksUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type TimeLogUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TimeLogCreateWithoutProjectInput, TimeLogUncheckedCreateWithoutProjectInput> | TimeLogCreateWithoutProjectInput[] | TimeLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutProjectInput | TimeLogCreateOrConnectWithoutProjectInput[]
    upsert?: TimeLogUpsertWithWhereUniqueWithoutProjectInput | TimeLogUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TimeLogCreateManyProjectInputEnvelope
    set?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    disconnect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    delete?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    update?: TimeLogUpdateWithWhereUniqueWithoutProjectInput | TimeLogUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TimeLogUpdateManyWithWhereWithoutProjectInput | TimeLogUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProjectsInput | UserUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProjectsInput | UserUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProjectsInput | UserUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeamsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<TeamsCreateWithoutProjectsInput, TeamsUncheckedCreateWithoutProjectsInput> | TeamsCreateWithoutProjectsInput[] | TeamsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TeamsCreateOrConnectWithoutProjectsInput | TeamsCreateOrConnectWithoutProjectsInput[]
    upsert?: TeamsUpsertWithWhereUniqueWithoutProjectsInput | TeamsUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    disconnect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    delete?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    connect?: TeamsWhereUniqueInput | TeamsWhereUniqueInput[]
    update?: TeamsUpdateWithWhereUniqueWithoutProjectsInput | TeamsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: TeamsUpdateManyWithWhereWithoutProjectsInput | TeamsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FeaturesCreateWithoutProjectInput, FeaturesUncheckedCreateWithoutProjectInput> | FeaturesCreateWithoutProjectInput[] | FeaturesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutProjectInput | FeaturesCreateOrConnectWithoutProjectInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutProjectInput | FeaturesUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FeaturesCreateManyProjectInputEnvelope
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutProjectInput | FeaturesUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutProjectInput | FeaturesUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserStoryCreateWithoutProjectInput, UserStoryUncheckedCreateWithoutProjectInput> | UserStoryCreateWithoutProjectInput[] | UserStoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutProjectInput | UserStoryCreateOrConnectWithoutProjectInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutProjectInput | UserStoryUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserStoryCreateManyProjectInputEnvelope
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutProjectInput | UserStoryUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutProjectInput | UserStoryUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SprintsCreateWithoutProjectInput, SprintsUncheckedCreateWithoutProjectInput> | SprintsCreateWithoutProjectInput[] | SprintsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutProjectInput | SprintsCreateOrConnectWithoutProjectInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutProjectInput | SprintsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SprintsCreateManyProjectInputEnvelope
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutProjectInput | SprintsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutProjectInput | SprintsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type FilesUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FilesCreateWithoutProjectInput, FilesUncheckedCreateWithoutProjectInput> | FilesCreateWithoutProjectInput[] | FilesUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutProjectInput | FilesCreateOrConnectWithoutProjectInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutProjectInput | FilesUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FilesCreateManyProjectInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutProjectInput | FilesUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutProjectInput | FilesUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SchemaFieldsCreateWithoutProjectInput, SchemaFieldsUncheckedCreateWithoutProjectInput> | SchemaFieldsCreateWithoutProjectInput[] | SchemaFieldsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutProjectInput | SchemaFieldsCreateOrConnectWithoutProjectInput[]
    upsert?: SchemaFieldsUpsertWithWhereUniqueWithoutProjectInput | SchemaFieldsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SchemaFieldsCreateManyProjectInputEnvelope
    set?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    disconnect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    delete?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    update?: SchemaFieldsUpdateWithWhereUniqueWithoutProjectInput | SchemaFieldsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SchemaFieldsUpdateManyWithWhereWithoutProjectInput | SchemaFieldsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SchemaFieldsScalarWhereInput | SchemaFieldsScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<RoadMapCreateWithoutProjectInput, RoadMapUncheckedCreateWithoutProjectInput> | RoadMapCreateWithoutProjectInput[] | RoadMapUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutProjectInput | RoadMapCreateOrConnectWithoutProjectInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutProjectInput | RoadMapUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: RoadMapCreateManyProjectInputEnvelope
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutProjectInput | RoadMapUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutProjectInput | RoadMapUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TasksCreateWithoutProjectInput, TasksUncheckedCreateWithoutProjectInput> | TasksCreateWithoutProjectInput[] | TasksUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutProjectInput | TasksCreateOrConnectWithoutProjectInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutProjectInput | TasksUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TasksCreateManyProjectInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutProjectInput | TasksUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutProjectInput | TasksUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type TimeLogUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TimeLogCreateWithoutProjectInput, TimeLogUncheckedCreateWithoutProjectInput> | TimeLogCreateWithoutProjectInput[] | TimeLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutProjectInput | TimeLogCreateOrConnectWithoutProjectInput[]
    upsert?: TimeLogUpsertWithWhereUniqueWithoutProjectInput | TimeLogUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TimeLogCreateManyProjectInputEnvelope
    set?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    disconnect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    delete?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    update?: TimeLogUpdateWithWhereUniqueWithoutProjectInput | TimeLogUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TimeLogUpdateManyWithWhereWithoutProjectInput | TimeLogUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutRoadMapsInput = {
    create?: XOR<ProjectsCreateWithoutRoadMapsInput, ProjectsUncheckedCreateWithoutRoadMapsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutRoadMapsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedRoadMapsInput = {
    create?: XOR<UserCreateWithoutCreatedRoadMapsInput, UserUncheckedCreateWithoutCreatedRoadMapsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRoadMapsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentsCreateNestedManyWithoutRoadMapInput = {
    create?: XOR<CommentsCreateWithoutRoadMapInput, CommentsUncheckedCreateWithoutRoadMapInput> | CommentsCreateWithoutRoadMapInput[] | CommentsUncheckedCreateWithoutRoadMapInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutRoadMapInput | CommentsCreateOrConnectWithoutRoadMapInput[]
    createMany?: CommentsCreateManyRoadMapInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type FilesCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<FilesCreateWithoutRoadMapsInput, FilesUncheckedCreateWithoutRoadMapsInput> | FilesCreateWithoutRoadMapsInput[] | FilesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutRoadMapsInput | FilesCreateOrConnectWithoutRoadMapsInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type FeaturesCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<FeaturesCreateWithoutRoadMapsInput, FeaturesUncheckedCreateWithoutRoadMapsInput> | FeaturesCreateWithoutRoadMapsInput[] | FeaturesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutRoadMapsInput | FeaturesCreateOrConnectWithoutRoadMapsInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<UserStoryCreateWithoutRoadMapsInput, UserStoryUncheckedCreateWithoutRoadMapsInput> | UserStoryCreateWithoutRoadMapsInput[] | UserStoryUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutRoadMapsInput | UserStoryCreateOrConnectWithoutRoadMapsInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<SprintsCreateWithoutRoadMapsInput, SprintsUncheckedCreateWithoutRoadMapsInput> | SprintsCreateWithoutRoadMapsInput[] | SprintsUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutRoadMapsInput | SprintsCreateOrConnectWithoutRoadMapsInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<TasksCreateWithoutRoadMapsInput, TasksUncheckedCreateWithoutRoadMapsInput> | TasksCreateWithoutRoadMapsInput[] | TasksUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutRoadMapsInput | TasksCreateOrConnectWithoutRoadMapsInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutRoadMapInput = {
    create?: XOR<CommentsCreateWithoutRoadMapInput, CommentsUncheckedCreateWithoutRoadMapInput> | CommentsCreateWithoutRoadMapInput[] | CommentsUncheckedCreateWithoutRoadMapInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutRoadMapInput | CommentsCreateOrConnectWithoutRoadMapInput[]
    createMany?: CommentsCreateManyRoadMapInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type FilesUncheckedCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<FilesCreateWithoutRoadMapsInput, FilesUncheckedCreateWithoutRoadMapsInput> | FilesCreateWithoutRoadMapsInput[] | FilesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutRoadMapsInput | FilesCreateOrConnectWithoutRoadMapsInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<FeaturesCreateWithoutRoadMapsInput, FeaturesUncheckedCreateWithoutRoadMapsInput> | FeaturesCreateWithoutRoadMapsInput[] | FeaturesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutRoadMapsInput | FeaturesCreateOrConnectWithoutRoadMapsInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<UserStoryCreateWithoutRoadMapsInput, UserStoryUncheckedCreateWithoutRoadMapsInput> | UserStoryCreateWithoutRoadMapsInput[] | UserStoryUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutRoadMapsInput | UserStoryCreateOrConnectWithoutRoadMapsInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsUncheckedCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<SprintsCreateWithoutRoadMapsInput, SprintsUncheckedCreateWithoutRoadMapsInput> | SprintsCreateWithoutRoadMapsInput[] | SprintsUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutRoadMapsInput | SprintsCreateOrConnectWithoutRoadMapsInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutRoadMapsInput = {
    create?: XOR<TasksCreateWithoutRoadMapsInput, TasksUncheckedCreateWithoutRoadMapsInput> | TasksCreateWithoutRoadMapsInput[] | TasksUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutRoadMapsInput | TasksCreateOrConnectWithoutRoadMapsInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput = {
    create?: XOR<ProjectsCreateWithoutRoadMapsInput, ProjectsUncheckedCreateWithoutRoadMapsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutRoadMapsInput
    upsert?: ProjectsUpsertWithoutRoadMapsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutRoadMapsInput, ProjectsUpdateWithoutRoadMapsInput>, ProjectsUncheckedUpdateWithoutRoadMapsInput>
  }

  export type UserUpdateOneWithoutCreatedRoadMapsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRoadMapsInput, UserUncheckedCreateWithoutCreatedRoadMapsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRoadMapsInput
    upsert?: UserUpsertWithoutCreatedRoadMapsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRoadMapsInput, UserUpdateWithoutCreatedRoadMapsInput>, UserUncheckedUpdateWithoutCreatedRoadMapsInput>
  }

  export type CommentsUpdateManyWithoutRoadMapNestedInput = {
    create?: XOR<CommentsCreateWithoutRoadMapInput, CommentsUncheckedCreateWithoutRoadMapInput> | CommentsCreateWithoutRoadMapInput[] | CommentsUncheckedCreateWithoutRoadMapInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutRoadMapInput | CommentsCreateOrConnectWithoutRoadMapInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutRoadMapInput | CommentsUpsertWithWhereUniqueWithoutRoadMapInput[]
    createMany?: CommentsCreateManyRoadMapInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutRoadMapInput | CommentsUpdateWithWhereUniqueWithoutRoadMapInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutRoadMapInput | CommentsUpdateManyWithWhereWithoutRoadMapInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type FilesUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<FilesCreateWithoutRoadMapsInput, FilesUncheckedCreateWithoutRoadMapsInput> | FilesCreateWithoutRoadMapsInput[] | FilesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutRoadMapsInput | FilesCreateOrConnectWithoutRoadMapsInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutRoadMapsInput | FilesUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutRoadMapsInput | FilesUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutRoadMapsInput | FilesUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type FeaturesUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<FeaturesCreateWithoutRoadMapsInput, FeaturesUncheckedCreateWithoutRoadMapsInput> | FeaturesCreateWithoutRoadMapsInput[] | FeaturesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutRoadMapsInput | FeaturesCreateOrConnectWithoutRoadMapsInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutRoadMapsInput | FeaturesUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutRoadMapsInput | FeaturesUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutRoadMapsInput | FeaturesUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<UserStoryCreateWithoutRoadMapsInput, UserStoryUncheckedCreateWithoutRoadMapsInput> | UserStoryCreateWithoutRoadMapsInput[] | UserStoryUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutRoadMapsInput | UserStoryCreateOrConnectWithoutRoadMapsInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutRoadMapsInput | UserStoryUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutRoadMapsInput | UserStoryUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutRoadMapsInput | UserStoryUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<SprintsCreateWithoutRoadMapsInput, SprintsUncheckedCreateWithoutRoadMapsInput> | SprintsCreateWithoutRoadMapsInput[] | SprintsUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutRoadMapsInput | SprintsCreateOrConnectWithoutRoadMapsInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutRoadMapsInput | SprintsUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutRoadMapsInput | SprintsUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutRoadMapsInput | SprintsUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<TasksCreateWithoutRoadMapsInput, TasksUncheckedCreateWithoutRoadMapsInput> | TasksCreateWithoutRoadMapsInput[] | TasksUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutRoadMapsInput | TasksCreateOrConnectWithoutRoadMapsInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutRoadMapsInput | TasksUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutRoadMapsInput | TasksUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutRoadMapsInput | TasksUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutRoadMapNestedInput = {
    create?: XOR<CommentsCreateWithoutRoadMapInput, CommentsUncheckedCreateWithoutRoadMapInput> | CommentsCreateWithoutRoadMapInput[] | CommentsUncheckedCreateWithoutRoadMapInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutRoadMapInput | CommentsCreateOrConnectWithoutRoadMapInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutRoadMapInput | CommentsUpsertWithWhereUniqueWithoutRoadMapInput[]
    createMany?: CommentsCreateManyRoadMapInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutRoadMapInput | CommentsUpdateWithWhereUniqueWithoutRoadMapInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutRoadMapInput | CommentsUpdateManyWithWhereWithoutRoadMapInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type FilesUncheckedUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<FilesCreateWithoutRoadMapsInput, FilesUncheckedCreateWithoutRoadMapsInput> | FilesCreateWithoutRoadMapsInput[] | FilesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutRoadMapsInput | FilesCreateOrConnectWithoutRoadMapsInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutRoadMapsInput | FilesUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutRoadMapsInput | FilesUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutRoadMapsInput | FilesUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<FeaturesCreateWithoutRoadMapsInput, FeaturesUncheckedCreateWithoutRoadMapsInput> | FeaturesCreateWithoutRoadMapsInput[] | FeaturesUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutRoadMapsInput | FeaturesCreateOrConnectWithoutRoadMapsInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutRoadMapsInput | FeaturesUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutRoadMapsInput | FeaturesUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutRoadMapsInput | FeaturesUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<UserStoryCreateWithoutRoadMapsInput, UserStoryUncheckedCreateWithoutRoadMapsInput> | UserStoryCreateWithoutRoadMapsInput[] | UserStoryUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutRoadMapsInput | UserStoryCreateOrConnectWithoutRoadMapsInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutRoadMapsInput | UserStoryUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutRoadMapsInput | UserStoryUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutRoadMapsInput | UserStoryUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<SprintsCreateWithoutRoadMapsInput, SprintsUncheckedCreateWithoutRoadMapsInput> | SprintsCreateWithoutRoadMapsInput[] | SprintsUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutRoadMapsInput | SprintsCreateOrConnectWithoutRoadMapsInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutRoadMapsInput | SprintsUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutRoadMapsInput | SprintsUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutRoadMapsInput | SprintsUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutRoadMapsNestedInput = {
    create?: XOR<TasksCreateWithoutRoadMapsInput, TasksUncheckedCreateWithoutRoadMapsInput> | TasksCreateWithoutRoadMapsInput[] | TasksUncheckedCreateWithoutRoadMapsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutRoadMapsInput | TasksCreateOrConnectWithoutRoadMapsInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutRoadMapsInput | TasksUpsertWithWhereUniqueWithoutRoadMapsInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutRoadMapsInput | TasksUpdateWithWhereUniqueWithoutRoadMapsInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutRoadMapsInput | TasksUpdateManyWithWhereWithoutRoadMapsInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutFeaturesInput = {
    create?: XOR<ProjectsCreateWithoutFeaturesInput, ProjectsUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutFeaturesInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedFeaturesInput = {
    create?: XOR<UserCreateWithoutCreatedFeaturesInput, UserUncheckedCreateWithoutCreatedFeaturesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFeaturesInput
    connect?: UserWhereUniqueInput
  }

  export type FeaturesCreateNestedOneWithoutChildFeaturesInput = {
    create?: XOR<FeaturesCreateWithoutChildFeaturesInput, FeaturesUncheckedCreateWithoutChildFeaturesInput>
    connectOrCreate?: FeaturesCreateOrConnectWithoutChildFeaturesInput
    connect?: FeaturesWhereUniqueInput
  }

  export type FeaturesCreateNestedManyWithoutParentFeatureInput = {
    create?: XOR<FeaturesCreateWithoutParentFeatureInput, FeaturesUncheckedCreateWithoutParentFeatureInput> | FeaturesCreateWithoutParentFeatureInput[] | FeaturesUncheckedCreateWithoutParentFeatureInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutParentFeatureInput | FeaturesCreateOrConnectWithoutParentFeatureInput[]
    createMany?: FeaturesCreateManyParentFeatureInputEnvelope
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type CommentsCreateNestedManyWithoutFeatureInput = {
    create?: XOR<CommentsCreateWithoutFeatureInput, CommentsUncheckedCreateWithoutFeatureInput> | CommentsCreateWithoutFeatureInput[] | CommentsUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutFeatureInput | CommentsCreateOrConnectWithoutFeatureInput[]
    createMany?: CommentsCreateManyFeatureInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<RoadMapCreateWithoutFeaturesInput, RoadMapUncheckedCreateWithoutFeaturesInput> | RoadMapCreateWithoutFeaturesInput[] | RoadMapUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFeaturesInput | RoadMapCreateOrConnectWithoutFeaturesInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type UserStoryCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<UserStoryCreateWithoutFeaturesInput, UserStoryUncheckedCreateWithoutFeaturesInput> | UserStoryCreateWithoutFeaturesInput[] | UserStoryUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutFeaturesInput | UserStoryCreateOrConnectWithoutFeaturesInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<SprintsCreateWithoutFeaturesInput, SprintsUncheckedCreateWithoutFeaturesInput> | SprintsCreateWithoutFeaturesInput[] | SprintsUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutFeaturesInput | SprintsCreateOrConnectWithoutFeaturesInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<TasksCreateWithoutFeaturesInput, TasksUncheckedCreateWithoutFeaturesInput> | TasksCreateWithoutFeaturesInput[] | TasksUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutFeaturesInput | TasksCreateOrConnectWithoutFeaturesInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput = {
    create?: XOR<FeaturesCreateWithoutParentFeatureInput, FeaturesUncheckedCreateWithoutParentFeatureInput> | FeaturesCreateWithoutParentFeatureInput[] | FeaturesUncheckedCreateWithoutParentFeatureInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutParentFeatureInput | FeaturesCreateOrConnectWithoutParentFeatureInput[]
    createMany?: FeaturesCreateManyParentFeatureInputEnvelope
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutFeatureInput = {
    create?: XOR<CommentsCreateWithoutFeatureInput, CommentsUncheckedCreateWithoutFeatureInput> | CommentsCreateWithoutFeatureInput[] | CommentsUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutFeatureInput | CommentsCreateOrConnectWithoutFeatureInput[]
    createMany?: CommentsCreateManyFeatureInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<RoadMapCreateWithoutFeaturesInput, RoadMapUncheckedCreateWithoutFeaturesInput> | RoadMapCreateWithoutFeaturesInput[] | RoadMapUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFeaturesInput | RoadMapCreateOrConnectWithoutFeaturesInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<UserStoryCreateWithoutFeaturesInput, UserStoryUncheckedCreateWithoutFeaturesInput> | UserStoryCreateWithoutFeaturesInput[] | UserStoryUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutFeaturesInput | UserStoryCreateOrConnectWithoutFeaturesInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsUncheckedCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<SprintsCreateWithoutFeaturesInput, SprintsUncheckedCreateWithoutFeaturesInput> | SprintsCreateWithoutFeaturesInput[] | SprintsUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutFeaturesInput | SprintsCreateOrConnectWithoutFeaturesInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutFeaturesInput = {
    create?: XOR<TasksCreateWithoutFeaturesInput, TasksUncheckedCreateWithoutFeaturesInput> | TasksCreateWithoutFeaturesInput[] | TasksUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutFeaturesInput | TasksCreateOrConnectWithoutFeaturesInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type ProjectsUpdateOneRequiredWithoutFeaturesNestedInput = {
    create?: XOR<ProjectsCreateWithoutFeaturesInput, ProjectsUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutFeaturesInput
    upsert?: ProjectsUpsertWithoutFeaturesInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutFeaturesInput, ProjectsUpdateWithoutFeaturesInput>, ProjectsUncheckedUpdateWithoutFeaturesInput>
  }

  export type UserUpdateOneWithoutCreatedFeaturesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedFeaturesInput, UserUncheckedCreateWithoutCreatedFeaturesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFeaturesInput
    upsert?: UserUpsertWithoutCreatedFeaturesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedFeaturesInput, UserUpdateWithoutCreatedFeaturesInput>, UserUncheckedUpdateWithoutCreatedFeaturesInput>
  }

  export type FeaturesUpdateOneWithoutChildFeaturesNestedInput = {
    create?: XOR<FeaturesCreateWithoutChildFeaturesInput, FeaturesUncheckedCreateWithoutChildFeaturesInput>
    connectOrCreate?: FeaturesCreateOrConnectWithoutChildFeaturesInput
    upsert?: FeaturesUpsertWithoutChildFeaturesInput
    disconnect?: FeaturesWhereInput | boolean
    delete?: FeaturesWhereInput | boolean
    connect?: FeaturesWhereUniqueInput
    update?: XOR<XOR<FeaturesUpdateToOneWithWhereWithoutChildFeaturesInput, FeaturesUpdateWithoutChildFeaturesInput>, FeaturesUncheckedUpdateWithoutChildFeaturesInput>
  }

  export type FeaturesUpdateManyWithoutParentFeatureNestedInput = {
    create?: XOR<FeaturesCreateWithoutParentFeatureInput, FeaturesUncheckedCreateWithoutParentFeatureInput> | FeaturesCreateWithoutParentFeatureInput[] | FeaturesUncheckedCreateWithoutParentFeatureInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutParentFeatureInput | FeaturesCreateOrConnectWithoutParentFeatureInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutParentFeatureInput | FeaturesUpsertWithWhereUniqueWithoutParentFeatureInput[]
    createMany?: FeaturesCreateManyParentFeatureInputEnvelope
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutParentFeatureInput | FeaturesUpdateWithWhereUniqueWithoutParentFeatureInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutParentFeatureInput | FeaturesUpdateManyWithWhereWithoutParentFeatureInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type CommentsUpdateManyWithoutFeatureNestedInput = {
    create?: XOR<CommentsCreateWithoutFeatureInput, CommentsUncheckedCreateWithoutFeatureInput> | CommentsCreateWithoutFeatureInput[] | CommentsUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutFeatureInput | CommentsCreateOrConnectWithoutFeatureInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutFeatureInput | CommentsUpsertWithWhereUniqueWithoutFeatureInput[]
    createMany?: CommentsCreateManyFeatureInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutFeatureInput | CommentsUpdateWithWhereUniqueWithoutFeatureInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutFeatureInput | CommentsUpdateManyWithWhereWithoutFeatureInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<RoadMapCreateWithoutFeaturesInput, RoadMapUncheckedCreateWithoutFeaturesInput> | RoadMapCreateWithoutFeaturesInput[] | RoadMapUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFeaturesInput | RoadMapCreateOrConnectWithoutFeaturesInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutFeaturesInput | RoadMapUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutFeaturesInput | RoadMapUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutFeaturesInput | RoadMapUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type UserStoryUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<UserStoryCreateWithoutFeaturesInput, UserStoryUncheckedCreateWithoutFeaturesInput> | UserStoryCreateWithoutFeaturesInput[] | UserStoryUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutFeaturesInput | UserStoryCreateOrConnectWithoutFeaturesInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutFeaturesInput | UserStoryUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutFeaturesInput | UserStoryUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutFeaturesInput | UserStoryUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<SprintsCreateWithoutFeaturesInput, SprintsUncheckedCreateWithoutFeaturesInput> | SprintsCreateWithoutFeaturesInput[] | SprintsUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutFeaturesInput | SprintsCreateOrConnectWithoutFeaturesInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutFeaturesInput | SprintsUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutFeaturesInput | SprintsUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutFeaturesInput | SprintsUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<TasksCreateWithoutFeaturesInput, TasksUncheckedCreateWithoutFeaturesInput> | TasksCreateWithoutFeaturesInput[] | TasksUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutFeaturesInput | TasksCreateOrConnectWithoutFeaturesInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutFeaturesInput | TasksUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutFeaturesInput | TasksUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutFeaturesInput | TasksUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput = {
    create?: XOR<FeaturesCreateWithoutParentFeatureInput, FeaturesUncheckedCreateWithoutParentFeatureInput> | FeaturesCreateWithoutParentFeatureInput[] | FeaturesUncheckedCreateWithoutParentFeatureInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutParentFeatureInput | FeaturesCreateOrConnectWithoutParentFeatureInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutParentFeatureInput | FeaturesUpsertWithWhereUniqueWithoutParentFeatureInput[]
    createMany?: FeaturesCreateManyParentFeatureInputEnvelope
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutParentFeatureInput | FeaturesUpdateWithWhereUniqueWithoutParentFeatureInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutParentFeatureInput | FeaturesUpdateManyWithWhereWithoutParentFeatureInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutFeatureNestedInput = {
    create?: XOR<CommentsCreateWithoutFeatureInput, CommentsUncheckedCreateWithoutFeatureInput> | CommentsCreateWithoutFeatureInput[] | CommentsUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutFeatureInput | CommentsCreateOrConnectWithoutFeatureInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutFeatureInput | CommentsUpsertWithWhereUniqueWithoutFeatureInput[]
    createMany?: CommentsCreateManyFeatureInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutFeatureInput | CommentsUpdateWithWhereUniqueWithoutFeatureInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutFeatureInput | CommentsUpdateManyWithWhereWithoutFeatureInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<RoadMapCreateWithoutFeaturesInput, RoadMapUncheckedCreateWithoutFeaturesInput> | RoadMapCreateWithoutFeaturesInput[] | RoadMapUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFeaturesInput | RoadMapCreateOrConnectWithoutFeaturesInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutFeaturesInput | RoadMapUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutFeaturesInput | RoadMapUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutFeaturesInput | RoadMapUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<UserStoryCreateWithoutFeaturesInput, UserStoryUncheckedCreateWithoutFeaturesInput> | UserStoryCreateWithoutFeaturesInput[] | UserStoryUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutFeaturesInput | UserStoryCreateOrConnectWithoutFeaturesInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutFeaturesInput | UserStoryUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutFeaturesInput | UserStoryUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutFeaturesInput | UserStoryUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUncheckedUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<SprintsCreateWithoutFeaturesInput, SprintsUncheckedCreateWithoutFeaturesInput> | SprintsCreateWithoutFeaturesInput[] | SprintsUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutFeaturesInput | SprintsCreateOrConnectWithoutFeaturesInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutFeaturesInput | SprintsUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutFeaturesInput | SprintsUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutFeaturesInput | SprintsUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutFeaturesNestedInput = {
    create?: XOR<TasksCreateWithoutFeaturesInput, TasksUncheckedCreateWithoutFeaturesInput> | TasksCreateWithoutFeaturesInput[] | TasksUncheckedCreateWithoutFeaturesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutFeaturesInput | TasksCreateOrConnectWithoutFeaturesInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutFeaturesInput | TasksUpsertWithWhereUniqueWithoutFeaturesInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutFeaturesInput | TasksUpdateWithWhereUniqueWithoutFeaturesInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutFeaturesInput | TasksUpdateManyWithWhereWithoutFeaturesInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutUserStoriesInput = {
    create?: XOR<ProjectsCreateWithoutUserStoriesInput, ProjectsUncheckedCreateWithoutUserStoriesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutUserStoriesInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedUserStoriesInput = {
    create?: XOR<UserCreateWithoutCreatedUserStoriesInput, UserUncheckedCreateWithoutCreatedUserStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUserStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserStoryCreateNestedOneWithoutChildUserStoriesInput = {
    create?: XOR<UserStoryCreateWithoutChildUserStoriesInput, UserStoryUncheckedCreateWithoutChildUserStoriesInput>
    connectOrCreate?: UserStoryCreateOrConnectWithoutChildUserStoriesInput
    connect?: UserStoryWhereUniqueInput
  }

  export type UserStoryCreateNestedManyWithoutParentUserStoryInput = {
    create?: XOR<UserStoryCreateWithoutParentUserStoryInput, UserStoryUncheckedCreateWithoutParentUserStoryInput> | UserStoryCreateWithoutParentUserStoryInput[] | UserStoryUncheckedCreateWithoutParentUserStoryInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutParentUserStoryInput | UserStoryCreateOrConnectWithoutParentUserStoryInput[]
    createMany?: UserStoryCreateManyParentUserStoryInputEnvelope
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type CommentsCreateNestedManyWithoutUserStoryInput = {
    create?: XOR<CommentsCreateWithoutUserStoryInput, CommentsUncheckedCreateWithoutUserStoryInput> | CommentsCreateWithoutUserStoryInput[] | CommentsUncheckedCreateWithoutUserStoryInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutUserStoryInput | CommentsCreateOrConnectWithoutUserStoryInput[]
    createMany?: CommentsCreateManyUserStoryInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<RoadMapCreateWithoutUserStoriesInput, RoadMapUncheckedCreateWithoutUserStoriesInput> | RoadMapCreateWithoutUserStoriesInput[] | RoadMapUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutUserStoriesInput | RoadMapCreateOrConnectWithoutUserStoriesInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FeaturesCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<FeaturesCreateWithoutUserStoriesInput, FeaturesUncheckedCreateWithoutUserStoriesInput> | FeaturesCreateWithoutUserStoriesInput[] | FeaturesUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutUserStoriesInput | FeaturesCreateOrConnectWithoutUserStoriesInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type SprintsCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<SprintsCreateWithoutUserStoriesInput, SprintsUncheckedCreateWithoutUserStoriesInput> | SprintsCreateWithoutUserStoriesInput[] | SprintsUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutUserStoriesInput | SprintsCreateOrConnectWithoutUserStoriesInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<TasksCreateWithoutUserStoriesInput, TasksUncheckedCreateWithoutUserStoriesInput> | TasksCreateWithoutUserStoriesInput[] | TasksUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutUserStoriesInput | TasksCreateOrConnectWithoutUserStoriesInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput = {
    create?: XOR<UserStoryCreateWithoutParentUserStoryInput, UserStoryUncheckedCreateWithoutParentUserStoryInput> | UserStoryCreateWithoutParentUserStoryInput[] | UserStoryUncheckedCreateWithoutParentUserStoryInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutParentUserStoryInput | UserStoryCreateOrConnectWithoutParentUserStoryInput[]
    createMany?: UserStoryCreateManyParentUserStoryInputEnvelope
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutUserStoryInput = {
    create?: XOR<CommentsCreateWithoutUserStoryInput, CommentsUncheckedCreateWithoutUserStoryInput> | CommentsCreateWithoutUserStoryInput[] | CommentsUncheckedCreateWithoutUserStoryInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutUserStoryInput | CommentsCreateOrConnectWithoutUserStoryInput[]
    createMany?: CommentsCreateManyUserStoryInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<RoadMapCreateWithoutUserStoriesInput, RoadMapUncheckedCreateWithoutUserStoriesInput> | RoadMapCreateWithoutUserStoriesInput[] | RoadMapUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutUserStoriesInput | RoadMapCreateOrConnectWithoutUserStoriesInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<FeaturesCreateWithoutUserStoriesInput, FeaturesUncheckedCreateWithoutUserStoriesInput> | FeaturesCreateWithoutUserStoriesInput[] | FeaturesUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutUserStoriesInput | FeaturesCreateOrConnectWithoutUserStoriesInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type SprintsUncheckedCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<SprintsCreateWithoutUserStoriesInput, SprintsUncheckedCreateWithoutUserStoriesInput> | SprintsCreateWithoutUserStoriesInput[] | SprintsUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutUserStoriesInput | SprintsCreateOrConnectWithoutUserStoriesInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutUserStoriesInput = {
    create?: XOR<TasksCreateWithoutUserStoriesInput, TasksUncheckedCreateWithoutUserStoriesInput> | TasksCreateWithoutUserStoriesInput[] | TasksUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutUserStoriesInput | TasksCreateOrConnectWithoutUserStoriesInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput = {
    create?: XOR<ProjectsCreateWithoutUserStoriesInput, ProjectsUncheckedCreateWithoutUserStoriesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutUserStoriesInput
    upsert?: ProjectsUpsertWithoutUserStoriesInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutUserStoriesInput, ProjectsUpdateWithoutUserStoriesInput>, ProjectsUncheckedUpdateWithoutUserStoriesInput>
  }

  export type UserUpdateOneWithoutCreatedUserStoriesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedUserStoriesInput, UserUncheckedCreateWithoutCreatedUserStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUserStoriesInput
    upsert?: UserUpsertWithoutCreatedUserStoriesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedUserStoriesInput, UserUpdateWithoutCreatedUserStoriesInput>, UserUncheckedUpdateWithoutCreatedUserStoriesInput>
  }

  export type UserStoryUpdateOneWithoutChildUserStoriesNestedInput = {
    create?: XOR<UserStoryCreateWithoutChildUserStoriesInput, UserStoryUncheckedCreateWithoutChildUserStoriesInput>
    connectOrCreate?: UserStoryCreateOrConnectWithoutChildUserStoriesInput
    upsert?: UserStoryUpsertWithoutChildUserStoriesInput
    disconnect?: UserStoryWhereInput | boolean
    delete?: UserStoryWhereInput | boolean
    connect?: UserStoryWhereUniqueInput
    update?: XOR<XOR<UserStoryUpdateToOneWithWhereWithoutChildUserStoriesInput, UserStoryUpdateWithoutChildUserStoriesInput>, UserStoryUncheckedUpdateWithoutChildUserStoriesInput>
  }

  export type UserStoryUpdateManyWithoutParentUserStoryNestedInput = {
    create?: XOR<UserStoryCreateWithoutParentUserStoryInput, UserStoryUncheckedCreateWithoutParentUserStoryInput> | UserStoryCreateWithoutParentUserStoryInput[] | UserStoryUncheckedCreateWithoutParentUserStoryInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutParentUserStoryInput | UserStoryCreateOrConnectWithoutParentUserStoryInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutParentUserStoryInput | UserStoryUpsertWithWhereUniqueWithoutParentUserStoryInput[]
    createMany?: UserStoryCreateManyParentUserStoryInputEnvelope
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutParentUserStoryInput | UserStoryUpdateWithWhereUniqueWithoutParentUserStoryInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutParentUserStoryInput | UserStoryUpdateManyWithWhereWithoutParentUserStoryInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type CommentsUpdateManyWithoutUserStoryNestedInput = {
    create?: XOR<CommentsCreateWithoutUserStoryInput, CommentsUncheckedCreateWithoutUserStoryInput> | CommentsCreateWithoutUserStoryInput[] | CommentsUncheckedCreateWithoutUserStoryInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutUserStoryInput | CommentsCreateOrConnectWithoutUserStoryInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutUserStoryInput | CommentsUpsertWithWhereUniqueWithoutUserStoryInput[]
    createMany?: CommentsCreateManyUserStoryInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutUserStoryInput | CommentsUpdateWithWhereUniqueWithoutUserStoryInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutUserStoryInput | CommentsUpdateManyWithWhereWithoutUserStoryInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<RoadMapCreateWithoutUserStoriesInput, RoadMapUncheckedCreateWithoutUserStoriesInput> | RoadMapCreateWithoutUserStoriesInput[] | RoadMapUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutUserStoriesInput | RoadMapCreateOrConnectWithoutUserStoriesInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutUserStoriesInput | RoadMapUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutUserStoriesInput | RoadMapUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutUserStoriesInput | RoadMapUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FeaturesUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<FeaturesCreateWithoutUserStoriesInput, FeaturesUncheckedCreateWithoutUserStoriesInput> | FeaturesCreateWithoutUserStoriesInput[] | FeaturesUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutUserStoriesInput | FeaturesCreateOrConnectWithoutUserStoriesInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutUserStoriesInput | FeaturesUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutUserStoriesInput | FeaturesUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutUserStoriesInput | FeaturesUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type SprintsUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<SprintsCreateWithoutUserStoriesInput, SprintsUncheckedCreateWithoutUserStoriesInput> | SprintsCreateWithoutUserStoriesInput[] | SprintsUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutUserStoriesInput | SprintsCreateOrConnectWithoutUserStoriesInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutUserStoriesInput | SprintsUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutUserStoriesInput | SprintsUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutUserStoriesInput | SprintsUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<TasksCreateWithoutUserStoriesInput, TasksUncheckedCreateWithoutUserStoriesInput> | TasksCreateWithoutUserStoriesInput[] | TasksUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutUserStoriesInput | TasksCreateOrConnectWithoutUserStoriesInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutUserStoriesInput | TasksUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutUserStoriesInput | TasksUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutUserStoriesInput | TasksUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput = {
    create?: XOR<UserStoryCreateWithoutParentUserStoryInput, UserStoryUncheckedCreateWithoutParentUserStoryInput> | UserStoryCreateWithoutParentUserStoryInput[] | UserStoryUncheckedCreateWithoutParentUserStoryInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutParentUserStoryInput | UserStoryCreateOrConnectWithoutParentUserStoryInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutParentUserStoryInput | UserStoryUpsertWithWhereUniqueWithoutParentUserStoryInput[]
    createMany?: UserStoryCreateManyParentUserStoryInputEnvelope
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutParentUserStoryInput | UserStoryUpdateWithWhereUniqueWithoutParentUserStoryInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutParentUserStoryInput | UserStoryUpdateManyWithWhereWithoutParentUserStoryInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutUserStoryNestedInput = {
    create?: XOR<CommentsCreateWithoutUserStoryInput, CommentsUncheckedCreateWithoutUserStoryInput> | CommentsCreateWithoutUserStoryInput[] | CommentsUncheckedCreateWithoutUserStoryInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutUserStoryInput | CommentsCreateOrConnectWithoutUserStoryInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutUserStoryInput | CommentsUpsertWithWhereUniqueWithoutUserStoryInput[]
    createMany?: CommentsCreateManyUserStoryInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutUserStoryInput | CommentsUpdateWithWhereUniqueWithoutUserStoryInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutUserStoryInput | CommentsUpdateManyWithWhereWithoutUserStoryInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<RoadMapCreateWithoutUserStoriesInput, RoadMapUncheckedCreateWithoutUserStoriesInput> | RoadMapCreateWithoutUserStoriesInput[] | RoadMapUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutUserStoriesInput | RoadMapCreateOrConnectWithoutUserStoriesInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutUserStoriesInput | RoadMapUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutUserStoriesInput | RoadMapUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutUserStoriesInput | RoadMapUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<FeaturesCreateWithoutUserStoriesInput, FeaturesUncheckedCreateWithoutUserStoriesInput> | FeaturesCreateWithoutUserStoriesInput[] | FeaturesUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutUserStoriesInput | FeaturesCreateOrConnectWithoutUserStoriesInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutUserStoriesInput | FeaturesUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutUserStoriesInput | FeaturesUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutUserStoriesInput | FeaturesUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<SprintsCreateWithoutUserStoriesInput, SprintsUncheckedCreateWithoutUserStoriesInput> | SprintsCreateWithoutUserStoriesInput[] | SprintsUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutUserStoriesInput | SprintsCreateOrConnectWithoutUserStoriesInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutUserStoriesInput | SprintsUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutUserStoriesInput | SprintsUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutUserStoriesInput | SprintsUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutUserStoriesNestedInput = {
    create?: XOR<TasksCreateWithoutUserStoriesInput, TasksUncheckedCreateWithoutUserStoriesInput> | TasksCreateWithoutUserStoriesInput[] | TasksUncheckedCreateWithoutUserStoriesInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutUserStoriesInput | TasksCreateOrConnectWithoutUserStoriesInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutUserStoriesInput | TasksUpsertWithWhereUniqueWithoutUserStoriesInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutUserStoriesInput | TasksUpdateWithWhereUniqueWithoutUserStoriesInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutUserStoriesInput | TasksUpdateManyWithWhereWithoutUserStoriesInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutSprintsInput = {
    create?: XOR<ProjectsCreateWithoutSprintsInput, ProjectsUncheckedCreateWithoutSprintsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutSprintsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedSprintsInput = {
    create?: XOR<UserCreateWithoutCreatedSprintsInput, UserUncheckedCreateWithoutCreatedSprintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSprintsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentsCreateNestedManyWithoutSprintInput = {
    create?: XOR<CommentsCreateWithoutSprintInput, CommentsUncheckedCreateWithoutSprintInput> | CommentsCreateWithoutSprintInput[] | CommentsUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutSprintInput | CommentsCreateOrConnectWithoutSprintInput[]
    createMany?: CommentsCreateManySprintInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutSprintsInput = {
    create?: XOR<RoadMapCreateWithoutSprintsInput, RoadMapUncheckedCreateWithoutSprintsInput> | RoadMapCreateWithoutSprintsInput[] | RoadMapUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutSprintsInput | RoadMapCreateOrConnectWithoutSprintsInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FeaturesCreateNestedManyWithoutSprintsInput = {
    create?: XOR<FeaturesCreateWithoutSprintsInput, FeaturesUncheckedCreateWithoutSprintsInput> | FeaturesCreateWithoutSprintsInput[] | FeaturesUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutSprintsInput | FeaturesCreateOrConnectWithoutSprintsInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryCreateNestedManyWithoutSprintsInput = {
    create?: XOR<UserStoryCreateWithoutSprintsInput, UserStoryUncheckedCreateWithoutSprintsInput> | UserStoryCreateWithoutSprintsInput[] | UserStoryUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutSprintsInput | UserStoryCreateOrConnectWithoutSprintsInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type TasksCreateNestedManyWithoutSprintsInput = {
    create?: XOR<TasksCreateWithoutSprintsInput, TasksUncheckedCreateWithoutSprintsInput> | TasksCreateWithoutSprintsInput[] | TasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutSprintsInput | TasksCreateOrConnectWithoutSprintsInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutSprintInput = {
    create?: XOR<CommentsCreateWithoutSprintInput, CommentsUncheckedCreateWithoutSprintInput> | CommentsCreateWithoutSprintInput[] | CommentsUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutSprintInput | CommentsCreateOrConnectWithoutSprintInput[]
    createMany?: CommentsCreateManySprintInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutSprintsInput = {
    create?: XOR<RoadMapCreateWithoutSprintsInput, RoadMapUncheckedCreateWithoutSprintsInput> | RoadMapCreateWithoutSprintsInput[] | RoadMapUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutSprintsInput | RoadMapCreateOrConnectWithoutSprintsInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutSprintsInput = {
    create?: XOR<FeaturesCreateWithoutSprintsInput, FeaturesUncheckedCreateWithoutSprintsInput> | FeaturesCreateWithoutSprintsInput[] | FeaturesUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutSprintsInput | FeaturesCreateOrConnectWithoutSprintsInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutSprintsInput = {
    create?: XOR<UserStoryCreateWithoutSprintsInput, UserStoryUncheckedCreateWithoutSprintsInput> | UserStoryCreateWithoutSprintsInput[] | UserStoryUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutSprintsInput | UserStoryCreateOrConnectWithoutSprintsInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutSprintsInput = {
    create?: XOR<TasksCreateWithoutSprintsInput, TasksUncheckedCreateWithoutSprintsInput> | TasksCreateWithoutSprintsInput[] | TasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutSprintsInput | TasksCreateOrConnectWithoutSprintsInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type EnumSprintStatusFieldUpdateOperationsInput = {
    set?: $Enums.SprintStatus
  }

  export type ProjectsUpdateOneRequiredWithoutSprintsNestedInput = {
    create?: XOR<ProjectsCreateWithoutSprintsInput, ProjectsUncheckedCreateWithoutSprintsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutSprintsInput
    upsert?: ProjectsUpsertWithoutSprintsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutSprintsInput, ProjectsUpdateWithoutSprintsInput>, ProjectsUncheckedUpdateWithoutSprintsInput>
  }

  export type UserUpdateOneWithoutCreatedSprintsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSprintsInput, UserUncheckedCreateWithoutCreatedSprintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSprintsInput
    upsert?: UserUpsertWithoutCreatedSprintsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSprintsInput, UserUpdateWithoutCreatedSprintsInput>, UserUncheckedUpdateWithoutCreatedSprintsInput>
  }

  export type CommentsUpdateManyWithoutSprintNestedInput = {
    create?: XOR<CommentsCreateWithoutSprintInput, CommentsUncheckedCreateWithoutSprintInput> | CommentsCreateWithoutSprintInput[] | CommentsUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutSprintInput | CommentsCreateOrConnectWithoutSprintInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutSprintInput | CommentsUpsertWithWhereUniqueWithoutSprintInput[]
    createMany?: CommentsCreateManySprintInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutSprintInput | CommentsUpdateWithWhereUniqueWithoutSprintInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutSprintInput | CommentsUpdateManyWithWhereWithoutSprintInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<RoadMapCreateWithoutSprintsInput, RoadMapUncheckedCreateWithoutSprintsInput> | RoadMapCreateWithoutSprintsInput[] | RoadMapUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutSprintsInput | RoadMapCreateOrConnectWithoutSprintsInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutSprintsInput | RoadMapUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutSprintsInput | RoadMapUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutSprintsInput | RoadMapUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FeaturesUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<FeaturesCreateWithoutSprintsInput, FeaturesUncheckedCreateWithoutSprintsInput> | FeaturesCreateWithoutSprintsInput[] | FeaturesUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutSprintsInput | FeaturesCreateOrConnectWithoutSprintsInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutSprintsInput | FeaturesUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutSprintsInput | FeaturesUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutSprintsInput | FeaturesUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<UserStoryCreateWithoutSprintsInput, UserStoryUncheckedCreateWithoutSprintsInput> | UserStoryCreateWithoutSprintsInput[] | UserStoryUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutSprintsInput | UserStoryCreateOrConnectWithoutSprintsInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutSprintsInput | UserStoryUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutSprintsInput | UserStoryUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutSprintsInput | UserStoryUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type TasksUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<TasksCreateWithoutSprintsInput, TasksUncheckedCreateWithoutSprintsInput> | TasksCreateWithoutSprintsInput[] | TasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutSprintsInput | TasksCreateOrConnectWithoutSprintsInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutSprintsInput | TasksUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutSprintsInput | TasksUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutSprintsInput | TasksUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutSprintNestedInput = {
    create?: XOR<CommentsCreateWithoutSprintInput, CommentsUncheckedCreateWithoutSprintInput> | CommentsCreateWithoutSprintInput[] | CommentsUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutSprintInput | CommentsCreateOrConnectWithoutSprintInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutSprintInput | CommentsUpsertWithWhereUniqueWithoutSprintInput[]
    createMany?: CommentsCreateManySprintInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutSprintInput | CommentsUpdateWithWhereUniqueWithoutSprintInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutSprintInput | CommentsUpdateManyWithWhereWithoutSprintInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<RoadMapCreateWithoutSprintsInput, RoadMapUncheckedCreateWithoutSprintsInput> | RoadMapCreateWithoutSprintsInput[] | RoadMapUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutSprintsInput | RoadMapCreateOrConnectWithoutSprintsInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutSprintsInput | RoadMapUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutSprintsInput | RoadMapUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutSprintsInput | RoadMapUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<FeaturesCreateWithoutSprintsInput, FeaturesUncheckedCreateWithoutSprintsInput> | FeaturesCreateWithoutSprintsInput[] | FeaturesUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutSprintsInput | FeaturesCreateOrConnectWithoutSprintsInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutSprintsInput | FeaturesUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutSprintsInput | FeaturesUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutSprintsInput | FeaturesUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<UserStoryCreateWithoutSprintsInput, UserStoryUncheckedCreateWithoutSprintsInput> | UserStoryCreateWithoutSprintsInput[] | UserStoryUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutSprintsInput | UserStoryCreateOrConnectWithoutSprintsInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutSprintsInput | UserStoryUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutSprintsInput | UserStoryUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutSprintsInput | UserStoryUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutSprintsNestedInput = {
    create?: XOR<TasksCreateWithoutSprintsInput, TasksUncheckedCreateWithoutSprintsInput> | TasksCreateWithoutSprintsInput[] | TasksUncheckedCreateWithoutSprintsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutSprintsInput | TasksCreateOrConnectWithoutSprintsInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutSprintsInput | TasksUpsertWithWhereUniqueWithoutSprintsInput[]
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutSprintsInput | TasksUpdateWithWhereUniqueWithoutSprintsInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutSprintsInput | TasksUpdateManyWithWhereWithoutSprintsInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectsCreateWithoutTasksInput, ProjectsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutTasksInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type TasksCreateNestedOneWithoutChildTasksInput = {
    create?: XOR<TasksCreateWithoutChildTasksInput, TasksUncheckedCreateWithoutChildTasksInput>
    connectOrCreate?: TasksCreateOrConnectWithoutChildTasksInput
    connect?: TasksWhereUniqueInput
  }

  export type TasksCreateNestedManyWithoutParentTaskInput = {
    create?: XOR<TasksCreateWithoutParentTaskInput, TasksUncheckedCreateWithoutParentTaskInput> | TasksCreateWithoutParentTaskInput[] | TasksUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutParentTaskInput | TasksCreateOrConnectWithoutParentTaskInput[]
    createMany?: TasksCreateManyParentTaskInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type TimeLogCreateNestedManyWithoutTaskInput = {
    create?: XOR<TimeLogCreateWithoutTaskInput, TimeLogUncheckedCreateWithoutTaskInput> | TimeLogCreateWithoutTaskInput[] | TimeLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutTaskInput | TimeLogCreateOrConnectWithoutTaskInput[]
    createMany?: TimeLogCreateManyTaskInputEnvelope
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
  }

  export type CommentsCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentsCreateWithoutTaskInput, CommentsUncheckedCreateWithoutTaskInput> | CommentsCreateWithoutTaskInput[] | CommentsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutTaskInput | CommentsCreateOrConnectWithoutTaskInput[]
    createMany?: CommentsCreateManyTaskInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutTasksInput = {
    create?: XOR<RoadMapCreateWithoutTasksInput, RoadMapUncheckedCreateWithoutTasksInput> | RoadMapCreateWithoutTasksInput[] | RoadMapUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutTasksInput | RoadMapCreateOrConnectWithoutTasksInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FeaturesCreateNestedManyWithoutTasksInput = {
    create?: XOR<FeaturesCreateWithoutTasksInput, FeaturesUncheckedCreateWithoutTasksInput> | FeaturesCreateWithoutTasksInput[] | FeaturesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutTasksInput | FeaturesCreateOrConnectWithoutTasksInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryCreateNestedManyWithoutTasksInput = {
    create?: XOR<UserStoryCreateWithoutTasksInput, UserStoryUncheckedCreateWithoutTasksInput> | UserStoryCreateWithoutTasksInput[] | UserStoryUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutTasksInput | UserStoryCreateOrConnectWithoutTasksInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsCreateNestedManyWithoutTasksInput = {
    create?: XOR<SprintsCreateWithoutTasksInput, SprintsUncheckedCreateWithoutTasksInput> | SprintsCreateWithoutTasksInput[] | SprintsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutTasksInput | SprintsCreateOrConnectWithoutTasksInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutParentTaskInput = {
    create?: XOR<TasksCreateWithoutParentTaskInput, TasksUncheckedCreateWithoutParentTaskInput> | TasksCreateWithoutParentTaskInput[] | TasksUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutParentTaskInput | TasksCreateOrConnectWithoutParentTaskInput[]
    createMany?: TasksCreateManyParentTaskInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type TimeLogUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TimeLogCreateWithoutTaskInput, TimeLogUncheckedCreateWithoutTaskInput> | TimeLogCreateWithoutTaskInput[] | TimeLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutTaskInput | TimeLogCreateOrConnectWithoutTaskInput[]
    createMany?: TimeLogCreateManyTaskInputEnvelope
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentsCreateWithoutTaskInput, CommentsUncheckedCreateWithoutTaskInput> | CommentsCreateWithoutTaskInput[] | CommentsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutTaskInput | CommentsCreateOrConnectWithoutTaskInput[]
    createMany?: CommentsCreateManyTaskInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<RoadMapCreateWithoutTasksInput, RoadMapUncheckedCreateWithoutTasksInput> | RoadMapCreateWithoutTasksInput[] | RoadMapUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutTasksInput | RoadMapCreateOrConnectWithoutTasksInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FeaturesUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<FeaturesCreateWithoutTasksInput, FeaturesUncheckedCreateWithoutTasksInput> | FeaturesCreateWithoutTasksInput[] | FeaturesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutTasksInput | FeaturesCreateOrConnectWithoutTasksInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
  }

  export type UserStoryUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<UserStoryCreateWithoutTasksInput, UserStoryUncheckedCreateWithoutTasksInput> | UserStoryCreateWithoutTasksInput[] | UserStoryUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutTasksInput | UserStoryCreateOrConnectWithoutTasksInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
  }

  export type SprintsUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<SprintsCreateWithoutTasksInput, SprintsUncheckedCreateWithoutTasksInput> | SprintsCreateWithoutTasksInput[] | SprintsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutTasksInput | SprintsCreateOrConnectWithoutTasksInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
  }

  export type ProjectsUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectsCreateWithoutTasksInput, ProjectsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutTasksInput
    upsert?: ProjectsUpsertWithoutTasksInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutTasksInput, ProjectsUpdateWithoutTasksInput>, ProjectsUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    upsert?: UserUpsertWithoutAssignedTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTasksInput, UserUpdateWithoutAssignedTasksInput>, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type TasksUpdateOneWithoutChildTasksNestedInput = {
    create?: XOR<TasksCreateWithoutChildTasksInput, TasksUncheckedCreateWithoutChildTasksInput>
    connectOrCreate?: TasksCreateOrConnectWithoutChildTasksInput
    upsert?: TasksUpsertWithoutChildTasksInput
    disconnect?: TasksWhereInput | boolean
    delete?: TasksWhereInput | boolean
    connect?: TasksWhereUniqueInput
    update?: XOR<XOR<TasksUpdateToOneWithWhereWithoutChildTasksInput, TasksUpdateWithoutChildTasksInput>, TasksUncheckedUpdateWithoutChildTasksInput>
  }

  export type TasksUpdateManyWithoutParentTaskNestedInput = {
    create?: XOR<TasksCreateWithoutParentTaskInput, TasksUncheckedCreateWithoutParentTaskInput> | TasksCreateWithoutParentTaskInput[] | TasksUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutParentTaskInput | TasksCreateOrConnectWithoutParentTaskInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutParentTaskInput | TasksUpsertWithWhereUniqueWithoutParentTaskInput[]
    createMany?: TasksCreateManyParentTaskInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutParentTaskInput | TasksUpdateWithWhereUniqueWithoutParentTaskInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutParentTaskInput | TasksUpdateManyWithWhereWithoutParentTaskInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type TimeLogUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TimeLogCreateWithoutTaskInput, TimeLogUncheckedCreateWithoutTaskInput> | TimeLogCreateWithoutTaskInput[] | TimeLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutTaskInput | TimeLogCreateOrConnectWithoutTaskInput[]
    upsert?: TimeLogUpsertWithWhereUniqueWithoutTaskInput | TimeLogUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TimeLogCreateManyTaskInputEnvelope
    set?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    disconnect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    delete?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    update?: TimeLogUpdateWithWhereUniqueWithoutTaskInput | TimeLogUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TimeLogUpdateManyWithWhereWithoutTaskInput | TimeLogUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
  }

  export type CommentsUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentsCreateWithoutTaskInput, CommentsUncheckedCreateWithoutTaskInput> | CommentsCreateWithoutTaskInput[] | CommentsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutTaskInput | CommentsCreateOrConnectWithoutTaskInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutTaskInput | CommentsUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentsCreateManyTaskInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutTaskInput | CommentsUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutTaskInput | CommentsUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutTasksNestedInput = {
    create?: XOR<RoadMapCreateWithoutTasksInput, RoadMapUncheckedCreateWithoutTasksInput> | RoadMapCreateWithoutTasksInput[] | RoadMapUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutTasksInput | RoadMapCreateOrConnectWithoutTasksInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutTasksInput | RoadMapUpsertWithWhereUniqueWithoutTasksInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutTasksInput | RoadMapUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutTasksInput | RoadMapUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FeaturesUpdateManyWithoutTasksNestedInput = {
    create?: XOR<FeaturesCreateWithoutTasksInput, FeaturesUncheckedCreateWithoutTasksInput> | FeaturesCreateWithoutTasksInput[] | FeaturesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutTasksInput | FeaturesCreateOrConnectWithoutTasksInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutTasksInput | FeaturesUpsertWithWhereUniqueWithoutTasksInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutTasksInput | FeaturesUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutTasksInput | FeaturesUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUpdateManyWithoutTasksNestedInput = {
    create?: XOR<UserStoryCreateWithoutTasksInput, UserStoryUncheckedCreateWithoutTasksInput> | UserStoryCreateWithoutTasksInput[] | UserStoryUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutTasksInput | UserStoryCreateOrConnectWithoutTasksInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutTasksInput | UserStoryUpsertWithWhereUniqueWithoutTasksInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutTasksInput | UserStoryUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutTasksInput | UserStoryUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUpdateManyWithoutTasksNestedInput = {
    create?: XOR<SprintsCreateWithoutTasksInput, SprintsUncheckedCreateWithoutTasksInput> | SprintsCreateWithoutTasksInput[] | SprintsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutTasksInput | SprintsCreateOrConnectWithoutTasksInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutTasksInput | SprintsUpsertWithWhereUniqueWithoutTasksInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutTasksInput | SprintsUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutTasksInput | SprintsUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutParentTaskNestedInput = {
    create?: XOR<TasksCreateWithoutParentTaskInput, TasksUncheckedCreateWithoutParentTaskInput> | TasksCreateWithoutParentTaskInput[] | TasksUncheckedCreateWithoutParentTaskInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutParentTaskInput | TasksCreateOrConnectWithoutParentTaskInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutParentTaskInput | TasksUpsertWithWhereUniqueWithoutParentTaskInput[]
    createMany?: TasksCreateManyParentTaskInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutParentTaskInput | TasksUpdateWithWhereUniqueWithoutParentTaskInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutParentTaskInput | TasksUpdateManyWithWhereWithoutParentTaskInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type TimeLogUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TimeLogCreateWithoutTaskInput, TimeLogUncheckedCreateWithoutTaskInput> | TimeLogCreateWithoutTaskInput[] | TimeLogUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TimeLogCreateOrConnectWithoutTaskInput | TimeLogCreateOrConnectWithoutTaskInput[]
    upsert?: TimeLogUpsertWithWhereUniqueWithoutTaskInput | TimeLogUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TimeLogCreateManyTaskInputEnvelope
    set?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    disconnect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    delete?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    connect?: TimeLogWhereUniqueInput | TimeLogWhereUniqueInput[]
    update?: TimeLogUpdateWithWhereUniqueWithoutTaskInput | TimeLogUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TimeLogUpdateManyWithWhereWithoutTaskInput | TimeLogUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentsCreateWithoutTaskInput, CommentsUncheckedCreateWithoutTaskInput> | CommentsCreateWithoutTaskInput[] | CommentsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutTaskInput | CommentsCreateOrConnectWithoutTaskInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutTaskInput | CommentsUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentsCreateManyTaskInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutTaskInput | CommentsUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutTaskInput | CommentsUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<RoadMapCreateWithoutTasksInput, RoadMapUncheckedCreateWithoutTasksInput> | RoadMapCreateWithoutTasksInput[] | RoadMapUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutTasksInput | RoadMapCreateOrConnectWithoutTasksInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutTasksInput | RoadMapUpsertWithWhereUniqueWithoutTasksInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutTasksInput | RoadMapUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutTasksInput | RoadMapUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FeaturesUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<FeaturesCreateWithoutTasksInput, FeaturesUncheckedCreateWithoutTasksInput> | FeaturesCreateWithoutTasksInput[] | FeaturesUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: FeaturesCreateOrConnectWithoutTasksInput | FeaturesCreateOrConnectWithoutTasksInput[]
    upsert?: FeaturesUpsertWithWhereUniqueWithoutTasksInput | FeaturesUpsertWithWhereUniqueWithoutTasksInput[]
    set?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    disconnect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    delete?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    connect?: FeaturesWhereUniqueInput | FeaturesWhereUniqueInput[]
    update?: FeaturesUpdateWithWhereUniqueWithoutTasksInput | FeaturesUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: FeaturesUpdateManyWithWhereWithoutTasksInput | FeaturesUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
  }

  export type UserStoryUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<UserStoryCreateWithoutTasksInput, UserStoryUncheckedCreateWithoutTasksInput> | UserStoryCreateWithoutTasksInput[] | UserStoryUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: UserStoryCreateOrConnectWithoutTasksInput | UserStoryCreateOrConnectWithoutTasksInput[]
    upsert?: UserStoryUpsertWithWhereUniqueWithoutTasksInput | UserStoryUpsertWithWhereUniqueWithoutTasksInput[]
    set?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    disconnect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    delete?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    connect?: UserStoryWhereUniqueInput | UserStoryWhereUniqueInput[]
    update?: UserStoryUpdateWithWhereUniqueWithoutTasksInput | UserStoryUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: UserStoryUpdateManyWithWhereWithoutTasksInput | UserStoryUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
  }

  export type SprintsUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<SprintsCreateWithoutTasksInput, SprintsUncheckedCreateWithoutTasksInput> | SprintsCreateWithoutTasksInput[] | SprintsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: SprintsCreateOrConnectWithoutTasksInput | SprintsCreateOrConnectWithoutTasksInput[]
    upsert?: SprintsUpsertWithWhereUniqueWithoutTasksInput | SprintsUpsertWithWhereUniqueWithoutTasksInput[]
    set?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    disconnect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    delete?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    connect?: SprintsWhereUniqueInput | SprintsWhereUniqueInput[]
    update?: SprintsUpdateWithWhereUniqueWithoutTasksInput | SprintsUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: SprintsUpdateManyWithWhereWithoutTasksInput | SprintsUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutSchemaFieldsInput = {
    create?: XOR<ProjectsCreateWithoutSchemaFieldsInput, ProjectsUncheckedCreateWithoutSchemaFieldsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutSchemaFieldsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type SchemaFieldsCreateNestedOneWithoutChildFieldsInput = {
    create?: XOR<SchemaFieldsCreateWithoutChildFieldsInput, SchemaFieldsUncheckedCreateWithoutChildFieldsInput>
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutChildFieldsInput
    connect?: SchemaFieldsWhereUniqueInput
  }

  export type SchemaFieldsCreateNestedManyWithoutParentFieldInput = {
    create?: XOR<SchemaFieldsCreateWithoutParentFieldInput, SchemaFieldsUncheckedCreateWithoutParentFieldInput> | SchemaFieldsCreateWithoutParentFieldInput[] | SchemaFieldsUncheckedCreateWithoutParentFieldInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutParentFieldInput | SchemaFieldsCreateOrConnectWithoutParentFieldInput[]
    createMany?: SchemaFieldsCreateManyParentFieldInputEnvelope
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
  }

  export type SchemaFieldsUncheckedCreateNestedManyWithoutParentFieldInput = {
    create?: XOR<SchemaFieldsCreateWithoutParentFieldInput, SchemaFieldsUncheckedCreateWithoutParentFieldInput> | SchemaFieldsCreateWithoutParentFieldInput[] | SchemaFieldsUncheckedCreateWithoutParentFieldInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutParentFieldInput | SchemaFieldsCreateOrConnectWithoutParentFieldInput[]
    createMany?: SchemaFieldsCreateManyParentFieldInputEnvelope
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
  }

  export type NullableEnumFieldTypeFieldUpdateOperationsInput = {
    set?: $Enums.FieldType | null
  }

  export type ProjectsUpdateOneRequiredWithoutSchemaFieldsNestedInput = {
    create?: XOR<ProjectsCreateWithoutSchemaFieldsInput, ProjectsUncheckedCreateWithoutSchemaFieldsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutSchemaFieldsInput
    upsert?: ProjectsUpsertWithoutSchemaFieldsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutSchemaFieldsInput, ProjectsUpdateWithoutSchemaFieldsInput>, ProjectsUncheckedUpdateWithoutSchemaFieldsInput>
  }

  export type SchemaFieldsUpdateOneWithoutChildFieldsNestedInput = {
    create?: XOR<SchemaFieldsCreateWithoutChildFieldsInput, SchemaFieldsUncheckedCreateWithoutChildFieldsInput>
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutChildFieldsInput
    upsert?: SchemaFieldsUpsertWithoutChildFieldsInput
    disconnect?: SchemaFieldsWhereInput | boolean
    delete?: SchemaFieldsWhereInput | boolean
    connect?: SchemaFieldsWhereUniqueInput
    update?: XOR<XOR<SchemaFieldsUpdateToOneWithWhereWithoutChildFieldsInput, SchemaFieldsUpdateWithoutChildFieldsInput>, SchemaFieldsUncheckedUpdateWithoutChildFieldsInput>
  }

  export type SchemaFieldsUpdateManyWithoutParentFieldNestedInput = {
    create?: XOR<SchemaFieldsCreateWithoutParentFieldInput, SchemaFieldsUncheckedCreateWithoutParentFieldInput> | SchemaFieldsCreateWithoutParentFieldInput[] | SchemaFieldsUncheckedCreateWithoutParentFieldInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutParentFieldInput | SchemaFieldsCreateOrConnectWithoutParentFieldInput[]
    upsert?: SchemaFieldsUpsertWithWhereUniqueWithoutParentFieldInput | SchemaFieldsUpsertWithWhereUniqueWithoutParentFieldInput[]
    createMany?: SchemaFieldsCreateManyParentFieldInputEnvelope
    set?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    disconnect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    delete?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    update?: SchemaFieldsUpdateWithWhereUniqueWithoutParentFieldInput | SchemaFieldsUpdateWithWhereUniqueWithoutParentFieldInput[]
    updateMany?: SchemaFieldsUpdateManyWithWhereWithoutParentFieldInput | SchemaFieldsUpdateManyWithWhereWithoutParentFieldInput[]
    deleteMany?: SchemaFieldsScalarWhereInput | SchemaFieldsScalarWhereInput[]
  }

  export type SchemaFieldsUncheckedUpdateManyWithoutParentFieldNestedInput = {
    create?: XOR<SchemaFieldsCreateWithoutParentFieldInput, SchemaFieldsUncheckedCreateWithoutParentFieldInput> | SchemaFieldsCreateWithoutParentFieldInput[] | SchemaFieldsUncheckedCreateWithoutParentFieldInput[]
    connectOrCreate?: SchemaFieldsCreateOrConnectWithoutParentFieldInput | SchemaFieldsCreateOrConnectWithoutParentFieldInput[]
    upsert?: SchemaFieldsUpsertWithWhereUniqueWithoutParentFieldInput | SchemaFieldsUpsertWithWhereUniqueWithoutParentFieldInput[]
    createMany?: SchemaFieldsCreateManyParentFieldInputEnvelope
    set?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    disconnect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    delete?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    connect?: SchemaFieldsWhereUniqueInput | SchemaFieldsWhereUniqueInput[]
    update?: SchemaFieldsUpdateWithWhereUniqueWithoutParentFieldInput | SchemaFieldsUpdateWithWhereUniqueWithoutParentFieldInput[]
    updateMany?: SchemaFieldsUpdateManyWithWhereWithoutParentFieldInput | SchemaFieldsUpdateManyWithWhereWithoutParentFieldInput[]
    deleteMany?: SchemaFieldsScalarWhereInput | SchemaFieldsScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutTimeLogsInput = {
    create?: XOR<ProjectsCreateWithoutTimeLogsInput, ProjectsUncheckedCreateWithoutTimeLogsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutTimeLogsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTimeLogsInput = {
    create?: XOR<UserCreateWithoutTimeLogsInput, UserUncheckedCreateWithoutTimeLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeLogsInput
    connect?: UserWhereUniqueInput
  }

  export type TasksCreateNestedOneWithoutTimeLogsInput = {
    create?: XOR<TasksCreateWithoutTimeLogsInput, TasksUncheckedCreateWithoutTimeLogsInput>
    connectOrCreate?: TasksCreateOrConnectWithoutTimeLogsInput
    connect?: TasksWhereUniqueInput
  }

  export type ProjectsUpdateOneRequiredWithoutTimeLogsNestedInput = {
    create?: XOR<ProjectsCreateWithoutTimeLogsInput, ProjectsUncheckedCreateWithoutTimeLogsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutTimeLogsInput
    upsert?: ProjectsUpsertWithoutTimeLogsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutTimeLogsInput, ProjectsUpdateWithoutTimeLogsInput>, ProjectsUncheckedUpdateWithoutTimeLogsInput>
  }

  export type UserUpdateOneRequiredWithoutTimeLogsNestedInput = {
    create?: XOR<UserCreateWithoutTimeLogsInput, UserUncheckedCreateWithoutTimeLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeLogsInput
    upsert?: UserUpsertWithoutTimeLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimeLogsInput, UserUpdateWithoutTimeLogsInput>, UserUncheckedUpdateWithoutTimeLogsInput>
  }

  export type TasksUpdateOneWithoutTimeLogsNestedInput = {
    create?: XOR<TasksCreateWithoutTimeLogsInput, TasksUncheckedCreateWithoutTimeLogsInput>
    connectOrCreate?: TasksCreateOrConnectWithoutTimeLogsInput
    upsert?: TasksUpsertWithoutTimeLogsInput
    disconnect?: TasksWhereInput | boolean
    delete?: TasksWhereInput | boolean
    connect?: TasksWhereUniqueInput
    update?: XOR<XOR<TasksUpdateToOneWithWhereWithoutTimeLogsInput, TasksUpdateWithoutTimeLogsInput>, TasksUncheckedUpdateWithoutTimeLogsInput>
  }

  export type UserCreateNestedOneWithoutAuthoredCommentsInput = {
    create?: XOR<UserCreateWithoutAuthoredCommentsInput, UserUncheckedCreateWithoutAuthoredCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentsCreateNestedOneWithoutChildCommentsInput = {
    create?: XOR<CommentsCreateWithoutChildCommentsInput, CommentsUncheckedCreateWithoutChildCommentsInput>
    connectOrCreate?: CommentsCreateOrConnectWithoutChildCommentsInput
    connect?: CommentsWhereUniqueInput
  }

  export type CommentsCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<CommentsCreateWithoutParentCommentInput, CommentsUncheckedCreateWithoutParentCommentInput> | CommentsCreateWithoutParentCommentInput[] | CommentsUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutParentCommentInput | CommentsCreateOrConnectWithoutParentCommentInput[]
    createMany?: CommentsCreateManyParentCommentInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type FeaturesCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FeaturesCreateWithoutCommentsInput, FeaturesUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FeaturesCreateOrConnectWithoutCommentsInput
    connect?: FeaturesWhereUniqueInput
  }

  export type UserStoryCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserStoryCreateWithoutCommentsInput, UserStoryUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserStoryCreateOrConnectWithoutCommentsInput
    connect?: UserStoryWhereUniqueInput
  }

  export type TasksCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TasksCreateOrConnectWithoutCommentsInput
    connect?: TasksWhereUniqueInput
  }

  export type SprintsCreateNestedOneWithoutCommentsInput = {
    create?: XOR<SprintsCreateWithoutCommentsInput, SprintsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SprintsCreateOrConnectWithoutCommentsInput
    connect?: SprintsWhereUniqueInput
  }

  export type RoadMapCreateNestedOneWithoutCommentsInput = {
    create?: XOR<RoadMapCreateWithoutCommentsInput, RoadMapUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: RoadMapCreateOrConnectWithoutCommentsInput
    connect?: RoadMapWhereUniqueInput
  }

  export type CommentsUncheckedCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<CommentsCreateWithoutParentCommentInput, CommentsUncheckedCreateWithoutParentCommentInput> | CommentsCreateWithoutParentCommentInput[] | CommentsUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutParentCommentInput | CommentsCreateOrConnectWithoutParentCommentInput[]
    createMany?: CommentsCreateManyParentCommentInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput = {
    create?: XOR<UserCreateWithoutAuthoredCommentsInput, UserUncheckedCreateWithoutAuthoredCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredCommentsInput
    upsert?: UserUpsertWithoutAuthoredCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthoredCommentsInput, UserUpdateWithoutAuthoredCommentsInput>, UserUncheckedUpdateWithoutAuthoredCommentsInput>
  }

  export type CommentsUpdateOneWithoutChildCommentsNestedInput = {
    create?: XOR<CommentsCreateWithoutChildCommentsInput, CommentsUncheckedCreateWithoutChildCommentsInput>
    connectOrCreate?: CommentsCreateOrConnectWithoutChildCommentsInput
    upsert?: CommentsUpsertWithoutChildCommentsInput
    disconnect?: CommentsWhereInput | boolean
    delete?: CommentsWhereInput | boolean
    connect?: CommentsWhereUniqueInput
    update?: XOR<XOR<CommentsUpdateToOneWithWhereWithoutChildCommentsInput, CommentsUpdateWithoutChildCommentsInput>, CommentsUncheckedUpdateWithoutChildCommentsInput>
  }

  export type CommentsUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<CommentsCreateWithoutParentCommentInput, CommentsUncheckedCreateWithoutParentCommentInput> | CommentsCreateWithoutParentCommentInput[] | CommentsUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutParentCommentInput | CommentsCreateOrConnectWithoutParentCommentInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutParentCommentInput | CommentsUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: CommentsCreateManyParentCommentInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutParentCommentInput | CommentsUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutParentCommentInput | CommentsUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type FeaturesUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<FeaturesCreateWithoutCommentsInput, FeaturesUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FeaturesCreateOrConnectWithoutCommentsInput
    upsert?: FeaturesUpsertWithoutCommentsInput
    disconnect?: FeaturesWhereInput | boolean
    delete?: FeaturesWhereInput | boolean
    connect?: FeaturesWhereUniqueInput
    update?: XOR<XOR<FeaturesUpdateToOneWithWhereWithoutCommentsInput, FeaturesUpdateWithoutCommentsInput>, FeaturesUncheckedUpdateWithoutCommentsInput>
  }

  export type UserStoryUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<UserStoryCreateWithoutCommentsInput, UserStoryUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserStoryCreateOrConnectWithoutCommentsInput
    upsert?: UserStoryUpsertWithoutCommentsInput
    disconnect?: UserStoryWhereInput | boolean
    delete?: UserStoryWhereInput | boolean
    connect?: UserStoryWhereUniqueInput
    update?: XOR<XOR<UserStoryUpdateToOneWithWhereWithoutCommentsInput, UserStoryUpdateWithoutCommentsInput>, UserStoryUncheckedUpdateWithoutCommentsInput>
  }

  export type TasksUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TasksCreateOrConnectWithoutCommentsInput
    upsert?: TasksUpsertWithoutCommentsInput
    disconnect?: TasksWhereInput | boolean
    delete?: TasksWhereInput | boolean
    connect?: TasksWhereUniqueInput
    update?: XOR<XOR<TasksUpdateToOneWithWhereWithoutCommentsInput, TasksUpdateWithoutCommentsInput>, TasksUncheckedUpdateWithoutCommentsInput>
  }

  export type SprintsUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<SprintsCreateWithoutCommentsInput, SprintsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SprintsCreateOrConnectWithoutCommentsInput
    upsert?: SprintsUpsertWithoutCommentsInput
    disconnect?: SprintsWhereInput | boolean
    delete?: SprintsWhereInput | boolean
    connect?: SprintsWhereUniqueInput
    update?: XOR<XOR<SprintsUpdateToOneWithWhereWithoutCommentsInput, SprintsUpdateWithoutCommentsInput>, SprintsUncheckedUpdateWithoutCommentsInput>
  }

  export type RoadMapUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<RoadMapCreateWithoutCommentsInput, RoadMapUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: RoadMapCreateOrConnectWithoutCommentsInput
    upsert?: RoadMapUpsertWithoutCommentsInput
    disconnect?: RoadMapWhereInput | boolean
    delete?: RoadMapWhereInput | boolean
    connect?: RoadMapWhereUniqueInput
    update?: XOR<XOR<RoadMapUpdateToOneWithWhereWithoutCommentsInput, RoadMapUpdateWithoutCommentsInput>, RoadMapUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentsUncheckedUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<CommentsCreateWithoutParentCommentInput, CommentsUncheckedCreateWithoutParentCommentInput> | CommentsCreateWithoutParentCommentInput[] | CommentsUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutParentCommentInput | CommentsCreateOrConnectWithoutParentCommentInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutParentCommentInput | CommentsUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: CommentsCreateManyParentCommentInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutParentCommentInput | CommentsUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutParentCommentInput | CommentsUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type ProjectsCreateNestedOneWithoutFilesInput = {
    create?: XOR<ProjectsCreateWithoutFilesInput, ProjectsUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutFilesInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedFilesInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
  }

  export type FilesCreateNestedOneWithoutChildFilesInput = {
    create?: XOR<FilesCreateWithoutChildFilesInput, FilesUncheckedCreateWithoutChildFilesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutChildFilesInput
    connect?: FilesWhereUniqueInput
  }

  export type FilesCreateNestedManyWithoutParentFileInput = {
    create?: XOR<FilesCreateWithoutParentFileInput, FilesUncheckedCreateWithoutParentFileInput> | FilesCreateWithoutParentFileInput[] | FilesUncheckedCreateWithoutParentFileInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutParentFileInput | FilesCreateOrConnectWithoutParentFileInput[]
    createMany?: FilesCreateManyParentFileInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type RoadMapCreateNestedManyWithoutFilesInput = {
    create?: XOR<RoadMapCreateWithoutFilesInput, RoadMapUncheckedCreateWithoutFilesInput> | RoadMapCreateWithoutFilesInput[] | RoadMapUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFilesInput | RoadMapCreateOrConnectWithoutFilesInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type FilesUncheckedCreateNestedManyWithoutParentFileInput = {
    create?: XOR<FilesCreateWithoutParentFileInput, FilesUncheckedCreateWithoutParentFileInput> | FilesCreateWithoutParentFileInput[] | FilesUncheckedCreateWithoutParentFileInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutParentFileInput | FilesCreateOrConnectWithoutParentFileInput[]
    createMany?: FilesCreateManyParentFileInputEnvelope
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
  }

  export type RoadMapUncheckedCreateNestedManyWithoutFilesInput = {
    create?: XOR<RoadMapCreateWithoutFilesInput, RoadMapUncheckedCreateWithoutFilesInput> | RoadMapCreateWithoutFilesInput[] | RoadMapUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFilesInput | RoadMapCreateOrConnectWithoutFilesInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
  }

  export type EnumFileTypeFieldUpdateOperationsInput = {
    set?: $Enums.FileType
  }

  export type ProjectsUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<ProjectsCreateWithoutFilesInput, ProjectsUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutFilesInput
    upsert?: ProjectsUpsertWithoutFilesInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutFilesInput, ProjectsUpdateWithoutFilesInput>, ProjectsUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedFilesNestedInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    upsert?: UserUpsertWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedFilesInput, UserUpdateWithoutUploadedFilesInput>, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type FilesUpdateOneWithoutChildFilesNestedInput = {
    create?: XOR<FilesCreateWithoutChildFilesInput, FilesUncheckedCreateWithoutChildFilesInput>
    connectOrCreate?: FilesCreateOrConnectWithoutChildFilesInput
    upsert?: FilesUpsertWithoutChildFilesInput
    disconnect?: FilesWhereInput | boolean
    delete?: FilesWhereInput | boolean
    connect?: FilesWhereUniqueInput
    update?: XOR<XOR<FilesUpdateToOneWithWhereWithoutChildFilesInput, FilesUpdateWithoutChildFilesInput>, FilesUncheckedUpdateWithoutChildFilesInput>
  }

  export type FilesUpdateManyWithoutParentFileNestedInput = {
    create?: XOR<FilesCreateWithoutParentFileInput, FilesUncheckedCreateWithoutParentFileInput> | FilesCreateWithoutParentFileInput[] | FilesUncheckedCreateWithoutParentFileInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutParentFileInput | FilesCreateOrConnectWithoutParentFileInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutParentFileInput | FilesUpsertWithWhereUniqueWithoutParentFileInput[]
    createMany?: FilesCreateManyParentFileInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutParentFileInput | FilesUpdateWithWhereUniqueWithoutParentFileInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutParentFileInput | FilesUpdateManyWithWhereWithoutParentFileInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type RoadMapUpdateManyWithoutFilesNestedInput = {
    create?: XOR<RoadMapCreateWithoutFilesInput, RoadMapUncheckedCreateWithoutFilesInput> | RoadMapCreateWithoutFilesInput[] | RoadMapUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFilesInput | RoadMapCreateOrConnectWithoutFilesInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutFilesInput | RoadMapUpsertWithWhereUniqueWithoutFilesInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutFilesInput | RoadMapUpdateWithWhereUniqueWithoutFilesInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutFilesInput | RoadMapUpdateManyWithWhereWithoutFilesInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type FilesUncheckedUpdateManyWithoutParentFileNestedInput = {
    create?: XOR<FilesCreateWithoutParentFileInput, FilesUncheckedCreateWithoutParentFileInput> | FilesCreateWithoutParentFileInput[] | FilesUncheckedCreateWithoutParentFileInput[]
    connectOrCreate?: FilesCreateOrConnectWithoutParentFileInput | FilesCreateOrConnectWithoutParentFileInput[]
    upsert?: FilesUpsertWithWhereUniqueWithoutParentFileInput | FilesUpsertWithWhereUniqueWithoutParentFileInput[]
    createMany?: FilesCreateManyParentFileInputEnvelope
    set?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    disconnect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    delete?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    connect?: FilesWhereUniqueInput | FilesWhereUniqueInput[]
    update?: FilesUpdateWithWhereUniqueWithoutParentFileInput | FilesUpdateWithWhereUniqueWithoutParentFileInput[]
    updateMany?: FilesUpdateManyWithWhereWithoutParentFileInput | FilesUpdateManyWithWhereWithoutParentFileInput[]
    deleteMany?: FilesScalarWhereInput | FilesScalarWhereInput[]
  }

  export type RoadMapUncheckedUpdateManyWithoutFilesNestedInput = {
    create?: XOR<RoadMapCreateWithoutFilesInput, RoadMapUncheckedCreateWithoutFilesInput> | RoadMapCreateWithoutFilesInput[] | RoadMapUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: RoadMapCreateOrConnectWithoutFilesInput | RoadMapCreateOrConnectWithoutFilesInput[]
    upsert?: RoadMapUpsertWithWhereUniqueWithoutFilesInput | RoadMapUpsertWithWhereUniqueWithoutFilesInput[]
    set?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    disconnect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    delete?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    connect?: RoadMapWhereUniqueInput | RoadMapWhereUniqueInput[]
    update?: RoadMapUpdateWithWhereUniqueWithoutFilesInput | RoadMapUpdateWithWhereUniqueWithoutFilesInput[]
    updateMany?: RoadMapUpdateManyWithWhereWithoutFilesInput | RoadMapUpdateManyWithWhereWithoutFilesInput[]
    deleteMany?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ActionType
  }

  export type UserUpdateOneRequiredWithoutActivityLogsNestedInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    upsert?: UserUpsertWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLogsInput, UserUpdateWithoutActivityLogsInput>, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumSprintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SprintStatus[]
    notIn?: $Enums.SprintStatus[]
    not?: NestedEnumSprintStatusFilter<$PrismaModel> | $Enums.SprintStatus
  }

  export type NestedEnumSprintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SprintStatus | EnumSprintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SprintStatus[]
    notIn?: $Enums.SprintStatus[]
    not?: NestedEnumSprintStatusWithAggregatesFilter<$PrismaModel> | $Enums.SprintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSprintStatusFilter<$PrismaModel>
    _max?: NestedEnumSprintStatusFilter<$PrismaModel>
  }

  export type NestedEnumFieldTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FieldType[] | null
    notIn?: $Enums.FieldType[] | null
    not?: NestedEnumFieldTypeNullableFilter<$PrismaModel> | $Enums.FieldType | null
  }

  export type NestedEnumFieldTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FieldType[] | null
    notIn?: $Enums.FieldType[] | null
    not?: NestedEnumFieldTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.FieldType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumFileTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[]
    notIn?: $Enums.FileType[]
    not?: NestedEnumFileTypeFilter<$PrismaModel> | $Enums.FileType
  }

  export type NestedEnumFileTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileType | EnumFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FileType[]
    notIn?: $Enums.FileType[]
    not?: NestedEnumFileTypeWithAggregatesFilter<$PrismaModel> | $Enums.FileType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileTypeFilter<$PrismaModel>
    _max?: NestedEnumFileTypeFilter<$PrismaModel>
  }

  export type NestedEnumActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[]
    notIn?: $Enums.ActionType[]
    not?: NestedEnumActionTypeFilter<$PrismaModel> | $Enums.ActionType
  }

  export type NestedEnumActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[]
    notIn?: $Enums.ActionType[]
    not?: NestedEnumActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionTypeFilter<$PrismaModel>
    _max?: NestedEnumActionTypeFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    idToken?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    idToken?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
  }

  export type VerificationCreateWithoutUserInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUncheckedCreateWithoutUserInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationCreateOrConnectWithoutUserInput = {
    where: VerificationWhereUniqueInput
    create: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput>
  }

  export type VerificationCreateManyUserInputEnvelope = {
    data: VerificationCreateManyUserInput | VerificationCreateManyUserInput[]
  }

  export type ProjectsCreateWithoutUsersInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutUsersInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput>
  }

  export type ProjectsCreateWithoutCreatorInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutCreatorInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutCreatorInput, ProjectsUncheckedCreateWithoutCreatorInput>
  }

  export type ProjectsCreateManyCreatorInputEnvelope = {
    data: ProjectsCreateManyCreatorInput | ProjectsCreateManyCreatorInput[]
  }

  export type FeaturesCreateWithoutCreatorInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutCreatorInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutCreatorInput, FeaturesUncheckedCreateWithoutCreatorInput>
  }

  export type FeaturesCreateManyCreatorInputEnvelope = {
    data: FeaturesCreateManyCreatorInput | FeaturesCreateManyCreatorInput[]
  }

  export type UserStoryCreateWithoutCreatorInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutCreatorInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutCreatorInput, UserStoryUncheckedCreateWithoutCreatorInput>
  }

  export type UserStoryCreateManyCreatorInputEnvelope = {
    data: UserStoryCreateManyCreatorInput | UserStoryCreateManyCreatorInput[]
  }

  export type TasksCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutAssigneeInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutAssigneeInput, TasksUncheckedCreateWithoutAssigneeInput>
  }

  export type TasksCreateManyAssigneeInputEnvelope = {
    data: TasksCreateManyAssigneeInput | TasksCreateManyAssigneeInput[]
  }

  export type CommentsCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutAuthorInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutAuthorInput, CommentsUncheckedCreateWithoutAuthorInput>
  }

  export type CommentsCreateManyAuthorInputEnvelope = {
    data: CommentsCreateManyAuthorInput | CommentsCreateManyAuthorInput[]
  }

  export type TimeLogCreateWithoutUserInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTimeLogsInput
    task?: TasksCreateNestedOneWithoutTimeLogsInput
  }

  export type TimeLogUncheckedCreateWithoutUserInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    projectId: string
    taskId?: string | null
  }

  export type TimeLogCreateOrConnectWithoutUserInput = {
    where: TimeLogWhereUniqueInput
    create: XOR<TimeLogCreateWithoutUserInput, TimeLogUncheckedCreateWithoutUserInput>
  }

  export type TimeLogCreateManyUserInputEnvelope = {
    data: TimeLogCreateManyUserInput | TimeLogCreateManyUserInput[]
  }

  export type ActivityLogsCreateWithoutUserInput = {
    id?: string
    type: $Enums.ActionType
    message: string
    createdAt?: Date | string
  }

  export type ActivityLogsUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.ActionType
    message: string
    createdAt?: Date | string
  }

  export type ActivityLogsCreateOrConnectWithoutUserInput = {
    where: ActivityLogsWhereUniqueInput
    create: XOR<ActivityLogsCreateWithoutUserInput, ActivityLogsUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogsCreateManyUserInputEnvelope = {
    data: ActivityLogsCreateManyUserInput | ActivityLogsCreateManyUserInput[]
  }

  export type FilesCreateWithoutUploaderInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    project: ProjectsCreateNestedOneWithoutFilesInput
    parentFile?: FilesCreateNestedOneWithoutChildFilesInput
    childFiles?: FilesCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapCreateNestedManyWithoutFilesInput
  }

  export type FilesUncheckedCreateWithoutUploaderInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    parentFileId?: string | null
    childFiles?: FilesUncheckedCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FilesCreateOrConnectWithoutUploaderInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutUploaderInput, FilesUncheckedCreateWithoutUploaderInput>
  }

  export type FilesCreateManyUploaderInputEnvelope = {
    data: FilesCreateManyUploaderInput | FilesCreateManyUploaderInput[]
  }

  export type TeamsCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutMemberTeamsInput
    projects?: ProjectsCreateNestedManyWithoutTeamsInput
  }

  export type TeamsUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutMemberTeamsInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type TeamsCreateOrConnectWithoutCreatorInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutCreatorInput, TeamsUncheckedCreateWithoutCreatorInput>
  }

  export type TeamsCreateManyCreatorInputEnvelope = {
    data: TeamsCreateManyCreatorInput | TeamsCreateManyCreatorInput[]
  }

  export type TeamsCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedTeamsInput
    projects?: ProjectsCreateNestedManyWithoutTeamsInput
  }

  export type TeamsUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type TeamsCreateOrConnectWithoutMembersInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput>
  }

  export type RoadMapCreateWithoutCreatorInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutCreatorInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutCreatorInput, RoadMapUncheckedCreateWithoutCreatorInput>
  }

  export type RoadMapCreateManyCreatorInputEnvelope = {
    data: RoadMapCreateManyCreatorInput | RoadMapCreateManyCreatorInput[]
  }

  export type SprintsCreateWithoutCreatorInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutCreatorInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutCreatorInput, SprintsUncheckedCreateWithoutCreatorInput>
  }

  export type SprintsCreateManyCreatorInputEnvelope = {
    data: SprintsCreateManyCreatorInput | SprintsCreateManyCreatorInput[]
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type VerificationUpsertWithWhereUniqueWithoutUserInput = {
    where: VerificationWhereUniqueInput
    update: XOR<VerificationUpdateWithoutUserInput, VerificationUncheckedUpdateWithoutUserInput>
    create: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput>
  }

  export type VerificationUpdateWithWhereUniqueWithoutUserInput = {
    where: VerificationWhereUniqueInput
    data: XOR<VerificationUpdateWithoutUserInput, VerificationUncheckedUpdateWithoutUserInput>
  }

  export type VerificationUpdateManyWithWhereWithoutUserInput = {
    where: VerificationScalarWhereInput
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyWithoutUserInput>
  }

  export type VerificationScalarWhereInput = {
    AND?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
    OR?: VerificationScalarWhereInput[]
    NOT?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
    userId?: StringFilter<"Verification"> | string
  }

  export type ProjectsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutUsersInput, ProjectsUncheckedUpdateWithoutUsersInput>
    create: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutUsersInput, ProjectsUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutUsersInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ProjectsScalarWhereInput = {
    AND?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
    OR?: ProjectsScalarWhereInput[]
    NOT?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
    id?: StringFilter<"Projects"> | string
    name?: StringFilter<"Projects"> | string
    ordre?: IntFilter<"Projects"> | number
    description?: StringNullableFilter<"Projects"> | string | null
    image?: StringNullableFilter<"Projects"> | string | null
    status?: EnumStatusFilter<"Projects"> | $Enums.Status
    priority?: IntFilter<"Projects"> | number
    startDate?: DateTimeNullableFilter<"Projects"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Projects"> | Date | string | null
    createdAt?: DateTimeFilter<"Projects"> | Date | string
    updatedAt?: DateTimeFilter<"Projects"> | Date | string
    creatorId?: StringNullableFilter<"Projects"> | string | null
  }

  export type ProjectsUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutCreatorInput, ProjectsUncheckedUpdateWithoutCreatorInput>
    create: XOR<ProjectsCreateWithoutCreatorInput, ProjectsUncheckedCreateWithoutCreatorInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutCreatorInput, ProjectsUncheckedUpdateWithoutCreatorInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutCreatorInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutCreatorInput>
  }

  export type FeaturesUpsertWithWhereUniqueWithoutCreatorInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutCreatorInput, FeaturesUncheckedUpdateWithoutCreatorInput>
    create: XOR<FeaturesCreateWithoutCreatorInput, FeaturesUncheckedCreateWithoutCreatorInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutCreatorInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutCreatorInput, FeaturesUncheckedUpdateWithoutCreatorInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutCreatorInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutCreatorInput>
  }

  export type FeaturesScalarWhereInput = {
    AND?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
    OR?: FeaturesScalarWhereInput[]
    NOT?: FeaturesScalarWhereInput | FeaturesScalarWhereInput[]
    id?: StringFilter<"Features"> | string
    name?: StringFilter<"Features"> | string
    order?: IntFilter<"Features"> | number
    description?: StringNullableFilter<"Features"> | string | null
    status?: EnumStatusFilter<"Features"> | $Enums.Status
    priority?: IntFilter<"Features"> | number
    startDate?: DateTimeNullableFilter<"Features"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Features"> | Date | string | null
    createdAt?: DateTimeFilter<"Features"> | Date | string
    updatedAt?: DateTimeFilter<"Features"> | Date | string
    projectId?: StringFilter<"Features"> | string
    creatorId?: StringNullableFilter<"Features"> | string | null
    parentFeatureId?: StringNullableFilter<"Features"> | string | null
  }

  export type UserStoryUpsertWithWhereUniqueWithoutCreatorInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutCreatorInput, UserStoryUncheckedUpdateWithoutCreatorInput>
    create: XOR<UserStoryCreateWithoutCreatorInput, UserStoryUncheckedCreateWithoutCreatorInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutCreatorInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutCreatorInput, UserStoryUncheckedUpdateWithoutCreatorInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutCreatorInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutCreatorInput>
  }

  export type UserStoryScalarWhereInput = {
    AND?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
    OR?: UserStoryScalarWhereInput[]
    NOT?: UserStoryScalarWhereInput | UserStoryScalarWhereInput[]
    id?: StringFilter<"UserStory"> | string
    title?: StringFilter<"UserStory"> | string
    goal?: StringNullableFilter<"UserStory"> | string | null
    name?: StringFilter<"UserStory"> | string
    description?: StringNullableFilter<"UserStory"> | string | null
    status?: EnumStatusFilter<"UserStory"> | $Enums.Status
    priority?: IntFilter<"UserStory"> | number
    startDate?: DateTimeNullableFilter<"UserStory"> | Date | string | null
    endDate?: DateTimeNullableFilter<"UserStory"> | Date | string | null
    createdAt?: DateTimeFilter<"UserStory"> | Date | string
    updatedAt?: DateTimeFilter<"UserStory"> | Date | string
    projectId?: StringFilter<"UserStory"> | string
    creatorId?: StringNullableFilter<"UserStory"> | string | null
    parentUserStoryId?: StringNullableFilter<"UserStory"> | string | null
  }

  export type TasksUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutAssigneeInput, TasksUncheckedUpdateWithoutAssigneeInput>
    create: XOR<TasksCreateWithoutAssigneeInput, TasksUncheckedCreateWithoutAssigneeInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutAssigneeInput, TasksUncheckedUpdateWithoutAssigneeInput>
  }

  export type TasksUpdateManyWithWhereWithoutAssigneeInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type TasksScalarWhereInput = {
    AND?: TasksScalarWhereInput | TasksScalarWhereInput[]
    OR?: TasksScalarWhereInput[]
    NOT?: TasksScalarWhereInput | TasksScalarWhereInput[]
    id?: StringFilter<"Tasks"> | string
    title?: StringFilter<"Tasks"> | string
    description?: StringNullableFilter<"Tasks"> | string | null
    status?: EnumStatusFilter<"Tasks"> | $Enums.Status
    priority?: IntFilter<"Tasks"> | number
    dueDate?: DateTimeNullableFilter<"Tasks"> | Date | string | null
    createdAt?: DateTimeFilter<"Tasks"> | Date | string
    updatedAt?: DateTimeFilter<"Tasks"> | Date | string
    projectId?: StringFilter<"Tasks"> | string
    assigneeId?: StringNullableFilter<"Tasks"> | string | null
    parentTaskId?: StringNullableFilter<"Tasks"> | string | null
  }

  export type CommentsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutAuthorInput, CommentsUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentsCreateWithoutAuthorInput, CommentsUncheckedCreateWithoutAuthorInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutAuthorInput, CommentsUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentsUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentsScalarWhereInput = {
    AND?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    OR?: CommentsScalarWhereInput[]
    NOT?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    id?: StringFilter<"Comments"> | string
    title?: StringFilter<"Comments"> | string
    content?: StringFilter<"Comments"> | string
    order?: IntFilter<"Comments"> | number
    createdAt?: DateTimeFilter<"Comments"> | Date | string
    updatedAt?: DateTimeFilter<"Comments"> | Date | string
    thema?: StringNullableFilter<"Comments"> | string | null
    authorId?: StringFilter<"Comments"> | string
    parentCommentId?: StringNullableFilter<"Comments"> | string | null
    featureId?: StringNullableFilter<"Comments"> | string | null
    userStoryId?: StringNullableFilter<"Comments"> | string | null
    taskId?: StringNullableFilter<"Comments"> | string | null
    sprintId?: StringNullableFilter<"Comments"> | string | null
    roadMapId?: StringNullableFilter<"Comments"> | string | null
  }

  export type TimeLogUpsertWithWhereUniqueWithoutUserInput = {
    where: TimeLogWhereUniqueInput
    update: XOR<TimeLogUpdateWithoutUserInput, TimeLogUncheckedUpdateWithoutUserInput>
    create: XOR<TimeLogCreateWithoutUserInput, TimeLogUncheckedCreateWithoutUserInput>
  }

  export type TimeLogUpdateWithWhereUniqueWithoutUserInput = {
    where: TimeLogWhereUniqueInput
    data: XOR<TimeLogUpdateWithoutUserInput, TimeLogUncheckedUpdateWithoutUserInput>
  }

  export type TimeLogUpdateManyWithWhereWithoutUserInput = {
    where: TimeLogScalarWhereInput
    data: XOR<TimeLogUpdateManyMutationInput, TimeLogUncheckedUpdateManyWithoutUserInput>
  }

  export type TimeLogScalarWhereInput = {
    AND?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
    OR?: TimeLogScalarWhereInput[]
    NOT?: TimeLogScalarWhereInput | TimeLogScalarWhereInput[]
    id?: StringFilter<"TimeLog"> | string
    duration?: IntFilter<"TimeLog"> | number
    createdAt?: DateTimeFilter<"TimeLog"> | Date | string
    projectId?: StringFilter<"TimeLog"> | string
    userId?: StringFilter<"TimeLog"> | string
    taskId?: StringNullableFilter<"TimeLog"> | string | null
  }

  export type ActivityLogsUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLogsWhereUniqueInput
    update: XOR<ActivityLogsUpdateWithoutUserInput, ActivityLogsUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLogsCreateWithoutUserInput, ActivityLogsUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogsUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLogsWhereUniqueInput
    data: XOR<ActivityLogsUpdateWithoutUserInput, ActivityLogsUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLogsUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLogsScalarWhereInput
    data: XOR<ActivityLogsUpdateManyMutationInput, ActivityLogsUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityLogsScalarWhereInput = {
    AND?: ActivityLogsScalarWhereInput | ActivityLogsScalarWhereInput[]
    OR?: ActivityLogsScalarWhereInput[]
    NOT?: ActivityLogsScalarWhereInput | ActivityLogsScalarWhereInput[]
    id?: StringFilter<"ActivityLogs"> | string
    type?: EnumActionTypeFilter<"ActivityLogs"> | $Enums.ActionType
    message?: StringFilter<"ActivityLogs"> | string
    createdAt?: DateTimeFilter<"ActivityLogs"> | Date | string
    userId?: StringFilter<"ActivityLogs"> | string
  }

  export type FilesUpsertWithWhereUniqueWithoutUploaderInput = {
    where: FilesWhereUniqueInput
    update: XOR<FilesUpdateWithoutUploaderInput, FilesUncheckedUpdateWithoutUploaderInput>
    create: XOR<FilesCreateWithoutUploaderInput, FilesUncheckedCreateWithoutUploaderInput>
  }

  export type FilesUpdateWithWhereUniqueWithoutUploaderInput = {
    where: FilesWhereUniqueInput
    data: XOR<FilesUpdateWithoutUploaderInput, FilesUncheckedUpdateWithoutUploaderInput>
  }

  export type FilesUpdateManyWithWhereWithoutUploaderInput = {
    where: FilesScalarWhereInput
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyWithoutUploaderInput>
  }

  export type FilesScalarWhereInput = {
    AND?: FilesScalarWhereInput | FilesScalarWhereInput[]
    OR?: FilesScalarWhereInput[]
    NOT?: FilesScalarWhereInput | FilesScalarWhereInput[]
    id?: StringFilter<"Files"> | string
    name?: StringFilter<"Files"> | string
    extension?: StringNullableFilter<"Files"> | string | null
    url?: StringFilter<"Files"> | string
    category?: StringFilter<"Files"> | string
    type?: EnumFileTypeFilter<"Files"> | $Enums.FileType
    description?: StringNullableFilter<"Files"> | string | null
    fonctionnalities?: StringNullableFilter<"Files"> | string | null
    import?: StringNullableFilter<"Files"> | string | null
    export?: StringNullableFilter<"Files"> | string | null
    useby?: StringNullableFilter<"Files"> | string | null
    script?: StringNullableFilter<"Files"> | string | null
    version?: StringNullableFilter<"Files"> | string | null
    order?: IntFilter<"Files"> | number
    devorder?: IntFilter<"Files"> | number
    status?: EnumStatusFilter<"Files"> | $Enums.Status
    createdAt?: DateTimeFilter<"Files"> | Date | string
    creator?: StringNullableFilter<"Files"> | string | null
    projectId?: StringFilter<"Files"> | string
    uploaderId?: StringFilter<"Files"> | string
    parentFileId?: StringNullableFilter<"Files"> | string | null
  }

  export type TeamsUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TeamsWhereUniqueInput
    update: XOR<TeamsUpdateWithoutCreatorInput, TeamsUncheckedUpdateWithoutCreatorInput>
    create: XOR<TeamsCreateWithoutCreatorInput, TeamsUncheckedCreateWithoutCreatorInput>
  }

  export type TeamsUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TeamsWhereUniqueInput
    data: XOR<TeamsUpdateWithoutCreatorInput, TeamsUncheckedUpdateWithoutCreatorInput>
  }

  export type TeamsUpdateManyWithWhereWithoutCreatorInput = {
    where: TeamsScalarWhereInput
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TeamsScalarWhereInput = {
    AND?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
    OR?: TeamsScalarWhereInput[]
    NOT?: TeamsScalarWhereInput | TeamsScalarWhereInput[]
    id?: StringFilter<"Teams"> | string
    name?: StringFilter<"Teams"> | string
    description?: StringNullableFilter<"Teams"> | string | null
    image?: StringNullableFilter<"Teams"> | string | null
    privileges?: StringNullableFilter<"Teams"> | string | null
    teamType?: StringFilter<"Teams"> | string
    creatorId?: StringNullableFilter<"Teams"> | string | null
    createdAt?: DateTimeFilter<"Teams"> | Date | string
    updatedAt?: DateTimeFilter<"Teams"> | Date | string
  }

  export type TeamsUpsertWithWhereUniqueWithoutMembersInput = {
    where: TeamsWhereUniqueInput
    update: XOR<TeamsUpdateWithoutMembersInput, TeamsUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamsCreateWithoutMembersInput, TeamsUncheckedCreateWithoutMembersInput>
  }

  export type TeamsUpdateWithWhereUniqueWithoutMembersInput = {
    where: TeamsWhereUniqueInput
    data: XOR<TeamsUpdateWithoutMembersInput, TeamsUncheckedUpdateWithoutMembersInput>
  }

  export type TeamsUpdateManyWithWhereWithoutMembersInput = {
    where: TeamsScalarWhereInput
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyWithoutMembersInput>
  }

  export type RoadMapUpsertWithWhereUniqueWithoutCreatorInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutCreatorInput, RoadMapUncheckedUpdateWithoutCreatorInput>
    create: XOR<RoadMapCreateWithoutCreatorInput, RoadMapUncheckedCreateWithoutCreatorInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutCreatorInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutCreatorInput, RoadMapUncheckedUpdateWithoutCreatorInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutCreatorInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutCreatorInput>
  }

  export type RoadMapScalarWhereInput = {
    AND?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
    OR?: RoadMapScalarWhereInput[]
    NOT?: RoadMapScalarWhereInput | RoadMapScalarWhereInput[]
    id?: StringFilter<"RoadMap"> | string
    title?: StringFilter<"RoadMap"> | string
    description?: StringFilter<"RoadMap"> | string
    ordre?: IntFilter<"RoadMap"> | number
    phase?: StringFilter<"RoadMap"> | string
    estimatedDays?: IntFilter<"RoadMap"> | number
    progress?: IntFilter<"RoadMap"> | number
    deliverables?: StringFilter<"RoadMap"> | string
    technologies?: StringFilter<"RoadMap"> | string
    dependencies?: StringFilter<"RoadMap"> | string
    priority?: StringFilter<"RoadMap"> | string
    startDate?: DateTimeNullableFilter<"RoadMap"> | Date | string | null
    endDate?: DateTimeNullableFilter<"RoadMap"> | Date | string | null
    createdAt?: DateTimeFilter<"RoadMap"> | Date | string
    updatedAt?: DateTimeFilter<"RoadMap"> | Date | string
    projectId?: StringFilter<"RoadMap"> | string
    creatorId?: StringNullableFilter<"RoadMap"> | string | null
  }

  export type SprintsUpsertWithWhereUniqueWithoutCreatorInput = {
    where: SprintsWhereUniqueInput
    update: XOR<SprintsUpdateWithoutCreatorInput, SprintsUncheckedUpdateWithoutCreatorInput>
    create: XOR<SprintsCreateWithoutCreatorInput, SprintsUncheckedCreateWithoutCreatorInput>
  }

  export type SprintsUpdateWithWhereUniqueWithoutCreatorInput = {
    where: SprintsWhereUniqueInput
    data: XOR<SprintsUpdateWithoutCreatorInput, SprintsUncheckedUpdateWithoutCreatorInput>
  }

  export type SprintsUpdateManyWithWhereWithoutCreatorInput = {
    where: SprintsScalarWhereInput
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyWithoutCreatorInput>
  }

  export type SprintsScalarWhereInput = {
    AND?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
    OR?: SprintsScalarWhereInput[]
    NOT?: SprintsScalarWhereInput | SprintsScalarWhereInput[]
    id?: StringFilter<"Sprints"> | string
    name?: StringFilter<"Sprints"> | string
    goal?: StringNullableFilter<"Sprints"> | string | null
    startDate?: DateTimeFilter<"Sprints"> | Date | string
    endDate?: DateTimeFilter<"Sprints"> | Date | string
    status?: EnumSprintStatusFilter<"Sprints"> | $Enums.SprintStatus
    projectId?: StringFilter<"Sprints"> | string
    creatorId?: StringNullableFilter<"Sprints"> | string | null
    createdAt?: DateTimeFilter<"Sprints"> | Date | string
    updatedAt?: DateTimeFilter<"Sprints"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutVerificationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutVerificationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutVerificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
  }

  export type UserUpsertWithoutVerificationsInput = {
    update: XOR<UserUpdateWithoutVerificationsInput, UserUncheckedUpdateWithoutVerificationsInput>
    create: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVerificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVerificationsInput, UserUncheckedUpdateWithoutVerificationsInput>
  }

  export type UserUpdateWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutCreatedTeamsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedTeamsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
  }

  export type UserCreateWithoutMemberTeamsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutMemberTeamsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutMemberTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberTeamsInput, UserUncheckedCreateWithoutMemberTeamsInput>
  }

  export type ProjectsCreateWithoutTeamsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutTeamsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutTeamsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutTeamsInput, ProjectsUncheckedCreateWithoutTeamsInput>
  }

  export type UserUpsertWithoutCreatedTeamsInput = {
    update: XOR<UserUpdateWithoutCreatedTeamsInput, UserUncheckedUpdateWithoutCreatedTeamsInput>
    create: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTeamsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTeamsInput, UserUncheckedUpdateWithoutCreatedTeamsInput>
  }

  export type UserUpdateWithoutCreatedTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutMemberTeamsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMemberTeamsInput, UserUncheckedUpdateWithoutMemberTeamsInput>
    create: XOR<UserCreateWithoutMemberTeamsInput, UserUncheckedCreateWithoutMemberTeamsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMemberTeamsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMemberTeamsInput, UserUncheckedUpdateWithoutMemberTeamsInput>
  }

  export type UserUpdateManyWithWhereWithoutMemberTeamsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMemberTeamsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    lang?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type ProjectsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutTeamsInput, ProjectsUncheckedUpdateWithoutTeamsInput>
    create: XOR<ProjectsCreateWithoutTeamsInput, ProjectsUncheckedCreateWithoutTeamsInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutTeamsInput, ProjectsUncheckedUpdateWithoutTeamsInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutTeamsInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type UserCreateWithoutCreatedProjectsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedProjectsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type TeamsCreateWithoutProjectsInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedTeamsInput
    members?: UserCreateNestedManyWithoutMemberTeamsInput
  }

  export type TeamsUncheckedCreateWithoutProjectsInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutMemberTeamsInput
  }

  export type TeamsCreateOrConnectWithoutProjectsInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutProjectsInput, TeamsUncheckedCreateWithoutProjectsInput>
  }

  export type FeaturesCreateWithoutProjectInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutProjectInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutProjectInput, FeaturesUncheckedCreateWithoutProjectInput>
  }

  export type FeaturesCreateManyProjectInputEnvelope = {
    data: FeaturesCreateManyProjectInput | FeaturesCreateManyProjectInput[]
  }

  export type UserStoryCreateWithoutProjectInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutProjectInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutProjectInput, UserStoryUncheckedCreateWithoutProjectInput>
  }

  export type UserStoryCreateManyProjectInputEnvelope = {
    data: UserStoryCreateManyProjectInput | UserStoryCreateManyProjectInput[]
  }

  export type SprintsCreateWithoutProjectInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutProjectInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutProjectInput, SprintsUncheckedCreateWithoutProjectInput>
  }

  export type SprintsCreateManyProjectInputEnvelope = {
    data: SprintsCreateManyProjectInput | SprintsCreateManyProjectInput[]
  }

  export type FilesCreateWithoutProjectInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    parentFile?: FilesCreateNestedOneWithoutChildFilesInput
    childFiles?: FilesCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapCreateNestedManyWithoutFilesInput
  }

  export type FilesUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    uploaderId: string
    parentFileId?: string | null
    childFiles?: FilesUncheckedCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FilesCreateOrConnectWithoutProjectInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutProjectInput, FilesUncheckedCreateWithoutProjectInput>
  }

  export type FilesCreateManyProjectInputEnvelope = {
    data: FilesCreateManyProjectInput | FilesCreateManyProjectInput[]
  }

  export type SchemaFieldsCreateWithoutProjectInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parentField?: SchemaFieldsCreateNestedOneWithoutChildFieldsInput
    childFields?: SchemaFieldsCreateNestedManyWithoutParentFieldInput
  }

  export type SchemaFieldsUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    parentFieldId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    childFields?: SchemaFieldsUncheckedCreateNestedManyWithoutParentFieldInput
  }

  export type SchemaFieldsCreateOrConnectWithoutProjectInput = {
    where: SchemaFieldsWhereUniqueInput
    create: XOR<SchemaFieldsCreateWithoutProjectInput, SchemaFieldsUncheckedCreateWithoutProjectInput>
  }

  export type SchemaFieldsCreateManyProjectInputEnvelope = {
    data: SchemaFieldsCreateManyProjectInput | SchemaFieldsCreateManyProjectInput[]
  }

  export type RoadMapCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutProjectInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutProjectInput, RoadMapUncheckedCreateWithoutProjectInput>
  }

  export type RoadMapCreateManyProjectInputEnvelope = {
    data: RoadMapCreateManyProjectInput | RoadMapCreateManyProjectInput[]
  }

  export type TasksCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutProjectInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutProjectInput, TasksUncheckedCreateWithoutProjectInput>
  }

  export type TasksCreateManyProjectInputEnvelope = {
    data: TasksCreateManyProjectInput | TasksCreateManyProjectInput[]
  }

  export type TimeLogCreateWithoutProjectInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTimeLogsInput
    task?: TasksCreateNestedOneWithoutTimeLogsInput
  }

  export type TimeLogUncheckedCreateWithoutProjectInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    userId: string
    taskId?: string | null
  }

  export type TimeLogCreateOrConnectWithoutProjectInput = {
    where: TimeLogWhereUniqueInput
    create: XOR<TimeLogCreateWithoutProjectInput, TimeLogUncheckedCreateWithoutProjectInput>
  }

  export type TimeLogCreateManyProjectInputEnvelope = {
    data: TimeLogCreateManyProjectInput | TimeLogCreateManyProjectInput[]
  }

  export type UserUpsertWithoutCreatedProjectsInput = {
    update: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type UserUpdateWithoutCreatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutProjectsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProjectsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateManyWithWhereWithoutProjectsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProjectsInput>
  }

  export type TeamsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: TeamsWhereUniqueInput
    update: XOR<TeamsUpdateWithoutProjectsInput, TeamsUncheckedUpdateWithoutProjectsInput>
    create: XOR<TeamsCreateWithoutProjectsInput, TeamsUncheckedCreateWithoutProjectsInput>
  }

  export type TeamsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: TeamsWhereUniqueInput
    data: XOR<TeamsUpdateWithoutProjectsInput, TeamsUncheckedUpdateWithoutProjectsInput>
  }

  export type TeamsUpdateManyWithWhereWithoutProjectsInput = {
    where: TeamsScalarWhereInput
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type FeaturesUpsertWithWhereUniqueWithoutProjectInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutProjectInput, FeaturesUncheckedUpdateWithoutProjectInput>
    create: XOR<FeaturesCreateWithoutProjectInput, FeaturesUncheckedCreateWithoutProjectInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutProjectInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutProjectInput, FeaturesUncheckedUpdateWithoutProjectInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutProjectInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserStoryUpsertWithWhereUniqueWithoutProjectInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutProjectInput, UserStoryUncheckedUpdateWithoutProjectInput>
    create: XOR<UserStoryCreateWithoutProjectInput, UserStoryUncheckedCreateWithoutProjectInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutProjectInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutProjectInput, UserStoryUncheckedUpdateWithoutProjectInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutProjectInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutProjectInput>
  }

  export type SprintsUpsertWithWhereUniqueWithoutProjectInput = {
    where: SprintsWhereUniqueInput
    update: XOR<SprintsUpdateWithoutProjectInput, SprintsUncheckedUpdateWithoutProjectInput>
    create: XOR<SprintsCreateWithoutProjectInput, SprintsUncheckedCreateWithoutProjectInput>
  }

  export type SprintsUpdateWithWhereUniqueWithoutProjectInput = {
    where: SprintsWhereUniqueInput
    data: XOR<SprintsUpdateWithoutProjectInput, SprintsUncheckedUpdateWithoutProjectInput>
  }

  export type SprintsUpdateManyWithWhereWithoutProjectInput = {
    where: SprintsScalarWhereInput
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyWithoutProjectInput>
  }

  export type FilesUpsertWithWhereUniqueWithoutProjectInput = {
    where: FilesWhereUniqueInput
    update: XOR<FilesUpdateWithoutProjectInput, FilesUncheckedUpdateWithoutProjectInput>
    create: XOR<FilesCreateWithoutProjectInput, FilesUncheckedCreateWithoutProjectInput>
  }

  export type FilesUpdateWithWhereUniqueWithoutProjectInput = {
    where: FilesWhereUniqueInput
    data: XOR<FilesUpdateWithoutProjectInput, FilesUncheckedUpdateWithoutProjectInput>
  }

  export type FilesUpdateManyWithWhereWithoutProjectInput = {
    where: FilesScalarWhereInput
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyWithoutProjectInput>
  }

  export type SchemaFieldsUpsertWithWhereUniqueWithoutProjectInput = {
    where: SchemaFieldsWhereUniqueInput
    update: XOR<SchemaFieldsUpdateWithoutProjectInput, SchemaFieldsUncheckedUpdateWithoutProjectInput>
    create: XOR<SchemaFieldsCreateWithoutProjectInput, SchemaFieldsUncheckedCreateWithoutProjectInput>
  }

  export type SchemaFieldsUpdateWithWhereUniqueWithoutProjectInput = {
    where: SchemaFieldsWhereUniqueInput
    data: XOR<SchemaFieldsUpdateWithoutProjectInput, SchemaFieldsUncheckedUpdateWithoutProjectInput>
  }

  export type SchemaFieldsUpdateManyWithWhereWithoutProjectInput = {
    where: SchemaFieldsScalarWhereInput
    data: XOR<SchemaFieldsUpdateManyMutationInput, SchemaFieldsUncheckedUpdateManyWithoutProjectInput>
  }

  export type SchemaFieldsScalarWhereInput = {
    AND?: SchemaFieldsScalarWhereInput | SchemaFieldsScalarWhereInput[]
    OR?: SchemaFieldsScalarWhereInput[]
    NOT?: SchemaFieldsScalarWhereInput | SchemaFieldsScalarWhereInput[]
    id?: StringFilter<"SchemaFields"> | string
    name?: StringFilter<"SchemaFields"> | string
    fieldType?: EnumFieldTypeNullableFilter<"SchemaFields"> | $Enums.FieldType | null
    isRequired?: BoolFilter<"SchemaFields"> | boolean
    isUnique?: BoolFilter<"SchemaFields"> | boolean
    defaultValue?: StringNullableFilter<"SchemaFields"> | string | null
    description?: StringNullableFilter<"SchemaFields"> | string | null
    comment?: StringNullableFilter<"SchemaFields"> | string | null
    order?: IntFilter<"SchemaFields"> | number
    projectId?: StringFilter<"SchemaFields"> | string
    parentFieldId?: StringNullableFilter<"SchemaFields"> | string | null
    createdAt?: DateTimeFilter<"SchemaFields"> | Date | string
    updatedAt?: DateTimeFilter<"SchemaFields"> | Date | string
  }

  export type RoadMapUpsertWithWhereUniqueWithoutProjectInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutProjectInput, RoadMapUncheckedUpdateWithoutProjectInput>
    create: XOR<RoadMapCreateWithoutProjectInput, RoadMapUncheckedCreateWithoutProjectInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutProjectInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutProjectInput, RoadMapUncheckedUpdateWithoutProjectInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutProjectInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutProjectInput>
  }

  export type TasksUpsertWithWhereUniqueWithoutProjectInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutProjectInput, TasksUncheckedUpdateWithoutProjectInput>
    create: XOR<TasksCreateWithoutProjectInput, TasksUncheckedCreateWithoutProjectInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutProjectInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutProjectInput, TasksUncheckedUpdateWithoutProjectInput>
  }

  export type TasksUpdateManyWithWhereWithoutProjectInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutProjectInput>
  }

  export type TimeLogUpsertWithWhereUniqueWithoutProjectInput = {
    where: TimeLogWhereUniqueInput
    update: XOR<TimeLogUpdateWithoutProjectInput, TimeLogUncheckedUpdateWithoutProjectInput>
    create: XOR<TimeLogCreateWithoutProjectInput, TimeLogUncheckedCreateWithoutProjectInput>
  }

  export type TimeLogUpdateWithWhereUniqueWithoutProjectInput = {
    where: TimeLogWhereUniqueInput
    data: XOR<TimeLogUpdateWithoutProjectInput, TimeLogUncheckedUpdateWithoutProjectInput>
  }

  export type TimeLogUpdateManyWithWhereWithoutProjectInput = {
    where: TimeLogScalarWhereInput
    data: XOR<TimeLogUpdateManyMutationInput, TimeLogUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectsCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutRoadMapsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutRoadMapsInput, ProjectsUncheckedCreateWithoutRoadMapsInput>
  }

  export type UserCreateWithoutCreatedRoadMapsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedRoadMapsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedRoadMapsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRoadMapsInput, UserUncheckedCreateWithoutCreatedRoadMapsInput>
  }

  export type CommentsCreateWithoutRoadMapInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutRoadMapInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutRoadMapInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutRoadMapInput, CommentsUncheckedCreateWithoutRoadMapInput>
  }

  export type CommentsCreateManyRoadMapInputEnvelope = {
    data: CommentsCreateManyRoadMapInput | CommentsCreateManyRoadMapInput[]
  }

  export type FilesCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    project: ProjectsCreateNestedOneWithoutFilesInput
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    parentFile?: FilesCreateNestedOneWithoutChildFilesInput
    childFiles?: FilesCreateNestedManyWithoutParentFileInput
  }

  export type FilesUncheckedCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    uploaderId: string
    parentFileId?: string | null
    childFiles?: FilesUncheckedCreateNestedManyWithoutParentFileInput
  }

  export type FilesCreateOrConnectWithoutRoadMapsInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutRoadMapsInput, FilesUncheckedCreateWithoutRoadMapsInput>
  }

  export type FeaturesCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutRoadMapsInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutRoadMapsInput, FeaturesUncheckedCreateWithoutRoadMapsInput>
  }

  export type UserStoryCreateWithoutRoadMapsInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutRoadMapsInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutRoadMapsInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutRoadMapsInput, UserStoryUncheckedCreateWithoutRoadMapsInput>
  }

  export type SprintsCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutRoadMapsInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutRoadMapsInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutRoadMapsInput, SprintsUncheckedCreateWithoutRoadMapsInput>
  }

  export type TasksCreateWithoutRoadMapsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutRoadMapsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutRoadMapsInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutRoadMapsInput, TasksUncheckedCreateWithoutRoadMapsInput>
  }

  export type ProjectsUpsertWithoutRoadMapsInput = {
    update: XOR<ProjectsUpdateWithoutRoadMapsInput, ProjectsUncheckedUpdateWithoutRoadMapsInput>
    create: XOR<ProjectsCreateWithoutRoadMapsInput, ProjectsUncheckedCreateWithoutRoadMapsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutRoadMapsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutRoadMapsInput, ProjectsUncheckedUpdateWithoutRoadMapsInput>
  }

  export type ProjectsUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutCreatedRoadMapsInput = {
    update: XOR<UserUpdateWithoutCreatedRoadMapsInput, UserUncheckedUpdateWithoutCreatedRoadMapsInput>
    create: XOR<UserCreateWithoutCreatedRoadMapsInput, UserUncheckedCreateWithoutCreatedRoadMapsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRoadMapsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRoadMapsInput, UserUncheckedUpdateWithoutCreatedRoadMapsInput>
  }

  export type UserUpdateWithoutCreatedRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CommentsUpsertWithWhereUniqueWithoutRoadMapInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutRoadMapInput, CommentsUncheckedUpdateWithoutRoadMapInput>
    create: XOR<CommentsCreateWithoutRoadMapInput, CommentsUncheckedCreateWithoutRoadMapInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutRoadMapInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutRoadMapInput, CommentsUncheckedUpdateWithoutRoadMapInput>
  }

  export type CommentsUpdateManyWithWhereWithoutRoadMapInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutRoadMapInput>
  }

  export type FilesUpsertWithWhereUniqueWithoutRoadMapsInput = {
    where: FilesWhereUniqueInput
    update: XOR<FilesUpdateWithoutRoadMapsInput, FilesUncheckedUpdateWithoutRoadMapsInput>
    create: XOR<FilesCreateWithoutRoadMapsInput, FilesUncheckedCreateWithoutRoadMapsInput>
  }

  export type FilesUpdateWithWhereUniqueWithoutRoadMapsInput = {
    where: FilesWhereUniqueInput
    data: XOR<FilesUpdateWithoutRoadMapsInput, FilesUncheckedUpdateWithoutRoadMapsInput>
  }

  export type FilesUpdateManyWithWhereWithoutRoadMapsInput = {
    where: FilesScalarWhereInput
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyWithoutRoadMapsInput>
  }

  export type FeaturesUpsertWithWhereUniqueWithoutRoadMapsInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutRoadMapsInput, FeaturesUncheckedUpdateWithoutRoadMapsInput>
    create: XOR<FeaturesCreateWithoutRoadMapsInput, FeaturesUncheckedCreateWithoutRoadMapsInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutRoadMapsInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutRoadMapsInput, FeaturesUncheckedUpdateWithoutRoadMapsInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutRoadMapsInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutRoadMapsInput>
  }

  export type UserStoryUpsertWithWhereUniqueWithoutRoadMapsInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutRoadMapsInput, UserStoryUncheckedUpdateWithoutRoadMapsInput>
    create: XOR<UserStoryCreateWithoutRoadMapsInput, UserStoryUncheckedCreateWithoutRoadMapsInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutRoadMapsInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutRoadMapsInput, UserStoryUncheckedUpdateWithoutRoadMapsInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutRoadMapsInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutRoadMapsInput>
  }

  export type SprintsUpsertWithWhereUniqueWithoutRoadMapsInput = {
    where: SprintsWhereUniqueInput
    update: XOR<SprintsUpdateWithoutRoadMapsInput, SprintsUncheckedUpdateWithoutRoadMapsInput>
    create: XOR<SprintsCreateWithoutRoadMapsInput, SprintsUncheckedCreateWithoutRoadMapsInput>
  }

  export type SprintsUpdateWithWhereUniqueWithoutRoadMapsInput = {
    where: SprintsWhereUniqueInput
    data: XOR<SprintsUpdateWithoutRoadMapsInput, SprintsUncheckedUpdateWithoutRoadMapsInput>
  }

  export type SprintsUpdateManyWithWhereWithoutRoadMapsInput = {
    where: SprintsScalarWhereInput
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyWithoutRoadMapsInput>
  }

  export type TasksUpsertWithWhereUniqueWithoutRoadMapsInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutRoadMapsInput, TasksUncheckedUpdateWithoutRoadMapsInput>
    create: XOR<TasksCreateWithoutRoadMapsInput, TasksUncheckedCreateWithoutRoadMapsInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutRoadMapsInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutRoadMapsInput, TasksUncheckedUpdateWithoutRoadMapsInput>
  }

  export type TasksUpdateManyWithWhereWithoutRoadMapsInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutRoadMapsInput>
  }

  export type ProjectsCreateWithoutFeaturesInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutFeaturesInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutFeaturesInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutFeaturesInput, ProjectsUncheckedCreateWithoutFeaturesInput>
  }

  export type UserCreateWithoutCreatedFeaturesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedFeaturesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedFeaturesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedFeaturesInput, UserUncheckedCreateWithoutCreatedFeaturesInput>
  }

  export type FeaturesCreateWithoutChildFeaturesInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutChildFeaturesInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutChildFeaturesInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutChildFeaturesInput, FeaturesUncheckedCreateWithoutChildFeaturesInput>
  }

  export type FeaturesCreateWithoutParentFeatureInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutParentFeatureInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutParentFeatureInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutParentFeatureInput, FeaturesUncheckedCreateWithoutParentFeatureInput>
  }

  export type FeaturesCreateManyParentFeatureInputEnvelope = {
    data: FeaturesCreateManyParentFeatureInput | FeaturesCreateManyParentFeatureInput[]
  }

  export type CommentsCreateWithoutFeatureInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutFeatureInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutFeatureInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutFeatureInput, CommentsUncheckedCreateWithoutFeatureInput>
  }

  export type CommentsCreateManyFeatureInputEnvelope = {
    data: CommentsCreateManyFeatureInput | CommentsCreateManyFeatureInput[]
  }

  export type RoadMapCreateWithoutFeaturesInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutFeaturesInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutFeaturesInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutFeaturesInput, RoadMapUncheckedCreateWithoutFeaturesInput>
  }

  export type UserStoryCreateWithoutFeaturesInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutFeaturesInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutFeaturesInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutFeaturesInput, UserStoryUncheckedCreateWithoutFeaturesInput>
  }

  export type SprintsCreateWithoutFeaturesInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutFeaturesInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutFeaturesInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutFeaturesInput, SprintsUncheckedCreateWithoutFeaturesInput>
  }

  export type TasksCreateWithoutFeaturesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutFeaturesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutFeaturesInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutFeaturesInput, TasksUncheckedCreateWithoutFeaturesInput>
  }

  export type ProjectsUpsertWithoutFeaturesInput = {
    update: XOR<ProjectsUpdateWithoutFeaturesInput, ProjectsUncheckedUpdateWithoutFeaturesInput>
    create: XOR<ProjectsCreateWithoutFeaturesInput, ProjectsUncheckedCreateWithoutFeaturesInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutFeaturesInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutFeaturesInput, ProjectsUncheckedUpdateWithoutFeaturesInput>
  }

  export type ProjectsUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutCreatedFeaturesInput = {
    update: XOR<UserUpdateWithoutCreatedFeaturesInput, UserUncheckedUpdateWithoutCreatedFeaturesInput>
    create: XOR<UserCreateWithoutCreatedFeaturesInput, UserUncheckedCreateWithoutCreatedFeaturesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedFeaturesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedFeaturesInput, UserUncheckedUpdateWithoutCreatedFeaturesInput>
  }

  export type UserUpdateWithoutCreatedFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type FeaturesUpsertWithoutChildFeaturesInput = {
    update: XOR<FeaturesUpdateWithoutChildFeaturesInput, FeaturesUncheckedUpdateWithoutChildFeaturesInput>
    create: XOR<FeaturesCreateWithoutChildFeaturesInput, FeaturesUncheckedCreateWithoutChildFeaturesInput>
    where?: FeaturesWhereInput
  }

  export type FeaturesUpdateToOneWithWhereWithoutChildFeaturesInput = {
    where?: FeaturesWhereInput
    data: XOR<FeaturesUpdateWithoutChildFeaturesInput, FeaturesUncheckedUpdateWithoutChildFeaturesInput>
  }

  export type FeaturesUpdateWithoutChildFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutChildFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUpsertWithWhereUniqueWithoutParentFeatureInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutParentFeatureInput, FeaturesUncheckedUpdateWithoutParentFeatureInput>
    create: XOR<FeaturesCreateWithoutParentFeatureInput, FeaturesUncheckedCreateWithoutParentFeatureInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutParentFeatureInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutParentFeatureInput, FeaturesUncheckedUpdateWithoutParentFeatureInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutParentFeatureInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutParentFeatureInput>
  }

  export type CommentsUpsertWithWhereUniqueWithoutFeatureInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutFeatureInput, CommentsUncheckedUpdateWithoutFeatureInput>
    create: XOR<CommentsCreateWithoutFeatureInput, CommentsUncheckedCreateWithoutFeatureInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutFeatureInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutFeatureInput, CommentsUncheckedUpdateWithoutFeatureInput>
  }

  export type CommentsUpdateManyWithWhereWithoutFeatureInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutFeatureInput>
  }

  export type RoadMapUpsertWithWhereUniqueWithoutFeaturesInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutFeaturesInput, RoadMapUncheckedUpdateWithoutFeaturesInput>
    create: XOR<RoadMapCreateWithoutFeaturesInput, RoadMapUncheckedCreateWithoutFeaturesInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutFeaturesInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutFeaturesInput, RoadMapUncheckedUpdateWithoutFeaturesInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutFeaturesInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutFeaturesInput>
  }

  export type UserStoryUpsertWithWhereUniqueWithoutFeaturesInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutFeaturesInput, UserStoryUncheckedUpdateWithoutFeaturesInput>
    create: XOR<UserStoryCreateWithoutFeaturesInput, UserStoryUncheckedCreateWithoutFeaturesInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutFeaturesInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutFeaturesInput, UserStoryUncheckedUpdateWithoutFeaturesInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutFeaturesInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutFeaturesInput>
  }

  export type SprintsUpsertWithWhereUniqueWithoutFeaturesInput = {
    where: SprintsWhereUniqueInput
    update: XOR<SprintsUpdateWithoutFeaturesInput, SprintsUncheckedUpdateWithoutFeaturesInput>
    create: XOR<SprintsCreateWithoutFeaturesInput, SprintsUncheckedCreateWithoutFeaturesInput>
  }

  export type SprintsUpdateWithWhereUniqueWithoutFeaturesInput = {
    where: SprintsWhereUniqueInput
    data: XOR<SprintsUpdateWithoutFeaturesInput, SprintsUncheckedUpdateWithoutFeaturesInput>
  }

  export type SprintsUpdateManyWithWhereWithoutFeaturesInput = {
    where: SprintsScalarWhereInput
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyWithoutFeaturesInput>
  }

  export type TasksUpsertWithWhereUniqueWithoutFeaturesInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutFeaturesInput, TasksUncheckedUpdateWithoutFeaturesInput>
    create: XOR<TasksCreateWithoutFeaturesInput, TasksUncheckedCreateWithoutFeaturesInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutFeaturesInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutFeaturesInput, TasksUncheckedUpdateWithoutFeaturesInput>
  }

  export type TasksUpdateManyWithWhereWithoutFeaturesInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutFeaturesInput>
  }

  export type ProjectsCreateWithoutUserStoriesInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutUserStoriesInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutUserStoriesInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutUserStoriesInput, ProjectsUncheckedCreateWithoutUserStoriesInput>
  }

  export type UserCreateWithoutCreatedUserStoriesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedUserStoriesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedUserStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedUserStoriesInput, UserUncheckedCreateWithoutCreatedUserStoriesInput>
  }

  export type UserStoryCreateWithoutChildUserStoriesInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutChildUserStoriesInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutChildUserStoriesInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutChildUserStoriesInput, UserStoryUncheckedCreateWithoutChildUserStoriesInput>
  }

  export type UserStoryCreateWithoutParentUserStoryInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutParentUserStoryInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutParentUserStoryInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutParentUserStoryInput, UserStoryUncheckedCreateWithoutParentUserStoryInput>
  }

  export type UserStoryCreateManyParentUserStoryInputEnvelope = {
    data: UserStoryCreateManyParentUserStoryInput | UserStoryCreateManyParentUserStoryInput[]
  }

  export type CommentsCreateWithoutUserStoryInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutUserStoryInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutUserStoryInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutUserStoryInput, CommentsUncheckedCreateWithoutUserStoryInput>
  }

  export type CommentsCreateManyUserStoryInputEnvelope = {
    data: CommentsCreateManyUserStoryInput | CommentsCreateManyUserStoryInput[]
  }

  export type RoadMapCreateWithoutUserStoriesInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutUserStoriesInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutUserStoriesInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutUserStoriesInput, RoadMapUncheckedCreateWithoutUserStoriesInput>
  }

  export type FeaturesCreateWithoutUserStoriesInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutUserStoriesInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutUserStoriesInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutUserStoriesInput, FeaturesUncheckedCreateWithoutUserStoriesInput>
  }

  export type SprintsCreateWithoutUserStoriesInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutUserStoriesInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutUserStoriesInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutUserStoriesInput, SprintsUncheckedCreateWithoutUserStoriesInput>
  }

  export type TasksCreateWithoutUserStoriesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutUserStoriesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutUserStoriesInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutUserStoriesInput, TasksUncheckedCreateWithoutUserStoriesInput>
  }

  export type ProjectsUpsertWithoutUserStoriesInput = {
    update: XOR<ProjectsUpdateWithoutUserStoriesInput, ProjectsUncheckedUpdateWithoutUserStoriesInput>
    create: XOR<ProjectsCreateWithoutUserStoriesInput, ProjectsUncheckedCreateWithoutUserStoriesInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutUserStoriesInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutUserStoriesInput, ProjectsUncheckedUpdateWithoutUserStoriesInput>
  }

  export type ProjectsUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutCreatedUserStoriesInput = {
    update: XOR<UserUpdateWithoutCreatedUserStoriesInput, UserUncheckedUpdateWithoutCreatedUserStoriesInput>
    create: XOR<UserCreateWithoutCreatedUserStoriesInput, UserUncheckedCreateWithoutCreatedUserStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedUserStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedUserStoriesInput, UserUncheckedUpdateWithoutCreatedUserStoriesInput>
  }

  export type UserUpdateWithoutCreatedUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserStoryUpsertWithoutChildUserStoriesInput = {
    update: XOR<UserStoryUpdateWithoutChildUserStoriesInput, UserStoryUncheckedUpdateWithoutChildUserStoriesInput>
    create: XOR<UserStoryCreateWithoutChildUserStoriesInput, UserStoryUncheckedCreateWithoutChildUserStoriesInput>
    where?: UserStoryWhereInput
  }

  export type UserStoryUpdateToOneWithWhereWithoutChildUserStoriesInput = {
    where?: UserStoryWhereInput
    data: XOR<UserStoryUpdateWithoutChildUserStoriesInput, UserStoryUncheckedUpdateWithoutChildUserStoriesInput>
  }

  export type UserStoryUpdateWithoutChildUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutChildUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUpsertWithWhereUniqueWithoutParentUserStoryInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutParentUserStoryInput, UserStoryUncheckedUpdateWithoutParentUserStoryInput>
    create: XOR<UserStoryCreateWithoutParentUserStoryInput, UserStoryUncheckedCreateWithoutParentUserStoryInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutParentUserStoryInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutParentUserStoryInput, UserStoryUncheckedUpdateWithoutParentUserStoryInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutParentUserStoryInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutParentUserStoryInput>
  }

  export type CommentsUpsertWithWhereUniqueWithoutUserStoryInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutUserStoryInput, CommentsUncheckedUpdateWithoutUserStoryInput>
    create: XOR<CommentsCreateWithoutUserStoryInput, CommentsUncheckedCreateWithoutUserStoryInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutUserStoryInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutUserStoryInput, CommentsUncheckedUpdateWithoutUserStoryInput>
  }

  export type CommentsUpdateManyWithWhereWithoutUserStoryInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutUserStoryInput>
  }

  export type RoadMapUpsertWithWhereUniqueWithoutUserStoriesInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutUserStoriesInput, RoadMapUncheckedUpdateWithoutUserStoriesInput>
    create: XOR<RoadMapCreateWithoutUserStoriesInput, RoadMapUncheckedCreateWithoutUserStoriesInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutUserStoriesInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutUserStoriesInput, RoadMapUncheckedUpdateWithoutUserStoriesInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutUserStoriesInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutUserStoriesInput>
  }

  export type FeaturesUpsertWithWhereUniqueWithoutUserStoriesInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutUserStoriesInput, FeaturesUncheckedUpdateWithoutUserStoriesInput>
    create: XOR<FeaturesCreateWithoutUserStoriesInput, FeaturesUncheckedCreateWithoutUserStoriesInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutUserStoriesInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutUserStoriesInput, FeaturesUncheckedUpdateWithoutUserStoriesInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutUserStoriesInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutUserStoriesInput>
  }

  export type SprintsUpsertWithWhereUniqueWithoutUserStoriesInput = {
    where: SprintsWhereUniqueInput
    update: XOR<SprintsUpdateWithoutUserStoriesInput, SprintsUncheckedUpdateWithoutUserStoriesInput>
    create: XOR<SprintsCreateWithoutUserStoriesInput, SprintsUncheckedCreateWithoutUserStoriesInput>
  }

  export type SprintsUpdateWithWhereUniqueWithoutUserStoriesInput = {
    where: SprintsWhereUniqueInput
    data: XOR<SprintsUpdateWithoutUserStoriesInput, SprintsUncheckedUpdateWithoutUserStoriesInput>
  }

  export type SprintsUpdateManyWithWhereWithoutUserStoriesInput = {
    where: SprintsScalarWhereInput
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyWithoutUserStoriesInput>
  }

  export type TasksUpsertWithWhereUniqueWithoutUserStoriesInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutUserStoriesInput, TasksUncheckedUpdateWithoutUserStoriesInput>
    create: XOR<TasksCreateWithoutUserStoriesInput, TasksUncheckedCreateWithoutUserStoriesInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutUserStoriesInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutUserStoriesInput, TasksUncheckedUpdateWithoutUserStoriesInput>
  }

  export type TasksUpdateManyWithWhereWithoutUserStoriesInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutUserStoriesInput>
  }

  export type ProjectsCreateWithoutSprintsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutSprintsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutSprintsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutSprintsInput, ProjectsUncheckedCreateWithoutSprintsInput>
  }

  export type UserCreateWithoutCreatedSprintsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedSprintsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedSprintsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSprintsInput, UserUncheckedCreateWithoutCreatedSprintsInput>
  }

  export type CommentsCreateWithoutSprintInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutSprintInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutSprintInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutSprintInput, CommentsUncheckedCreateWithoutSprintInput>
  }

  export type CommentsCreateManySprintInputEnvelope = {
    data: CommentsCreateManySprintInput | CommentsCreateManySprintInput[]
  }

  export type RoadMapCreateWithoutSprintsInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutSprintsInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutSprintsInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutSprintsInput, RoadMapUncheckedCreateWithoutSprintsInput>
  }

  export type FeaturesCreateWithoutSprintsInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutSprintsInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutSprintsInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutSprintsInput, FeaturesUncheckedCreateWithoutSprintsInput>
  }

  export type UserStoryCreateWithoutSprintsInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutSprintsInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutSprintsInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutSprintsInput, UserStoryUncheckedCreateWithoutSprintsInput>
  }

  export type TasksCreateWithoutSprintsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutSprintsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutSprintsInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutSprintsInput, TasksUncheckedCreateWithoutSprintsInput>
  }

  export type ProjectsUpsertWithoutSprintsInput = {
    update: XOR<ProjectsUpdateWithoutSprintsInput, ProjectsUncheckedUpdateWithoutSprintsInput>
    create: XOR<ProjectsCreateWithoutSprintsInput, ProjectsUncheckedCreateWithoutSprintsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutSprintsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutSprintsInput, ProjectsUncheckedUpdateWithoutSprintsInput>
  }

  export type ProjectsUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutCreatedSprintsInput = {
    update: XOR<UserUpdateWithoutCreatedSprintsInput, UserUncheckedUpdateWithoutCreatedSprintsInput>
    create: XOR<UserCreateWithoutCreatedSprintsInput, UserUncheckedCreateWithoutCreatedSprintsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSprintsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSprintsInput, UserUncheckedUpdateWithoutCreatedSprintsInput>
  }

  export type UserUpdateWithoutCreatedSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CommentsUpsertWithWhereUniqueWithoutSprintInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutSprintInput, CommentsUncheckedUpdateWithoutSprintInput>
    create: XOR<CommentsCreateWithoutSprintInput, CommentsUncheckedCreateWithoutSprintInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutSprintInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutSprintInput, CommentsUncheckedUpdateWithoutSprintInput>
  }

  export type CommentsUpdateManyWithWhereWithoutSprintInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutSprintInput>
  }

  export type RoadMapUpsertWithWhereUniqueWithoutSprintsInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutSprintsInput, RoadMapUncheckedUpdateWithoutSprintsInput>
    create: XOR<RoadMapCreateWithoutSprintsInput, RoadMapUncheckedCreateWithoutSprintsInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutSprintsInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutSprintsInput, RoadMapUncheckedUpdateWithoutSprintsInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutSprintsInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutSprintsInput>
  }

  export type FeaturesUpsertWithWhereUniqueWithoutSprintsInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutSprintsInput, FeaturesUncheckedUpdateWithoutSprintsInput>
    create: XOR<FeaturesCreateWithoutSprintsInput, FeaturesUncheckedCreateWithoutSprintsInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutSprintsInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutSprintsInput, FeaturesUncheckedUpdateWithoutSprintsInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutSprintsInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutSprintsInput>
  }

  export type UserStoryUpsertWithWhereUniqueWithoutSprintsInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutSprintsInput, UserStoryUncheckedUpdateWithoutSprintsInput>
    create: XOR<UserStoryCreateWithoutSprintsInput, UserStoryUncheckedCreateWithoutSprintsInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutSprintsInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutSprintsInput, UserStoryUncheckedUpdateWithoutSprintsInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutSprintsInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutSprintsInput>
  }

  export type TasksUpsertWithWhereUniqueWithoutSprintsInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutSprintsInput, TasksUncheckedUpdateWithoutSprintsInput>
    create: XOR<TasksCreateWithoutSprintsInput, TasksUncheckedCreateWithoutSprintsInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutSprintsInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutSprintsInput, TasksUncheckedUpdateWithoutSprintsInput>
  }

  export type TasksUpdateManyWithWhereWithoutSprintsInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutSprintsInput>
  }

  export type ProjectsCreateWithoutTasksInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutTasksInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutTasksInput, ProjectsUncheckedCreateWithoutTasksInput>
  }

  export type UserCreateWithoutAssignedTasksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
  }

  export type TasksCreateWithoutChildTasksInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutChildTasksInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutChildTasksInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutChildTasksInput, TasksUncheckedCreateWithoutChildTasksInput>
  }

  export type TasksCreateWithoutParentTaskInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutParentTaskInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutParentTaskInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutParentTaskInput, TasksUncheckedCreateWithoutParentTaskInput>
  }

  export type TasksCreateManyParentTaskInputEnvelope = {
    data: TasksCreateManyParentTaskInput | TasksCreateManyParentTaskInput[]
  }

  export type TimeLogCreateWithoutTaskInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTimeLogsInput
    user: UserCreateNestedOneWithoutTimeLogsInput
  }

  export type TimeLogUncheckedCreateWithoutTaskInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    projectId: string
    userId: string
  }

  export type TimeLogCreateOrConnectWithoutTaskInput = {
    where: TimeLogWhereUniqueInput
    create: XOR<TimeLogCreateWithoutTaskInput, TimeLogUncheckedCreateWithoutTaskInput>
  }

  export type TimeLogCreateManyTaskInputEnvelope = {
    data: TimeLogCreateManyTaskInput | TimeLogCreateManyTaskInput[]
  }

  export type CommentsCreateWithoutTaskInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutTaskInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutTaskInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutTaskInput, CommentsUncheckedCreateWithoutTaskInput>
  }

  export type CommentsCreateManyTaskInputEnvelope = {
    data: CommentsCreateManyTaskInput | CommentsCreateManyTaskInput[]
  }

  export type RoadMapCreateWithoutTasksInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutTasksInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutTasksInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutTasksInput, RoadMapUncheckedCreateWithoutTasksInput>
  }

  export type FeaturesCreateWithoutTasksInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    comments?: CommentsUncheckedCreateNestedManyWithoutFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutTasksInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutTasksInput, FeaturesUncheckedCreateWithoutTasksInput>
  }

  export type UserStoryCreateWithoutTasksInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutTasksInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutTasksInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutTasksInput, UserStoryUncheckedCreateWithoutTasksInput>
  }

  export type SprintsCreateWithoutTasksInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    comments?: CommentsCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutSprintInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutTasksInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutTasksInput, SprintsUncheckedCreateWithoutTasksInput>
  }

  export type ProjectsUpsertWithoutTasksInput = {
    update: XOR<ProjectsUpdateWithoutTasksInput, ProjectsUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectsCreateWithoutTasksInput, ProjectsUncheckedCreateWithoutTasksInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutTasksInput, ProjectsUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectsUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TasksUpsertWithoutChildTasksInput = {
    update: XOR<TasksUpdateWithoutChildTasksInput, TasksUncheckedUpdateWithoutChildTasksInput>
    create: XOR<TasksCreateWithoutChildTasksInput, TasksUncheckedCreateWithoutChildTasksInput>
    where?: TasksWhereInput
  }

  export type TasksUpdateToOneWithWhereWithoutChildTasksInput = {
    where?: TasksWhereInput
    data: XOR<TasksUpdateWithoutChildTasksInput, TasksUncheckedUpdateWithoutChildTasksInput>
  }

  export type TasksUpdateWithoutChildTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutChildTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUpsertWithWhereUniqueWithoutParentTaskInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutParentTaskInput, TasksUncheckedUpdateWithoutParentTaskInput>
    create: XOR<TasksCreateWithoutParentTaskInput, TasksUncheckedCreateWithoutParentTaskInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutParentTaskInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutParentTaskInput, TasksUncheckedUpdateWithoutParentTaskInput>
  }

  export type TasksUpdateManyWithWhereWithoutParentTaskInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutParentTaskInput>
  }

  export type TimeLogUpsertWithWhereUniqueWithoutTaskInput = {
    where: TimeLogWhereUniqueInput
    update: XOR<TimeLogUpdateWithoutTaskInput, TimeLogUncheckedUpdateWithoutTaskInput>
    create: XOR<TimeLogCreateWithoutTaskInput, TimeLogUncheckedCreateWithoutTaskInput>
  }

  export type TimeLogUpdateWithWhereUniqueWithoutTaskInput = {
    where: TimeLogWhereUniqueInput
    data: XOR<TimeLogUpdateWithoutTaskInput, TimeLogUncheckedUpdateWithoutTaskInput>
  }

  export type TimeLogUpdateManyWithWhereWithoutTaskInput = {
    where: TimeLogScalarWhereInput
    data: XOR<TimeLogUpdateManyMutationInput, TimeLogUncheckedUpdateManyWithoutTaskInput>
  }

  export type CommentsUpsertWithWhereUniqueWithoutTaskInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutTaskInput, CommentsUncheckedUpdateWithoutTaskInput>
    create: XOR<CommentsCreateWithoutTaskInput, CommentsUncheckedCreateWithoutTaskInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutTaskInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutTaskInput, CommentsUncheckedUpdateWithoutTaskInput>
  }

  export type CommentsUpdateManyWithWhereWithoutTaskInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutTaskInput>
  }

  export type RoadMapUpsertWithWhereUniqueWithoutTasksInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutTasksInput, RoadMapUncheckedUpdateWithoutTasksInput>
    create: XOR<RoadMapCreateWithoutTasksInput, RoadMapUncheckedCreateWithoutTasksInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutTasksInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutTasksInput, RoadMapUncheckedUpdateWithoutTasksInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutTasksInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutTasksInput>
  }

  export type FeaturesUpsertWithWhereUniqueWithoutTasksInput = {
    where: FeaturesWhereUniqueInput
    update: XOR<FeaturesUpdateWithoutTasksInput, FeaturesUncheckedUpdateWithoutTasksInput>
    create: XOR<FeaturesCreateWithoutTasksInput, FeaturesUncheckedCreateWithoutTasksInput>
  }

  export type FeaturesUpdateWithWhereUniqueWithoutTasksInput = {
    where: FeaturesWhereUniqueInput
    data: XOR<FeaturesUpdateWithoutTasksInput, FeaturesUncheckedUpdateWithoutTasksInput>
  }

  export type FeaturesUpdateManyWithWhereWithoutTasksInput = {
    where: FeaturesScalarWhereInput
    data: XOR<FeaturesUpdateManyMutationInput, FeaturesUncheckedUpdateManyWithoutTasksInput>
  }

  export type UserStoryUpsertWithWhereUniqueWithoutTasksInput = {
    where: UserStoryWhereUniqueInput
    update: XOR<UserStoryUpdateWithoutTasksInput, UserStoryUncheckedUpdateWithoutTasksInput>
    create: XOR<UserStoryCreateWithoutTasksInput, UserStoryUncheckedCreateWithoutTasksInput>
  }

  export type UserStoryUpdateWithWhereUniqueWithoutTasksInput = {
    where: UserStoryWhereUniqueInput
    data: XOR<UserStoryUpdateWithoutTasksInput, UserStoryUncheckedUpdateWithoutTasksInput>
  }

  export type UserStoryUpdateManyWithWhereWithoutTasksInput = {
    where: UserStoryScalarWhereInput
    data: XOR<UserStoryUpdateManyMutationInput, UserStoryUncheckedUpdateManyWithoutTasksInput>
  }

  export type SprintsUpsertWithWhereUniqueWithoutTasksInput = {
    where: SprintsWhereUniqueInput
    update: XOR<SprintsUpdateWithoutTasksInput, SprintsUncheckedUpdateWithoutTasksInput>
    create: XOR<SprintsCreateWithoutTasksInput, SprintsUncheckedCreateWithoutTasksInput>
  }

  export type SprintsUpdateWithWhereUniqueWithoutTasksInput = {
    where: SprintsWhereUniqueInput
    data: XOR<SprintsUpdateWithoutTasksInput, SprintsUncheckedUpdateWithoutTasksInput>
  }

  export type SprintsUpdateManyWithWhereWithoutTasksInput = {
    where: SprintsScalarWhereInput
    data: XOR<SprintsUpdateManyMutationInput, SprintsUncheckedUpdateManyWithoutTasksInput>
  }

  export type ProjectsCreateWithoutSchemaFieldsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutSchemaFieldsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutSchemaFieldsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutSchemaFieldsInput, ProjectsUncheckedCreateWithoutSchemaFieldsInput>
  }

  export type SchemaFieldsCreateWithoutChildFieldsInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSchemaFieldsInput
    parentField?: SchemaFieldsCreateNestedOneWithoutChildFieldsInput
  }

  export type SchemaFieldsUncheckedCreateWithoutChildFieldsInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    projectId: string
    parentFieldId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchemaFieldsCreateOrConnectWithoutChildFieldsInput = {
    where: SchemaFieldsWhereUniqueInput
    create: XOR<SchemaFieldsCreateWithoutChildFieldsInput, SchemaFieldsUncheckedCreateWithoutChildFieldsInput>
  }

  export type SchemaFieldsCreateWithoutParentFieldInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSchemaFieldsInput
    childFields?: SchemaFieldsCreateNestedManyWithoutParentFieldInput
  }

  export type SchemaFieldsUncheckedCreateWithoutParentFieldInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    childFields?: SchemaFieldsUncheckedCreateNestedManyWithoutParentFieldInput
  }

  export type SchemaFieldsCreateOrConnectWithoutParentFieldInput = {
    where: SchemaFieldsWhereUniqueInput
    create: XOR<SchemaFieldsCreateWithoutParentFieldInput, SchemaFieldsUncheckedCreateWithoutParentFieldInput>
  }

  export type SchemaFieldsCreateManyParentFieldInputEnvelope = {
    data: SchemaFieldsCreateManyParentFieldInput | SchemaFieldsCreateManyParentFieldInput[]
  }

  export type ProjectsUpsertWithoutSchemaFieldsInput = {
    update: XOR<ProjectsUpdateWithoutSchemaFieldsInput, ProjectsUncheckedUpdateWithoutSchemaFieldsInput>
    create: XOR<ProjectsCreateWithoutSchemaFieldsInput, ProjectsUncheckedCreateWithoutSchemaFieldsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutSchemaFieldsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutSchemaFieldsInput, ProjectsUncheckedUpdateWithoutSchemaFieldsInput>
  }

  export type ProjectsUpdateWithoutSchemaFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutSchemaFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type SchemaFieldsUpsertWithoutChildFieldsInput = {
    update: XOR<SchemaFieldsUpdateWithoutChildFieldsInput, SchemaFieldsUncheckedUpdateWithoutChildFieldsInput>
    create: XOR<SchemaFieldsCreateWithoutChildFieldsInput, SchemaFieldsUncheckedCreateWithoutChildFieldsInput>
    where?: SchemaFieldsWhereInput
  }

  export type SchemaFieldsUpdateToOneWithWhereWithoutChildFieldsInput = {
    where?: SchemaFieldsWhereInput
    data: XOR<SchemaFieldsUpdateWithoutChildFieldsInput, SchemaFieldsUncheckedUpdateWithoutChildFieldsInput>
  }

  export type SchemaFieldsUpdateWithoutChildFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSchemaFieldsNestedInput
    parentField?: SchemaFieldsUpdateOneWithoutChildFieldsNestedInput
  }

  export type SchemaFieldsUncheckedUpdateWithoutChildFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
    parentFieldId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchemaFieldsUpsertWithWhereUniqueWithoutParentFieldInput = {
    where: SchemaFieldsWhereUniqueInput
    update: XOR<SchemaFieldsUpdateWithoutParentFieldInput, SchemaFieldsUncheckedUpdateWithoutParentFieldInput>
    create: XOR<SchemaFieldsCreateWithoutParentFieldInput, SchemaFieldsUncheckedCreateWithoutParentFieldInput>
  }

  export type SchemaFieldsUpdateWithWhereUniqueWithoutParentFieldInput = {
    where: SchemaFieldsWhereUniqueInput
    data: XOR<SchemaFieldsUpdateWithoutParentFieldInput, SchemaFieldsUncheckedUpdateWithoutParentFieldInput>
  }

  export type SchemaFieldsUpdateManyWithWhereWithoutParentFieldInput = {
    where: SchemaFieldsScalarWhereInput
    data: XOR<SchemaFieldsUpdateManyMutationInput, SchemaFieldsUncheckedUpdateManyWithoutParentFieldInput>
  }

  export type ProjectsCreateWithoutTimeLogsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    files?: FilesCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutTimeLogsInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    files?: FilesUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutTimeLogsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutTimeLogsInput, ProjectsUncheckedCreateWithoutTimeLogsInput>
  }

  export type UserCreateWithoutTimeLogsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutTimeLogsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutTimeLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimeLogsInput, UserUncheckedCreateWithoutTimeLogsInput>
  }

  export type TasksCreateWithoutTimeLogsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    comments?: CommentsCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutTimeLogsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutTimeLogsInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutTimeLogsInput, TasksUncheckedCreateWithoutTimeLogsInput>
  }

  export type ProjectsUpsertWithoutTimeLogsInput = {
    update: XOR<ProjectsUpdateWithoutTimeLogsInput, ProjectsUncheckedUpdateWithoutTimeLogsInput>
    create: XOR<ProjectsCreateWithoutTimeLogsInput, ProjectsUncheckedCreateWithoutTimeLogsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutTimeLogsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutTimeLogsInput, ProjectsUncheckedUpdateWithoutTimeLogsInput>
  }

  export type ProjectsUpdateWithoutTimeLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutTimeLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutTimeLogsInput = {
    update: XOR<UserUpdateWithoutTimeLogsInput, UserUncheckedUpdateWithoutTimeLogsInput>
    create: XOR<UserCreateWithoutTimeLogsInput, UserUncheckedCreateWithoutTimeLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimeLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimeLogsInput, UserUncheckedUpdateWithoutTimeLogsInput>
  }

  export type UserUpdateWithoutTimeLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutTimeLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TasksUpsertWithoutTimeLogsInput = {
    update: XOR<TasksUpdateWithoutTimeLogsInput, TasksUncheckedUpdateWithoutTimeLogsInput>
    create: XOR<TasksCreateWithoutTimeLogsInput, TasksUncheckedCreateWithoutTimeLogsInput>
    where?: TasksWhereInput
  }

  export type TasksUpdateToOneWithWhereWithoutTimeLogsInput = {
    where?: TasksWhereInput
    data: XOR<TasksUpdateWithoutTimeLogsInput, TasksUncheckedUpdateWithoutTimeLogsInput>
  }

  export type TasksUpdateWithoutTimeLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutTimeLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type UserCreateWithoutAuthoredCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAuthoredCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAuthoredCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthoredCommentsInput, UserUncheckedCreateWithoutAuthoredCommentsInput>
  }

  export type CommentsCreateWithoutChildCommentsInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    parentComment?: CommentsCreateNestedOneWithoutChildCommentsInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutChildCommentsInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type CommentsCreateOrConnectWithoutChildCommentsInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutChildCommentsInput, CommentsUncheckedCreateWithoutChildCommentsInput>
  }

  export type CommentsCreateWithoutParentCommentInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    author: UserCreateNestedOneWithoutAuthoredCommentsInput
    childComments?: CommentsCreateNestedManyWithoutParentCommentInput
    feature?: FeaturesCreateNestedOneWithoutCommentsInput
    userStory?: UserStoryCreateNestedOneWithoutCommentsInput
    task?: TasksCreateNestedOneWithoutCommentsInput
    sprint?: SprintsCreateNestedOneWithoutCommentsInput
    roadMap?: RoadMapCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutParentCommentInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
    childComments?: CommentsUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type CommentsCreateOrConnectWithoutParentCommentInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutParentCommentInput, CommentsUncheckedCreateWithoutParentCommentInput>
  }

  export type CommentsCreateManyParentCommentInputEnvelope = {
    data: CommentsCreateManyParentCommentInput | CommentsCreateManyParentCommentInput[]
  }

  export type FeaturesCreateWithoutCommentsInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutFeaturesInput
    creator?: UserCreateNestedOneWithoutCreatedFeaturesInput
    parentFeature?: FeaturesCreateNestedOneWithoutChildFeaturesInput
    childFeatures?: FeaturesCreateNestedManyWithoutParentFeatureInput
    roadMaps?: RoadMapCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsCreateNestedManyWithoutFeaturesInput
    tasks?: TasksCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentFeatureId?: string | null
    childFeatures?: FeaturesUncheckedCreateNestedManyWithoutParentFeatureInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFeaturesInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutFeaturesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutFeaturesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutFeaturesInput
  }

  export type FeaturesCreateOrConnectWithoutCommentsInput = {
    where: FeaturesWhereUniqueInput
    create: XOR<FeaturesCreateWithoutCommentsInput, FeaturesUncheckedCreateWithoutCommentsInput>
  }

  export type UserStoryCreateWithoutCommentsInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutUserStoriesInput
    creator?: UserCreateNestedOneWithoutCreatedUserStoriesInput
    parentUserStory?: UserStoryCreateNestedOneWithoutChildUserStoriesInput
    childUserStories?: UserStoryCreateNestedManyWithoutParentUserStoryInput
    roadMaps?: RoadMapCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    parentUserStoryId?: string | null
    childUserStories?: UserStoryUncheckedCreateNestedManyWithoutParentUserStoryInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutUserStoriesInput
    features?: FeaturesUncheckedCreateNestedManyWithoutUserStoriesInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutUserStoriesInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUserStoriesInput
  }

  export type UserStoryCreateOrConnectWithoutCommentsInput = {
    where: UserStoryWhereUniqueInput
    create: XOR<UserStoryCreateWithoutCommentsInput, UserStoryUncheckedCreateWithoutCommentsInput>
  }

  export type TasksCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    parentTask?: TasksCreateNestedOneWithoutChildTasksInput
    childTasks?: TasksCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapCreateNestedManyWithoutTasksInput
    features?: FeaturesCreateNestedManyWithoutTasksInput
    userStories?: UserStoryCreateNestedManyWithoutTasksInput
    sprints?: SprintsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    parentTaskId?: string | null
    childTasks?: TasksUncheckedCreateNestedManyWithoutParentTaskInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutTaskInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutTasksInput
    features?: FeaturesUncheckedCreateNestedManyWithoutTasksInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutTasksInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutCommentsInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
  }

  export type SprintsCreateWithoutCommentsInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutSprintsInput
    creator?: UserCreateNestedOneWithoutCreatedSprintsInput
    roadMaps?: RoadMapCreateNestedManyWithoutSprintsInput
    features?: FeaturesCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryCreateNestedManyWithoutSprintsInput
    tasks?: TasksCreateNestedManyWithoutSprintsInput
  }

  export type SprintsUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutSprintsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutSprintsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutSprintsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutSprintsInput
  }

  export type SprintsCreateOrConnectWithoutCommentsInput = {
    where: SprintsWhereUniqueInput
    create: XOR<SprintsCreateWithoutCommentsInput, SprintsUncheckedCreateWithoutCommentsInput>
  }

  export type RoadMapCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    files?: FilesCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    files?: FilesUncheckedCreateNestedManyWithoutRoadMapsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutCommentsInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutCommentsInput, RoadMapUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutAuthoredCommentsInput = {
    update: XOR<UserUpdateWithoutAuthoredCommentsInput, UserUncheckedUpdateWithoutAuthoredCommentsInput>
    create: XOR<UserCreateWithoutAuthoredCommentsInput, UserUncheckedCreateWithoutAuthoredCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthoredCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthoredCommentsInput, UserUncheckedUpdateWithoutAuthoredCommentsInput>
  }

  export type UserUpdateWithoutAuthoredCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthoredCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CommentsUpsertWithoutChildCommentsInput = {
    update: XOR<CommentsUpdateWithoutChildCommentsInput, CommentsUncheckedUpdateWithoutChildCommentsInput>
    create: XOR<CommentsCreateWithoutChildCommentsInput, CommentsUncheckedCreateWithoutChildCommentsInput>
    where?: CommentsWhereInput
  }

  export type CommentsUpdateToOneWithWhereWithoutChildCommentsInput = {
    where?: CommentsWhereInput
    data: XOR<CommentsUpdateWithoutChildCommentsInput, CommentsUncheckedUpdateWithoutChildCommentsInput>
  }

  export type CommentsUpdateWithoutChildCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutChildCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUpsertWithWhereUniqueWithoutParentCommentInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutParentCommentInput, CommentsUncheckedUpdateWithoutParentCommentInput>
    create: XOR<CommentsCreateWithoutParentCommentInput, CommentsUncheckedCreateWithoutParentCommentInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutParentCommentInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutParentCommentInput, CommentsUncheckedUpdateWithoutParentCommentInput>
  }

  export type CommentsUpdateManyWithWhereWithoutParentCommentInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutParentCommentInput>
  }

  export type FeaturesUpsertWithoutCommentsInput = {
    update: XOR<FeaturesUpdateWithoutCommentsInput, FeaturesUncheckedUpdateWithoutCommentsInput>
    create: XOR<FeaturesCreateWithoutCommentsInput, FeaturesUncheckedCreateWithoutCommentsInput>
    where?: FeaturesWhereInput
  }

  export type FeaturesUpdateToOneWithWhereWithoutCommentsInput = {
    where?: FeaturesWhereInput
    data: XOR<FeaturesUpdateWithoutCommentsInput, FeaturesUncheckedUpdateWithoutCommentsInput>
  }

  export type FeaturesUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type UserStoryUpsertWithoutCommentsInput = {
    update: XOR<UserStoryUpdateWithoutCommentsInput, UserStoryUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserStoryCreateWithoutCommentsInput, UserStoryUncheckedCreateWithoutCommentsInput>
    where?: UserStoryWhereInput
  }

  export type UserStoryUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserStoryWhereInput
    data: XOR<UserStoryUpdateWithoutCommentsInput, UserStoryUncheckedUpdateWithoutCommentsInput>
  }

  export type UserStoryUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type TasksUpsertWithoutCommentsInput = {
    update: XOR<TasksUpdateWithoutCommentsInput, TasksUncheckedUpdateWithoutCommentsInput>
    create: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
    where?: TasksWhereInput
  }

  export type TasksUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TasksWhereInput
    data: XOR<TasksUpdateWithoutCommentsInput, TasksUncheckedUpdateWithoutCommentsInput>
  }

  export type TasksUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type SprintsUpsertWithoutCommentsInput = {
    update: XOR<SprintsUpdateWithoutCommentsInput, SprintsUncheckedUpdateWithoutCommentsInput>
    create: XOR<SprintsCreateWithoutCommentsInput, SprintsUncheckedCreateWithoutCommentsInput>
    where?: SprintsWhereInput
  }

  export type SprintsUpdateToOneWithWhereWithoutCommentsInput = {
    where?: SprintsWhereInput
    data: XOR<SprintsUpdateWithoutCommentsInput, SprintsUncheckedUpdateWithoutCommentsInput>
  }

  export type SprintsUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type RoadMapUpsertWithoutCommentsInput = {
    update: XOR<RoadMapUpdateWithoutCommentsInput, RoadMapUncheckedUpdateWithoutCommentsInput>
    create: XOR<RoadMapCreateWithoutCommentsInput, RoadMapUncheckedCreateWithoutCommentsInput>
    where?: RoadMapWhereInput
  }

  export type RoadMapUpdateToOneWithWhereWithoutCommentsInput = {
    where?: RoadMapWhereInput
    data: XOR<RoadMapUpdateWithoutCommentsInput, RoadMapUncheckedUpdateWithoutCommentsInput>
  }

  export type RoadMapUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type ProjectsCreateWithoutFilesInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedProjectsInput
    users?: UserCreateNestedManyWithoutProjectsInput
    teams?: TeamsCreateNestedManyWithoutProjectsInput
    features?: FeaturesCreateNestedManyWithoutProjectInput
    userStories?: UserStoryCreateNestedManyWithoutProjectInput
    sprints?: SprintsCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapCreateNestedManyWithoutProjectInput
    tasks?: TasksCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectsUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    teams?: TeamsUncheckedCreateNestedManyWithoutProjectsInput
    features?: FeaturesUncheckedCreateNestedManyWithoutProjectInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutProjectInput
    schemaFields?: SchemaFieldsUncheckedCreateNestedManyWithoutProjectInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TasksUncheckedCreateNestedManyWithoutProjectInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectsCreateOrConnectWithoutFilesInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutFilesInput, ProjectsUncheckedCreateWithoutFilesInput>
  }

  export type UserCreateWithoutUploadedFilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsCreateNestedManyWithoutUserInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutUploadedFilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogsUncheckedCreateNestedManyWithoutUserInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutUploadedFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
  }

  export type FilesCreateWithoutChildFilesInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    project: ProjectsCreateNestedOneWithoutFilesInput
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    parentFile?: FilesCreateNestedOneWithoutChildFilesInput
    roadMaps?: RoadMapCreateNestedManyWithoutFilesInput
  }

  export type FilesUncheckedCreateWithoutChildFilesInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    uploaderId: string
    parentFileId?: string | null
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FilesCreateOrConnectWithoutChildFilesInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutChildFilesInput, FilesUncheckedCreateWithoutChildFilesInput>
  }

  export type FilesCreateWithoutParentFileInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    project: ProjectsCreateNestedOneWithoutFilesInput
    uploader: UserCreateNestedOneWithoutUploadedFilesInput
    childFiles?: FilesCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapCreateNestedManyWithoutFilesInput
  }

  export type FilesUncheckedCreateWithoutParentFileInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    uploaderId: string
    childFiles?: FilesUncheckedCreateNestedManyWithoutParentFileInput
    roadMaps?: RoadMapUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FilesCreateOrConnectWithoutParentFileInput = {
    where: FilesWhereUniqueInput
    create: XOR<FilesCreateWithoutParentFileInput, FilesUncheckedCreateWithoutParentFileInput>
  }

  export type FilesCreateManyParentFileInputEnvelope = {
    data: FilesCreateManyParentFileInput | FilesCreateManyParentFileInput[]
  }

  export type RoadMapCreateWithoutFilesInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectsCreateNestedOneWithoutRoadMapsInput
    creator?: UserCreateNestedOneWithoutCreatedRoadMapsInput
    comments?: CommentsCreateNestedManyWithoutRoadMapInput
    features?: FeaturesCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapUncheckedCreateWithoutFilesInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
    comments?: CommentsUncheckedCreateNestedManyWithoutRoadMapInput
    features?: FeaturesUncheckedCreateNestedManyWithoutRoadMapsInput
    userStories?: UserStoryUncheckedCreateNestedManyWithoutRoadMapsInput
    sprints?: SprintsUncheckedCreateNestedManyWithoutRoadMapsInput
    tasks?: TasksUncheckedCreateNestedManyWithoutRoadMapsInput
  }

  export type RoadMapCreateOrConnectWithoutFilesInput = {
    where: RoadMapWhereUniqueInput
    create: XOR<RoadMapCreateWithoutFilesInput, RoadMapUncheckedCreateWithoutFilesInput>
  }

  export type ProjectsUpsertWithoutFilesInput = {
    update: XOR<ProjectsUpdateWithoutFilesInput, ProjectsUncheckedUpdateWithoutFilesInput>
    create: XOR<ProjectsCreateWithoutFilesInput, ProjectsUncheckedCreateWithoutFilesInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutFilesInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutFilesInput, ProjectsUncheckedUpdateWithoutFilesInput>
  }

  export type ProjectsUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutUploadedFilesInput = {
    update: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type UserUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type FilesUpsertWithoutChildFilesInput = {
    update: XOR<FilesUpdateWithoutChildFilesInput, FilesUncheckedUpdateWithoutChildFilesInput>
    create: XOR<FilesCreateWithoutChildFilesInput, FilesUncheckedCreateWithoutChildFilesInput>
    where?: FilesWhereInput
  }

  export type FilesUpdateToOneWithWhereWithoutChildFilesInput = {
    where?: FilesWhereInput
    data: XOR<FilesUpdateWithoutChildFilesInput, FilesUncheckedUpdateWithoutChildFilesInput>
  }

  export type FilesUpdateWithoutChildFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectsUpdateOneRequiredWithoutFilesNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    parentFile?: FilesUpdateOneWithoutChildFilesNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateWithoutChildFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FilesUpsertWithWhereUniqueWithoutParentFileInput = {
    where: FilesWhereUniqueInput
    update: XOR<FilesUpdateWithoutParentFileInput, FilesUncheckedUpdateWithoutParentFileInput>
    create: XOR<FilesCreateWithoutParentFileInput, FilesUncheckedCreateWithoutParentFileInput>
  }

  export type FilesUpdateWithWhereUniqueWithoutParentFileInput = {
    where: FilesWhereUniqueInput
    data: XOR<FilesUpdateWithoutParentFileInput, FilesUncheckedUpdateWithoutParentFileInput>
  }

  export type FilesUpdateManyWithWhereWithoutParentFileInput = {
    where: FilesScalarWhereInput
    data: XOR<FilesUpdateManyMutationInput, FilesUncheckedUpdateManyWithoutParentFileInput>
  }

  export type RoadMapUpsertWithWhereUniqueWithoutFilesInput = {
    where: RoadMapWhereUniqueInput
    update: XOR<RoadMapUpdateWithoutFilesInput, RoadMapUncheckedUpdateWithoutFilesInput>
    create: XOR<RoadMapCreateWithoutFilesInput, RoadMapUncheckedCreateWithoutFilesInput>
  }

  export type RoadMapUpdateWithWhereUniqueWithoutFilesInput = {
    where: RoadMapWhereUniqueInput
    data: XOR<RoadMapUpdateWithoutFilesInput, RoadMapUncheckedUpdateWithoutFilesInput>
  }

  export type RoadMapUpdateManyWithWhereWithoutFilesInput = {
    where: RoadMapScalarWhereInput
    data: XOR<RoadMapUpdateManyMutationInput, RoadMapUncheckedUpdateManyWithoutFilesInput>
  }

  export type UserCreateWithoutActivityLogsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    verifications?: VerificationCreateNestedManyWithoutUserInput
    projects?: ProjectsCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.Role
    lang?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    createdProjects?: ProjectsUncheckedCreateNestedManyWithoutCreatorInput
    createdFeatures?: FeaturesUncheckedCreateNestedManyWithoutCreatorInput
    createdUserStories?: UserStoryUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TasksUncheckedCreateNestedManyWithoutAssigneeInput
    authoredComments?: CommentsUncheckedCreateNestedManyWithoutAuthorInput
    timeLogs?: TimeLogUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FilesUncheckedCreateNestedManyWithoutUploaderInput
    createdTeams?: TeamsUncheckedCreateNestedManyWithoutCreatorInput
    memberTeams?: TeamsUncheckedCreateNestedManyWithoutMembersInput
    createdRoadMaps?: RoadMapUncheckedCreateNestedManyWithoutCreatorInput
    createdSprints?: SprintsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutActivityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
  }

  export type UserUpsertWithoutActivityLogsInput = {
    update: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    idToken?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationCreateManyUserInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectsCreateManyCreatorInput = {
    id?: string
    name: string
    ordre?: number
    description?: string | null
    image?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturesCreateManyCreatorInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    parentFeatureId?: string | null
  }

  export type UserStoryCreateManyCreatorInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    parentUserStoryId?: string | null
  }

  export type TasksCreateManyAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    parentTaskId?: string | null
  }

  export type CommentsCreateManyAuthorInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type TimeLogCreateManyUserInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    projectId: string
    taskId?: string | null
  }

  export type ActivityLogsCreateManyUserInput = {
    id?: string
    type: $Enums.ActionType
    message: string
    createdAt?: Date | string
  }

  export type FilesCreateManyUploaderInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    parentFileId?: string | null
  }

  export type TeamsCreateManyCreatorInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    privileges?: string | null
    teamType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoadMapCreateManyCreatorInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type SprintsCreateManyCreatorInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectsUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    teams?: TeamsUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturesUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TasksUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimeLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTimeLogsNestedInput
    task?: TasksUpdateOneWithoutTimeLogsNestedInput
  }

  export type TimeLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimeLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FilesUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectsUpdateOneRequiredWithoutFilesNestedInput
    parentFile?: FilesUpdateOneWithoutChildFilesNestedInput
    childFiles?: FilesUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
    childFiles?: FilesUncheckedUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateManyWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamsUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutMemberTeamsNestedInput
    projects?: ProjectsUpdateManyWithoutTeamsNestedInput
  }

  export type TeamsUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutMemberTeamsNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type TeamsUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedTeamsNestedInput
    projects?: ProjectsUpdateManyWithoutTeamsNestedInput
  }

  export type TeamsUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type TeamsUncheckedUpdateManyWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadMapUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type SprintsUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutMemberTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    projects?: ProjectsUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMemberTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedProjectsNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUpdateManyWithoutProjectNestedInput
    files?: FilesUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUpdateManyWithoutProjectNestedInput
    tasks?: TasksUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutProjectNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutProjectNestedInput
    files?: FilesUncheckedUpdateManyWithoutProjectNestedInput
    schemaFields?: SchemaFieldsUncheckedUpdateManyWithoutProjectNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutProjectNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectsUncheckedUpdateManyWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesCreateManyProjectInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    parentFeatureId?: string | null
  }

  export type UserStoryCreateManyProjectInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
    parentUserStoryId?: string | null
  }

  export type SprintsCreateManyProjectInput = {
    id?: string
    name: string
    goal?: string | null
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.SprintStatus
    creatorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FilesCreateManyProjectInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    uploaderId: string
    parentFileId?: string | null
  }

  export type SchemaFieldsCreateManyProjectInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    parentFieldId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoadMapCreateManyProjectInput = {
    id?: string
    title: string
    description: string
    ordre?: number
    phase: string
    estimatedDays: number
    progress?: number
    deliverables: string
    technologies: string
    dependencies: string
    priority: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
  }

  export type TasksCreateManyProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assigneeId?: string | null
    parentTaskId?: string | null
  }

  export type TimeLogCreateManyProjectInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    userId: string
    taskId?: string | null
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    verifications?: VerificationUpdateManyWithoutUserNestedInput
    createdProjects?: ProjectsUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    createdProjects?: ProjectsUncheckedUpdateManyWithoutCreatorNestedInput
    createdFeatures?: FeaturesUncheckedUpdateManyWithoutCreatorNestedInput
    createdUserStories?: UserStoryUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TasksUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredComments?: CommentsUncheckedUpdateManyWithoutAuthorNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogsUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FilesUncheckedUpdateManyWithoutUploaderNestedInput
    createdTeams?: TeamsUncheckedUpdateManyWithoutCreatorNestedInput
    memberTeams?: TeamsUncheckedUpdateManyWithoutMembersNestedInput
    createdRoadMaps?: RoadMapUncheckedUpdateManyWithoutCreatorNestedInput
    createdSprints?: SprintsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lang?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedTeamsNestedInput
    members?: UserUpdateManyWithoutMemberTeamsNestedInput
  }

  export type TeamsUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutMemberTeamsNestedInput
  }

  export type TeamsUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    teamType?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturesUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SprintsUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FilesUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    parentFile?: FilesUpdateOneWithoutChildFilesNestedInput
    childFiles?: FilesUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
    childFiles?: FilesUncheckedUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchemaFieldsUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentField?: SchemaFieldsUpdateOneWithoutChildFieldsNestedInput
    childFields?: SchemaFieldsUpdateManyWithoutParentFieldNestedInput
  }

  export type SchemaFieldsUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    parentFieldId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childFields?: SchemaFieldsUncheckedUpdateManyWithoutParentFieldNestedInput
  }

  export type SchemaFieldsUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    parentFieldId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadMapUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TasksUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimeLogUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimeLogsNestedInput
    task?: TasksUpdateOneWithoutTimeLogsNestedInput
  }

  export type TimeLogUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimeLogUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsCreateManyRoadMapInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
  }

  export type CommentsUpdateWithoutRoadMapInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutRoadMapInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutRoadMapInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilesUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectsUpdateOneRequiredWithoutFilesNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    parentFile?: FilesUpdateOneWithoutChildFilesNestedInput
    childFiles?: FilesUpdateManyWithoutParentFileNestedInput
  }

  export type FilesUncheckedUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
    childFiles?: FilesUncheckedUpdateManyWithoutParentFileNestedInput
  }

  export type FilesUncheckedUpdateManyWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
    parentFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SprintsUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateManyWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutRoadMapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesCreateManyParentFeatureInput = {
    id?: string
    name: string
    order?: number
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
  }

  export type CommentsCreateManyFeatureInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type FeaturesUpdateWithoutParentFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutParentFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutParentFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUpdateWithoutFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoadMapUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SprintsUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateManyWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryCreateManyParentUserStoryInput = {
    id?: string
    title: string
    goal?: string | null
    name: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    creatorId?: string | null
  }

  export type CommentsCreateManyUserStoryInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type UserStoryUpdateWithoutParentUserStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutParentUserStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutParentUserStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUpdateWithoutUserStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutUserStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutUserStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoadMapUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SprintsUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateManyWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutUserStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsCreateManySprintInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    roadMapId?: string | null
  }

  export type CommentsUpdateWithoutSprintInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutSprintInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutSprintInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoadMapUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TasksUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    parentTask?: TasksUpdateOneWithoutChildTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutSprintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TasksCreateManyParentTaskInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.Status
    priority?: number
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
  }

  export type TimeLogCreateManyTaskInput = {
    id?: string
    duration: number
    createdAt?: Date | string
    projectId: string
    userId: string
  }

  export type CommentsCreateManyTaskInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    parentCommentId?: string | null
    featureId?: string | null
    userStoryId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type TasksUpdateWithoutParentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    childTasks?: TasksUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUpdateManyWithoutTaskNestedInput
    comments?: CommentsUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUpdateManyWithoutTasksNestedInput
    features?: FeaturesUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutParentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    childTasks?: TasksUncheckedUpdateManyWithoutParentTaskNestedInput
    timeLogs?: TimeLogUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTaskNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutTasksNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutTasksNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutTasksNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutParentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TimeLogUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutTimeLogsNestedInput
    user?: UserUpdateOneRequiredWithoutTimeLogsNestedInput
  }

  export type TimeLogUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeLogUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentsUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    parentComment?: CommentsUpdateOneWithoutChildCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoadMapUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    files?: FilesUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    files?: FilesUncheckedUpdateManyWithoutRoadMapsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeaturesUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutFeaturesNestedInput
    creator?: UserUpdateOneWithoutCreatedFeaturesNestedInput
    parentFeature?: FeaturesUpdateOneWithoutChildFeaturesNestedInput
    childFeatures?: FeaturesUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
    childFeatures?: FeaturesUncheckedUpdateManyWithoutParentFeatureNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutFeatureNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFeaturesNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutFeaturesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutFeaturesNestedInput
  }

  export type FeaturesUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentFeatureId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserStoryUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutUserStoriesNestedInput
    creator?: UserUpdateOneWithoutCreatedUserStoriesNestedInput
    parentUserStory?: UserStoryUpdateOneWithoutChildUserStoriesNestedInput
    childUserStories?: UserStoryUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    childUserStories?: UserStoryUncheckedUpdateManyWithoutParentUserStoryNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUserStoryNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutUserStoriesNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutUserStoriesNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutUserStoriesNestedInput
  }

  export type UserStoryUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    priority?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    parentUserStoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SprintsUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSprintsNestedInput
    creator?: UserUpdateOneWithoutCreatedSprintsNestedInput
    comments?: CommentsUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutSprintNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutSprintsNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutSprintsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutSprintsNestedInput
  }

  export type SprintsUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSprintStatusFieldUpdateOperationsInput | $Enums.SprintStatus
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchemaFieldsCreateManyParentFieldInput = {
    id?: string
    name: string
    fieldType?: $Enums.FieldType | null
    isRequired?: boolean
    isUnique?: boolean
    defaultValue?: string | null
    description?: string | null
    comment?: string | null
    order?: number
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchemaFieldsUpdateWithoutParentFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutSchemaFieldsNestedInput
    childFields?: SchemaFieldsUpdateManyWithoutParentFieldNestedInput
  }

  export type SchemaFieldsUncheckedUpdateWithoutParentFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childFields?: SchemaFieldsUncheckedUpdateManyWithoutParentFieldNestedInput
  }

  export type SchemaFieldsUncheckedUpdateManyWithoutParentFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fieldType?: NullableEnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    defaultValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsCreateManyParentCommentInput = {
    id?: string
    title: string
    content: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    thema?: string | null
    authorId: string
    featureId?: string | null
    userStoryId?: string | null
    taskId?: string | null
    sprintId?: string | null
    roadMapId?: string | null
  }

  export type CommentsUpdateWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutAuthoredCommentsNestedInput
    childComments?: CommentsUpdateManyWithoutParentCommentNestedInput
    feature?: FeaturesUpdateOneWithoutCommentsNestedInput
    userStory?: UserStoryUpdateOneWithoutCommentsNestedInput
    task?: TasksUpdateOneWithoutCommentsNestedInput
    sprint?: SprintsUpdateOneWithoutCommentsNestedInput
    roadMap?: RoadMapUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
    childComments?: CommentsUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type CommentsUncheckedUpdateManyWithoutParentCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thema?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    featureId?: NullableStringFieldUpdateOperationsInput | string | null
    userStoryId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    sprintId?: NullableStringFieldUpdateOperationsInput | string | null
    roadMapId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilesCreateManyParentFileInput = {
    id?: string
    name: string
    extension?: string | null
    url: string
    category?: string
    type: $Enums.FileType
    description?: string | null
    fonctionnalities?: string | null
    import?: string | null
    export?: string | null
    useby?: string | null
    script?: string | null
    version?: string | null
    order?: number
    devorder?: number
    status?: $Enums.Status
    createdAt?: Date | string
    creator?: string | null
    projectId: string
    uploaderId: string
  }

  export type FilesUpdateWithoutParentFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectsUpdateOneRequiredWithoutFilesNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    childFiles?: FilesUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateWithoutParentFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
    childFiles?: FilesUncheckedUpdateManyWithoutParentFileNestedInput
    roadMaps?: RoadMapUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FilesUncheckedUpdateManyWithoutParentFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    extension?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: EnumFileTypeFieldUpdateOperationsInput | $Enums.FileType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fonctionnalities?: NullableStringFieldUpdateOperationsInput | string | null
    import?: NullableStringFieldUpdateOperationsInput | string | null
    export?: NullableStringFieldUpdateOperationsInput | string | null
    useby?: NullableStringFieldUpdateOperationsInput | string | null
    script?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    devorder?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    uploaderId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadMapUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectsUpdateOneRequiredWithoutRoadMapsNestedInput
    creator?: UserUpdateOneWithoutCreatedRoadMapsNestedInput
    comments?: CommentsUpdateManyWithoutRoadMapNestedInput
    features?: FeaturesUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentsUncheckedUpdateManyWithoutRoadMapNestedInput
    features?: FeaturesUncheckedUpdateManyWithoutRoadMapsNestedInput
    userStories?: UserStoryUncheckedUpdateManyWithoutRoadMapsNestedInput
    sprints?: SprintsUncheckedUpdateManyWithoutRoadMapsNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutRoadMapsNestedInput
  }

  export type RoadMapUncheckedUpdateManyWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ordre?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    estimatedDays?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    deliverables?: StringFieldUpdateOperationsInput | string
    technologies?: StringFieldUpdateOperationsInput | string
    dependencies?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}